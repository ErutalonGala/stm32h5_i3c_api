
I3C_Controller_InBandInterrupt_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08005ff4  08005ff4  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ff4  08005ff4  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005ffc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000054  08006050  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006050  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_line   00011531  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a9  00000000  00000000  000315fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001176c  00000000  00000000  000316a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002345  00000000  00000000  00042e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000eb0  00000000  00000000  00045158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7699  00000000  00000000  00046008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b1c  00000000  00000000  0010d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000209b4  00000000  00000000  0010e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d8c  00000000  00000000  0012eb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000054 	.word	0x20000054
 8000274:	00000000 	.word	0x00000000
 8000278:	08005fb0 	.word	0x08005fb0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000058 	.word	0x20000058
 8000294:	08005fb0 	.word	0x08005fb0

08000298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800029c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800029e:	e003      	b.n	80002a8 <LoopCopyDataInit>

080002a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80002a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002a6:	3104      	adds	r1, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80002ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002b0:	d3f6      	bcc.n	80002a0 <CopyDataInit>
	ldr	r2, =_sbss
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80002b4:	e002      	b.n	80002bc <LoopFillZerobss>

080002b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002b8:	f842 3b04 	str.w	r3, [r2], #4

080002bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <LoopForever+0x16>)
	cmp	r2, r3
 80002be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002c0:	d3f9      	bcc.n	80002b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002c2:	f000 ff1b 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002c6:	f005 fe4f 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002ca:	f000 fa37 	bl	800073c <main>

080002ce <LoopForever>:

LoopForever:
    b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80002d0:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80002d4:	08005ffc 	.word	0x08005ffc
	ldr	r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002dc:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 80002e0:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 80002e4:	200003ec 	.word	0x200003ec

080002e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_IRQHandler>

080002ea <BMA530_INIT_I3C>:
 * @note Writes 0x01 to register 0x3B by mimicking the I2C communication in the I3C way.
 * @note The first write is a dummy write.
 * @param hi3c1: I3C handle
 * @retval None
 */
void BMA530_INIT_I3C(I3C_HandleTypeDef* hi3c1) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af02      	add	r7, sp, #8
 80002f0:	6078      	str	r0, [r7, #4]
  /* */
  uint8_t I3C_Enable = 0x01;
 80002f2:	2301      	movs	r3, #1
 80002f4:	73fb      	strb	r3, [r7, #15]
  I3C_WRITE_REGS(hi3c1, BMA530_STATIC_ADD,0x3B, &I3C_Enable, 1);
 80002f6:	f107 030f 	add.w	r3, r7, #15
 80002fa:	2201      	movs	r2, #1
 80002fc:	9200      	str	r2, [sp, #0]
 80002fe:	223b      	movs	r2, #59	; 0x3b
 8000300:	2118      	movs	r1, #24
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 f810 	bl	8000328 <I3C_WRITE_REGS>
  HAL_Delay(1);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 ffe5 	bl	80012d8 <HAL_Delay>
  I3C_WRITE_REGS(hi3c1, BMA530_STATIC_ADD,0x3B, &I3C_Enable, 1);
 800030e:	f107 030f 	add.w	r3, r7, #15
 8000312:	2201      	movs	r2, #1
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	223b      	movs	r2, #59	; 0x3b
 8000318:	2118      	movs	r1, #24
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 f804 	bl	8000328 <I3C_WRITE_REGS>

}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <I3C_WRITE_REGS>:
  * @param  start_addr: Starting address of register(s), to write data
  * @param  data: pointer of data array to be written.
  * @param  len: number of bytes to be written
  * @retval None
  */
void I3C_WRITE_REGS(I3C_HandleTypeDef* hi3c1, uint8_t targ_add,uint8_t start_addr, uint8_t* data, uint32_t len) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b08e      	sub	sp, #56	; 0x38
 800032c:	af02      	add	r7, sp, #8
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	72bb      	strb	r3, [r7, #10]
  /* Check to ensure numbers of bytes don't exceed the limit*/
  if (len > 64) {
 800033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800033c:	2b40      	cmp	r3, #64	; 0x40
 800033e:	d862      	bhi.n	8000406 <I3C_WRITE_REGS+0xde>
    return;
  }
  /* Prepare a Data buffer with starting address as the index followed by data to be written */
  Regbuff[0] = start_addr;
 8000340:	4a34      	ldr	r2, [pc, #208]	; (8000414 <I3C_WRITE_REGS+0xec>)
 8000342:	7abb      	ldrb	r3, [r7, #10]
 8000344:	7013      	strb	r3, [r2, #0]
  for (uint32_t i = 0; i < len; i++) {
 8000346:	2300      	movs	r3, #0
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800034a:	e00a      	b.n	8000362 <I3C_WRITE_REGS+0x3a>
    Regbuff[i + 1] = data[i];
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000350:	441a      	add	r2, r3
 8000352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000354:	3301      	adds	r3, #1
 8000356:	7811      	ldrb	r1, [r2, #0]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <I3C_WRITE_REGS+0xec>)
 800035a:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < len; i++) {
 800035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800035e:	3301      	adds	r3, #1
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000366:	429a      	cmp	r2, r3
 8000368:	d3f0      	bcc.n	800034c <I3C_WRITE_REGS+0x24>
  }
  /* Descriptor for private data transmit */
  I3C_PrivateTypeDef aPrivateDescriptorConfig[1] = {
 800036a:	7afb      	ldrb	r3, [r7, #11]
 800036c:	753b      	strb	r3, [r7, #20]
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <I3C_WRITE_REGS+0xec>)
 8000370:	61bb      	str	r3, [r7, #24]
      {targ_add, {Regbuff, len + 1}, {NULL, 0}, HAL_I3C_DIRECTION_WRITE},
 8000372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000374:	3301      	adds	r3, #1
  I3C_PrivateTypeDef aPrivateDescriptorConfig[1] = {
 8000376:	61fb      	str	r3, [r7, #28]
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
 800037c:	2300      	movs	r3, #0
 800037e:	627b      	str	r3, [r7, #36]	; 0x24
 8000380:	2300      	movs	r3, #0
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
  };
  /* Prepare context Buffer*/
  aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.pBuffer = aControlBuffer;
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 8000386:	4a25      	ldr	r2, [pc, #148]	; (800041c <I3C_WRITE_REGS+0xf4>)
 8000388:	601a      	str	r2, [r3, #0]
  aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.Size = 1;
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 800038c:	2201      	movs	r2, #1
 800038e:	605a      	str	r2, [r3, #4]
  aContextBuffers[I3C_IDX_FRAME_1].TxBuf.pBuffer = Regbuff;
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 8000392:	4a20      	ldr	r2, [pc, #128]	; (8000414 <I3C_WRITE_REGS+0xec>)
 8000394:	611a      	str	r2, [r3, #16]
  aContextBuffers[I3C_IDX_FRAME_1].TxBuf.Size = len + 1;
 8000396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000398:	3301      	adds	r3, #1
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 800039c:	6153      	str	r3, [r2, #20]

  /*##- Add context buffer transmit in Frame context #####################*/
  if (HAL_I3C_AddDescToFrame(hi3c1, NULL, &aPrivateDescriptorConfig[I3C_IDX_FRAME_1], &aContextBuffers[I3C_IDX_FRAME_1],
                             aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.Size, I3C_PRIVATE_WITHOUT_ARB_STOP) != HAL_OK) {
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 80003a0:	685b      	ldr	r3, [r3, #4]
  if (HAL_I3C_AddDescToFrame(hi3c1, NULL, &aPrivateDescriptorConfig[I3C_IDX_FRAME_1], &aContextBuffers[I3C_IDX_FRAME_1],
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	f107 0214 	add.w	r2, r7, #20
 80003a8:	491d      	ldr	r1, [pc, #116]	; (8000420 <I3C_WRITE_REGS+0xf8>)
 80003aa:	9101      	str	r1, [sp, #4]
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f002 f9ae 	bl	8002714 <HAL_I3C_AddDescToFrame>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <I3C_WRITE_REGS+0x9a>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80003be:	f000 fca9 	bl	8000d14 <Error_Handler>
  }

  /* Transmit data */
  if (HAL_I3C_Ctrl_Transmit_IT(hi3c1, &aContextBuffers[I3C_IDX_FRAME_1]) != HAL_OK) {
 80003c2:	4915      	ldr	r1, [pc, #84]	; (8000418 <I3C_WRITE_REGS+0xf0>)
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f002 fb25 	bl	8002a14 <HAL_I3C_Ctrl_Transmit_IT>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <I3C_WRITE_REGS+0xac>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80003d0:	f000 fca0 	bl	8000d14 <Error_Handler>
   example is just waiting till the end of the transfer, but application may
   perform other tasks while transfer operation is ongoing. */

  /*skip this checking step, otherwise the program will be blocked in this check loop,
   * once the IBI request from BMA530 is enabled */
  if ((start_addr==0x30)&(data[0]==0xF)){
 80003d4:	7abb      	ldrb	r3, [r7, #10]
 80003d6:	2b30      	cmp	r3, #48	; 0x30
 80003d8:	bf0c      	ite	eq
 80003da:	2301      	moveq	r3, #1
 80003dc:	2300      	movne	r3, #0
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	bf0c      	ite	eq
 80003e8:	2301      	moveq	r3, #1
 80003ea:	2300      	movne	r3, #0
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4013      	ands	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d109      	bne.n	800040a <I3C_WRITE_REGS+0xe2>
	  return;
  }

  while ((HAL_I3C_GetState(hi3c1) != HAL_I3C_STATE_READY) ) {
 80003f6:	bf00      	nop
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f002 fc7d 	bl	8002cf8 <HAL_I3C_GetState>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b10      	cmp	r3, #16
 8000402:	d1f9      	bne.n	80003f8 <I3C_WRITE_REGS+0xd0>
 8000404:	e002      	b.n	800040c <I3C_WRITE_REGS+0xe4>
    return;
 8000406:	bf00      	nop
 8000408:	e000      	b.n	800040c <I3C_WRITE_REGS+0xe4>
	  return;
 800040a:	bf00      	nop

  }
}
 800040c:	3730      	adds	r7, #48	; 0x30
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200001ec 	.word	0x200001ec
 8000418:	20000090 	.word	0x20000090
 800041c:	200001ac 	.word	0x200001ac
 8000420:	90000004 	.word	0x90000004

08000424 <I3C_READ_REGS>:
  * @param  len: number of bytes to be read.
  * @param  dummy_len: number of dummy bytes returned by the sensor.
  * 		The byte(s) will not be stored in output data array.
  * @retval None
  */
void I3C_READ_REGS(I3C_HandleTypeDef* hi3c1, uint8_t targ_add,uint8_t start_addr, uint8_t* data, uint32_t len, uint32_t dummy_len) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b094      	sub	sp, #80	; 0x50
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	460b      	mov	r3, r1
 8000430:	72fb      	strb	r3, [r7, #11]
 8000432:	4613      	mov	r3, r2
 8000434:	72bb      	strb	r3, [r7, #10]
  /* Descriptor for private data reception */
  I3C_PrivateTypeDef aPrivateDescriptor[2] = {
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	753b      	strb	r3, [r7, #20]
 800043a:	f107 030a 	add.w	r3, r7, #10
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	2301      	movs	r3, #1
 8000442:	61fb      	str	r3, [r7, #28]
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
 8000448:	2300      	movs	r3, #0
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
 800044c:	2300      	movs	r3, #0
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000456:	2300      	movs	r3, #0
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
 800045a:	2300      	movs	r3, #0
 800045c:	637b      	str	r3, [r7, #52]	; 0x34
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	63bb      	str	r3, [r7, #56]	; 0x38
      {targ_add, {&start_addr, 1}, {NULL, 0}, HAL_I3C_DIRECTION_WRITE},
      {targ_add, {NULL, 0}, {data, len + dummy_len}, HAL_I3C_DIRECTION_READ}};
 8000462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000466:	4413      	add	r3, r2
  I3C_PrivateTypeDef aPrivateDescriptor[2] = {
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	643b      	str	r3, [r7, #64]	; 0x40
  /* Prepare context Buffer*/
  aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.pBuffer = aControlBuffer;
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <I3C_READ_REGS+0xe8>)
 8000472:	4a27      	ldr	r2, [pc, #156]	; (8000510 <I3C_READ_REGS+0xec>)
 8000474:	601a      	str	r2, [r3, #0]
  aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.Size = 2;
 8000476:	4b25      	ldr	r3, [pc, #148]	; (800050c <I3C_READ_REGS+0xe8>)
 8000478:	2202      	movs	r2, #2
 800047a:	605a      	str	r2, [r3, #4]
  aContextBuffers[I3C_IDX_FRAME_1].TxBuf.pBuffer = aTxBuffer;
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <I3C_READ_REGS+0xe8>)
 800047e:	4a25      	ldr	r2, [pc, #148]	; (8000514 <I3C_READ_REGS+0xf0>)
 8000480:	611a      	str	r2, [r3, #16]
  aContextBuffers[I3C_IDX_FRAME_1].TxBuf.Size = 1;
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <I3C_READ_REGS+0xe8>)
 8000484:	2201      	movs	r2, #1
 8000486:	615a      	str	r2, [r3, #20]
  aContextBuffers[I3C_IDX_FRAME_1].RxBuf.pBuffer = aRxBuffer;
 8000488:	4b20      	ldr	r3, [pc, #128]	; (800050c <I3C_READ_REGS+0xe8>)
 800048a:	4a23      	ldr	r2, [pc, #140]	; (8000518 <I3C_READ_REGS+0xf4>)
 800048c:	619a      	str	r2, [r3, #24]
  aContextBuffers[I3C_IDX_FRAME_1].RxBuf.Size = COUNTOF(aRxBuffer);
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <I3C_READ_REGS+0xe8>)
 8000490:	2241      	movs	r2, #65	; 0x41
 8000492:	61da      	str	r2, [r3, #28]

  /*##- Add context buffer receiving in Frame context #####################*/
  if (HAL_I3C_AddDescToFrame(hi3c1, NULL, &aPrivateDescriptor[I3C_IDX_FRAME_1], &aContextBuffers[I3C_IDX_FRAME_1],
                             aContextBuffers[I3C_IDX_FRAME_1].CtrlBuf.Size, I3C_PRIVATE_WITH_ARB_RESTART) != HAL_OK) {
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <I3C_READ_REGS+0xe8>)
 8000496:	685b      	ldr	r3, [r3, #4]
  if (HAL_I3C_AddDescToFrame(hi3c1, NULL, &aPrivateDescriptor[I3C_IDX_FRAME_1], &aContextBuffers[I3C_IDX_FRAME_1],
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f107 0214 	add.w	r2, r7, #20
 800049e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80004a2:	9101      	str	r1, [sp, #4]
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <I3C_READ_REGS+0xe8>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	68f8      	ldr	r0, [r7, #12]
 80004ac:	f002 f932 	bl	8002714 <HAL_I3C_AddDescToFrame>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <I3C_READ_REGS+0x96>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80004b6:	f000 fc2d 	bl	8000d14 <Error_Handler>
  }

  /*##- Start the multiple transfer process
   * ###################################*/
  /* Receive data */
  if (HAL_I3C_Ctrl_MultipleTransfer_IT(hi3c1, &aContextBuffers[I3C_IDX_FRAME_1]) != HAL_OK) {
 80004ba:	4914      	ldr	r1, [pc, #80]	; (800050c <I3C_READ_REGS+0xe8>)
 80004bc:	68f8      	ldr	r0, [r7, #12]
 80004be:	f002 fb15 	bl	8002aec <HAL_I3C_Ctrl_MultipleTransfer_IT>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <I3C_READ_REGS+0xa8>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80004c8:	f000 fc24 	bl	8000d14 <Error_Handler>
  /*  Before starting a new communication transfer, you need to check the
   current state of the peripheral; if it's busy you need to wait for the end of
   current transfer before starting a new one. For simplicity reasons, this
   example is just waiting till the end of the transfer, but application may
   perform other tasks while transfer operation is ongoing. */
  while (HAL_I3C_GetState(hi3c1) != HAL_I3C_STATE_READY) {
 80004cc:	bf00      	nop
 80004ce:	68f8      	ldr	r0, [r7, #12]
 80004d0:	f002 fc12 	bl	8002cf8 <HAL_I3C_GetState>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b10      	cmp	r3, #16
 80004d8:	d1f9      	bne.n	80004ce <I3C_READ_REGS+0xaa>
  }
  /* Transfer the received data from buffer to array(input arg)*/
  for (uint32_t i = 0; i < len; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	647b      	str	r3, [r7, #68]	; 0x44
 80004de:	e00b      	b.n	80004f8 <I3C_READ_REGS+0xd4>
    data[i] = aRxBuffer[i + dummy_len];
 80004e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80004e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004e4:	441a      	add	r2, r3
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ea:	440b      	add	r3, r1
 80004ec:	490a      	ldr	r1, [pc, #40]	; (8000518 <I3C_READ_REGS+0xf4>)
 80004ee:	5c8a      	ldrb	r2, [r1, r2]
 80004f0:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < len; i++) {
 80004f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004f4:	3301      	adds	r3, #1
 80004f6:	647b      	str	r3, [r7, #68]	; 0x44
 80004f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80004fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3ef      	bcc.n	80004e0 <I3C_READ_REGS+0xbc>
  }
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3748      	adds	r7, #72	; 0x48
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000090 	.word	0x20000090
 8000510:	200001ac 	.word	0x200001ac
 8000514:	20000284 	.word	0x20000284
 8000518:	20000230 	.word	0x20000230

0800051c <SET_I3C_BUS_FREQ>:
  * @retval None
  *
  * @comment There are certain limitations w.r.t duty cycle allows for limited combinations of OD & PP frequencies.
			 In this case 3 sets of frequencies are defined for user to select from.
  */
void SET_I3C_BUS_FREQ(I3C_HandleTypeDef* hi3c1,char freq) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]

	uint8_t scl_l_pp, scl_h_i3c, scl_l_od;

	if (freq == 0){
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <SET_I3C_BUS_FREQ+0x20>
		scl_l_od = 0xf8;
 800052e:	23f8      	movs	r3, #248	; 0xf8
 8000530:	737b      	strb	r3, [r7, #13]
		scl_l_pp = 0xf8;
 8000532:	23f8      	movs	r3, #248	; 0xf8
 8000534:	73fb      	strb	r3, [r7, #15]
		scl_h_i3c = 0xf8;
 8000536:	23f8      	movs	r3, #248	; 0xf8
 8000538:	73bb      	strb	r3, [r7, #14]
 800053a:	e015      	b.n	8000568 <SET_I3C_BUS_FREQ+0x4c>
	}
	else if (freq == 1) {
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d106      	bne.n	8000550 <SET_I3C_BUS_FREQ+0x34>
		scl_l_od = 0xff;
 8000542:	23ff      	movs	r3, #255	; 0xff
 8000544:	737b      	strb	r3, [r7, #13]
		scl_l_pp = 0x7c;
 8000546:	237c      	movs	r3, #124	; 0x7c
 8000548:	73fb      	strb	r3, [r7, #15]
		scl_h_i3c = 0x7c;
 800054a:	237c      	movs	r3, #124	; 0x7c
 800054c:	73bb      	strb	r3, [r7, #14]
 800054e:	e00b      	b.n	8000568 <SET_I3C_BUS_FREQ+0x4c>
	}
	else if (freq == 2){
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d106      	bne.n	8000564 <SET_I3C_BUS_FREQ+0x48>
		scl_l_od = 0x55;
 8000556:	2355      	movs	r3, #85	; 0x55
 8000558:	737b      	strb	r3, [r7, #13]
		scl_l_pp = 0x8;
 800055a:	2308      	movs	r3, #8
 800055c:	73fb      	strb	r3, [r7, #15]
		scl_h_i3c = 0x9;
 800055e:	2309      	movs	r3, #9
 8000560:	73bb      	strb	r3, [r7, #14]
 8000562:	e001      	b.n	8000568 <SET_I3C_BUS_FREQ+0x4c>
	}
	else{
		Error_Handler();
 8000564:	f000 fbd6 	bl	8000d14 <Error_Handler>
	}

  /* Update timing registers */
  CtrlBusConf.SCLPPLowDuration = scl_l_pp;
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	7213      	strb	r3, [r2, #8]
  CtrlBusConf.SCLODLowDuration = scl_l_od;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 8000570:	7b7b      	ldrb	r3, [r7, #13]
 8000572:	7293      	strb	r3, [r2, #10]
  CtrlBusConf.SCLI3CHighDuration = scl_h_i3c;
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	7253      	strb	r3, [r2, #9]
  CtrlBusConf.SDAHoldTime = HAL_I3C_SDA_HOLD_TIME_1_5;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 800057c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000580:	601a      	str	r2, [r3, #0]
  CtrlBusConf.WaitTime = HAL_I3C_OWN_ACTIVITY_STATE_0;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  CtrlBusConf.SCLI2CHighDuration = 0x00;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 800058a:	2200      	movs	r2, #0
 800058c:	72da      	strb	r2, [r3, #11]
  CtrlBusConf.BusIdleDuration = 0x32;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 8000590:	2232      	movs	r2, #50	; 0x32
 8000592:	735a      	strb	r2, [r3, #13]
  CtrlBusConf.BusFreeDuration = 0xf8;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 8000596:	22f8      	movs	r2, #248	; 0xf8
 8000598:	731a      	strb	r2, [r3, #12]

  /* Update Controller Bus characteristic */
  HAL_I3C_Ctrl_BusCharacteristicConfig(hi3c1, &CtrlBusConf);
 800059a:	4904      	ldr	r1, [pc, #16]	; (80005ac <SET_I3C_BUS_FREQ+0x90>)
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f001 ff18 	bl	80023d2 <HAL_I3C_Ctrl_BusCharacteristicConfig>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000274 	.word	0x20000274

080005b0 <CCC_BROADCAST>:
  * @param  CCC_data: Broadcast CCC value
  * @retval None
  *
  * @comment This function is tested with ENEC & SETXTIME commands
  */
void CCC_BROADCAST(I3C_HandleTypeDef* hi3c1,char CCC_add,uint8_t* CCC_data) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	460b      	mov	r3, r1
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	72fb      	strb	r3, [r7, #11]


  /* Define a CCC Descriptor */
  I3C_CCCTypeDef aBroadcast_CCC[] = {
 80005be:	2300      	movs	r3, #0
 80005c0:	743b      	strb	r3, [r7, #16]
 80005c2:	7afb      	ldrb	r3, [r7, #11]
 80005c4:	747b      	strb	r3, [r7, #17]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
      /*  Target Addr           CCC Value           CCC data + defbyte pointer  CCC size + defbyte         Direction */
      {0, CCC_add, {CCC_data, 1}, LL_I3C_DIRECTION_WRITE}};
  /* Assign values */
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.pBuffer = aControlBuffer_CCC;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <CCC_BROADCAST+0x78>)
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <CCC_BROADCAST+0x7c>)
 80005d6:	601a      	str	r2, [r3, #0]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.Size = COUNTOF(aControlBuffer_CCC);
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <CCC_BROADCAST+0x78>)
 80005da:	220f      	movs	r2, #15
 80005dc:	605a      	str	r2, [r3, #4]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].TxBuf.pBuffer = aTxBuffer_CCC;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <CCC_BROADCAST+0x78>)
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <CCC_BROADCAST+0x80>)
 80005e2:	611a      	str	r2, [r3, #16]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].TxBuf.Size = 1;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <CCC_BROADCAST+0x78>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]

  /*##- Add context buffer Set CCC frame in Frame context ############################*/
  if (HAL_I3C_AddDescToFrame(hi3c1, aBroadcast_CCC, NULL, &aContextBuffers_CCC[I3C_IDX_FRAME_1],
 80005ea:	f107 0110 	add.w	r1, r7, #16
 80005ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <CCC_BROADCAST+0x78>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f002 f889 	bl	8002714 <HAL_I3C_AddDescToFrame>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <CCC_BROADCAST+0x5c>
                             COUNTOF(aBroadcast_CCC), I3C_BROADCAST_WITHOUT_DEFBYTE_RESTART) != HAL_OK) {
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 8000608:	f000 fb84 	bl	8000d14 <Error_Handler>
  }
  /* Transmit the Broadcast CCC*/
  if (HAL_I3C_Ctrl_TransmitCCC_IT(hi3c1, &aContextBuffers_CCC[I3C_IDX_FRAME_1]) != HAL_OK) {
 800060c:	4906      	ldr	r1, [pc, #24]	; (8000628 <CCC_BROADCAST+0x78>)
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f002 f910 	bl	8002834 <HAL_I3C_Ctrl_TransmitCCC_IT>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <CCC_BROADCAST+0x6e>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 800061a:	f000 fb7b 	bl	8000d14 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000d0 	.word	0x200000d0
 800062c:	20000170 	.word	0x20000170
 8000630:	200001e8 	.word	0x200001e8

08000634 <CCC_DIRECT_READ>:
  * @param  len: number of bytes to be read
  * @retval None
  *
  * @comment This function is tested with GETXTIME command
  */
void CCC_DIRECT_READ(I3C_HandleTypeDef *hi3c1, char TARGET_DYN_ADDR, char CCC_add, uint8_t *CCC_data, int len) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af02      	add	r7, sp, #8
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	460b      	mov	r3, r1
 8000640:	72fb      	strb	r3, [r7, #11]
 8000642:	4613      	mov	r3, r2
 8000644:	72bb      	strb	r3, [r7, #10]


  /* Define a CCC Descriptor */
  I3C_CCCTypeDef aDirect_CCC_READ[] = {
 8000646:	7afb      	ldrb	r3, [r7, #11]
 8000648:	743b      	strb	r3, [r7, #16]
 800064a:	7abb      	ldrb	r3, [r7, #10]
 800064c:	747b      	strb	r3, [r7, #17]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	61fb      	str	r3, [r7, #28]
      /*  Target Addr           CCC Value           CCC data + defbyte pointer  CCC size + defbyte         Direction */
      {TARGET_DYN_ADDR, CCC_add, {CCC_data, len}, LL_I3C_DIRECTION_READ}};
  /* Assign values */
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.pBuffer = aControlBuffer_CCC;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <CCC_DIRECT_READ+0x80>)
 8000660:	601a      	str	r2, [r3, #0]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.Size = COUNTOF(aControlBuffer_CCC);
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 8000664:	220f      	movs	r2, #15
 8000666:	605a      	str	r2, [r3, #4]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].RxBuf.pBuffer = CCC_data;
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6193      	str	r3, [r2, #24]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].RxBuf.Size = len;
 800066e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 8000672:	61d3      	str	r3, [r2, #28]

  /*##- Add context buffer Set CCC frame in Frame context ############################*/
  if (HAL_I3C_AddDescToFrame(hi3c1, aDirect_CCC_READ, NULL, &aContextBuffers_CCC[I3C_IDX_FRAME_1],
 8000674:	f107 0110 	add.w	r1, r7, #16
 8000678:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 8000684:	2200      	movs	r2, #0
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f002 f844 	bl	8002714 <HAL_I3C_AddDescToFrame>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <CCC_DIRECT_READ+0x62>
                             COUNTOF(aDirect_CCC_READ), I3C_DIRECT_WITHOUT_DEFBYTE_RESTART) != HAL_OK) {
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 8000692:	f000 fb3f 	bl	8000d14 <Error_Handler>
  }
  /* Transmit the Direct CCC*/
  if (HAL_I3C_Ctrl_ReceiveCCC_IT(hi3c1, &aContextBuffers_CCC[I3C_IDX_FRAME_1]) != HAL_OK) {
 8000696:	4906      	ldr	r1, [pc, #24]	; (80006b0 <CCC_DIRECT_READ+0x7c>)
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f002 f933 	bl	8002904 <HAL_I3C_Ctrl_ReceiveCCC_IT>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <CCC_DIRECT_READ+0x74>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80006a4:	f000 fb36 	bl	8000d14 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	20000170 	.word	0x20000170

080006b8 <CCC_DIRECT_WRITE>:
  * @param  len: number of bytes to be written
  * @retval None
  *
  * @comment This function is tested with GETXTIME command
  */
void CCC_DIRECT_WRITE(I3C_HandleTypeDef *hi3c1, char TARGET_DYN_ADDR, char CCC_add, uint8_t *CCC_data, int len) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af02      	add	r7, sp, #8
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	72fb      	strb	r3, [r7, #11]
 80006c6:	4613      	mov	r3, r2
 80006c8:	72bb      	strb	r3, [r7, #10]
  /* Define a CCC Descriptor */
  I3C_CCCTypeDef aDirect_CCC_WRITE[] = {
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	743b      	strb	r3, [r7, #16]
 80006ce:	7abb      	ldrb	r3, [r7, #10]
 80006d0:	747b      	strb	r3, [r7, #17]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
      /*  Target Addr           CCC Value           CCC data + defbyte pointer  CCC size + defbyte         Direction */
      {TARGET_DYN_ADDR, CCC_add, {CCC_data, len}, LL_I3C_DIRECTION_WRITE}};
  /* Assign values */
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.pBuffer = aControlBuffer_CCC;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <CCC_DIRECT_WRITE+0x80>)
 80006e2:	601a      	str	r2, [r3, #0]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].CtrlBuf.Size = COUNTOF(aControlBuffer_CCC);
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 80006e6:	220f      	movs	r2, #15
 80006e8:	605a      	str	r2, [r3, #4]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].TxBuf.pBuffer = CCC_data;
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6113      	str	r3, [r2, #16]
  aContextBuffers_CCC[I3C_IDX_FRAME_1].TxBuf.Size = len;
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 80006f4:	6153      	str	r3, [r2, #20]

  /*##- Add context buffer Set CCC frame in Frame context ############################*/
  if (HAL_I3C_AddDescToFrame(hi3c1, aDirect_CCC_WRITE, NULL, &aContextBuffers_CCC[I3C_IDX_FRAME_1],
 80006f6:	f107 0110 	add.w	r1, r7, #16
 80006fa:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2301      	movs	r3, #1
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 8000706:	2200      	movs	r2, #0
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f002 f803 	bl	8002714 <HAL_I3C_AddDescToFrame>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <CCC_DIRECT_WRITE+0x60>
                             COUNTOF(aDirect_CCC_WRITE), I3C_DIRECT_WITHOUT_DEFBYTE_RESTART) != HAL_OK) {
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 8000714:	f000 fafe 	bl	8000d14 <Error_Handler>
  }
  /* Transmit the Direct CCC*/
  if (HAL_I3C_Ctrl_TransmitCCC_IT(hi3c1, &aContextBuffers_CCC[I3C_IDX_FRAME_1]) != HAL_OK) {
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <CCC_DIRECT_WRITE+0x7c>)
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f002 f88a 	bl	8002834 <HAL_I3C_Ctrl_TransmitCCC_IT>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <CCC_DIRECT_WRITE+0x72>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 8000726:	f000 faf5 	bl	8000d14 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000d0 	.word	0x200000d0
 8000738:	20000170 	.word	0x20000170

0800073c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fd4d 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f991 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 fa73 	bl	8000c34 <MX_GPIO_Init>
  MX_I3C1_Init();
 800074e:	f000 f9f5 	bl	8000b3c <MX_I3C1_Init>
  MX_ICACHE_Init();
 8000752:	f000 fa5d 	bl	8000c10 <MX_ICACHE_Init>
  MX_MEMORYMAP_Init();
 8000756:	f000 fa66 	bl	8000c26 <MX_MEMORYMAP_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fbae 	bl	8000ebc <BSP_LED_Init>

  /* Configure USER push-button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fc2a 	bl	8000fbc <BSP_PB_Init>

  /* Wait for USER push-button press before starting the Communication */
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000768:	bf00      	nop
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fc9e 	bl	80010ac <BSP_PB_GetState>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f9      	bne.n	800076a <main+0x2e>

  }

  /* Wait for USER push-button release before starting the Communication */
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET) {
 8000776:	bf00      	nop
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fc97 	bl	80010ac <BSP_PB_GetState>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d1f9      	bne.n	8000778 <main+0x3c>

  }


  // Set frequency to 500kHz for initialization of I3C protocol
  SET_I3C_BUS_FREQ(&hi3c1,OD_500kHz_PP_500kHz);
 8000784:	2100      	movs	r1, #0
 8000786:	48b2      	ldr	r0, [pc, #712]	; (8000a50 <main+0x314>)
 8000788:	f7ff fec8 	bl	800051c <SET_I3C_BUS_FREQ>

  HAL_Delay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f000 fda3 	bl	80012d8 <HAL_Delay>

  // Enable I3C protocol
  BMA530_INIT_I3C(&hi3c1);
 8000792:	48af      	ldr	r0, [pc, #700]	; (8000a50 <main+0x314>)
 8000794:	f7ff fda9 	bl	80002ea <BMA530_INIT_I3C>

  HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fd9d 	bl	80012d8 <HAL_Delay>

  /*##- Start the transmission process ###################################*/
  /* Assign dynamic address process */
  if (HAL_I3C_Ctrl_DynAddrAssign_IT(&hi3c1, I3C_ONLY_ENTDAA) != HAL_OK) {
 800079e:	2102      	movs	r1, #2
 80007a0:	48ab      	ldr	r0, [pc, #684]	; (8000a50 <main+0x314>)
 80007a2:	f002 fa31 	bl	8002c08 <HAL_I3C_Ctrl_DynAddrAssign_IT>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x74>
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
 80007ac:	f000 fab2 	bl	8000d14 <Error_Handler>
   state of the peripheral; if it�s busy you need to wait for the end of current
   transfer before starting a new one.
   For simplicity reasons, this example is just waiting till the end of the
   transfer, but application may perform other tasks while transfer operation
   is ongoing. */
  while (HAL_I3C_GetState(&hi3c1) != HAL_I3C_STATE_READY) {
 80007b0:	bf00      	nop
 80007b2:	48a7      	ldr	r0, [pc, #668]	; (8000a50 <main+0x314>)
 80007b4:	f002 faa0 	bl	8002cf8 <HAL_I3C_GetState>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b10      	cmp	r3, #16
 80007bc:	d1f9      	bne.n	80007b2 <main+0x76>
  }

  HAL_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd8a 	bl	80012d8 <HAL_Delay>

  // Transmit ENEC broadcast message to Enable target initiated events(IBI).
  uint8_t aENEC_data[1] = {0x01};
 80007c4:	2301      	movs	r3, #1
 80007c6:	753b      	strb	r3, [r7, #20]
//  CCC_BROADCAST(&hi3c1, Broadcast_ENEC,aENEC_data);
  CCC_DIRECT_WRITE(&hi3c1,TARGET1_DYN_ADDR,DIRECT_ENEC,aENEC_data,1);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2201      	movs	r2, #1
 80007ce:	9200      	str	r2, [sp, #0]
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	2108      	movs	r1, #8
 80007d4:	489e      	ldr	r0, [pc, #632]	; (8000a50 <main+0x314>)
 80007d6:	f7ff ff6f 	bl	80006b8 <CCC_DIRECT_WRITE>
  HAL_Delay(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 fd7c 	bl	80012d8 <HAL_Delay>


  // Transmit Setxtime broadcast message to enable Async mode 0
//  0xDF -> Enter Async Mode 0, 0xFF ->Exit from enabled timing modes
  uint8_t aSETXTIME_data[1] = {0xDF};
 80007e0:	23df      	movs	r3, #223	; 0xdf
 80007e2:	743b      	strb	r3, [r7, #16]
  CCC_BROADCAST(&hi3c1, BROADCAST_SETXTIME,aSETXTIME_data);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	461a      	mov	r2, r3
 80007ea:	2128      	movs	r1, #40	; 0x28
 80007ec:	4898      	ldr	r0, [pc, #608]	; (8000a50 <main+0x314>)
 80007ee:	f7ff fedf 	bl	80005b0 <CCC_BROADCAST>

  //CCC_DIRECT_WRITE(&hi3c1,DIRECT_SETXTIME,TARGET1_DYN_ADDR,aSETXTIME_data,1);
  HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fd70 	bl	80012d8 <HAL_Delay>

  /* (Optional) SETMWL direct write to test function DIRECT_WRITE. */
  uint8_t aSETMWL_data[2] = {0xF,0x00};
 80007f8:	230f      	movs	r3, #15
 80007fa:	81bb      	strh	r3, [r7, #12]
  CCC_DIRECT_WRITE(&hi3c1,TARGET1_DYN_ADDR,DIRECT_ENEC,aSETMWL_data,1);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2201      	movs	r2, #1
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	2108      	movs	r1, #8
 8000808:	4891      	ldr	r0, [pc, #580]	; (8000a50 <main+0x314>)
 800080a:	f7ff ff55 	bl	80006b8 <CCC_DIRECT_WRITE>
  HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fd62 	bl	80012d8 <HAL_Delay>

  /* (Optional) GETXTIME direct read to test function DIRECT_READ.
   * The values received can be used for IBI analysis purposes */
  uint8_t aGETXTIME_data[4] ;
  CCC_DIRECT_READ(&hi3c1,TARGET1_DYN_ADDR,DIRECT_GETXTIME,aGETXTIME_data,4);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2204      	movs	r2, #4
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	2299      	movs	r2, #153	; 0x99
 800081e:	2108      	movs	r1, #8
 8000820:	488b      	ldr	r0, [pc, #556]	; (8000a50 <main+0x314>)
 8000822:	f7ff ff07 	bl	8000634 <CCC_DIRECT_READ>
  HAL_Delay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fd56 	bl	80012d8 <HAL_Delay>
//  CCC_DIRECT_READ(&hi3c1,TARGET1_DYN_ADDR,DIRECT_GETMRL,aGETMRL_data,4);
//  HAL_Delay(1);

  /* Since I3C is enabled, change bus frequency to a higher value.
  	  12.5Mhz is the highest supported frequency in SDR mode. */
  SET_I3C_BUS_FREQ(&hi3c1,OD_650kHz_PP_1000kHz);
 800082c:	2101      	movs	r1, #1
 800082e:	4888      	ldr	r0, [pc, #544]	; (8000a50 <main+0x314>)
 8000830:	f7ff fe74 	bl	800051c <SET_I3C_BUS_FREQ>

  HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fd4f 	bl	80012d8 <HAL_Delay>


  //--------------IBI Configuration START--------------------------------------------------------------

  // Disable accelerometer
  uint8_t acc_dis = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
  I3C_WRITE_REGS(&hi3c1, TARGET1_DYN_ADDR,0x30, &acc_dis, 1);
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	2201      	movs	r2, #1
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	2230      	movs	r2, #48	; 0x30
 8000846:	2108      	movs	r1, #8
 8000848:	4881      	ldr	r0, [pc, #516]	; (8000a50 <main+0x314>)
 800084a:	f7ff fd6d 	bl	8000328 <I3C_WRITE_REGS>

  uint8_t acc_dis_r= 0x00;
 800084e:	2300      	movs	r3, #0
 8000850:	71bb      	strb	r3, [r7, #6]
  I3C_READ_REGS(&hi3c1, TARGET1_DYN_ADDR,0x30,&acc_dis_r,1,1);
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	2201      	movs	r2, #1
 8000856:	9201      	str	r2, [sp, #4]
 8000858:	2201      	movs	r2, #1
 800085a:	9200      	str	r2, [sp, #0]
 800085c:	2230      	movs	r2, #48	; 0x30
 800085e:	2108      	movs	r1, #8
 8000860:	487b      	ldr	r0, [pc, #492]	; (8000a50 <main+0x314>)
 8000862:	f7ff fddf 	bl	8000424 <I3C_READ_REGS>

  // Set ODR
  uint8_t odr = 0xa3;
 8000866:	23a3      	movs	r3, #163	; 0xa3
 8000868:	717b      	strb	r3, [r7, #5]
  I3C_WRITE_REGS(&hi3c1, TARGET1_DYN_ADDR,0x31, &odr, 1);
 800086a:	1d7b      	adds	r3, r7, #5
 800086c:	2201      	movs	r2, #1
 800086e:	9200      	str	r2, [sp, #0]
 8000870:	2231      	movs	r2, #49	; 0x31
 8000872:	2108      	movs	r1, #8
 8000874:	4876      	ldr	r0, [pc, #472]	; (8000a50 <main+0x314>)
 8000876:	f7ff fd57 	bl	8000328 <I3C_WRITE_REGS>

  // Map Acc_drdy interrupt to I3C_IBI
  uint8_t acc_drdy = 0x03;
 800087a:	2303      	movs	r3, #3
 800087c:	713b      	strb	r3, [r7, #4]
  I3C_WRITE_REGS(&hi3c1, TARGET1_DYN_ADDR,0x36, &acc_drdy, 1);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2201      	movs	r2, #1
 8000882:	9200      	str	r2, [sp, #0]
 8000884:	2236      	movs	r2, #54	; 0x36
 8000886:	2108      	movs	r1, #8
 8000888:	4871      	ldr	r0, [pc, #452]	; (8000a50 <main+0x314>)
 800088a:	f7ff fd4d 	bl	8000328 <I3C_WRITE_REGS>

  /*##- Store Devices capabilities #######################################*/
  /* Fill Device descriptor for all target detected during ENTDAA procedure */
  for (ubTargetIndex = 0; ubTargetIndex < uwTargetCount;
 800088e:	4b71      	ldr	r3, [pc, #452]	; (8000a54 <main+0x318>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e09b      	b.n	80009ce <main+0x292>
  		ubTargetIndex++) {
  	DeviceConf[ubTargetIndex].DeviceIndex = (ubTargetIndex + 1);
 8000896:	4b6f      	ldr	r3, [pc, #444]	; (8000a54 <main+0x318>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4a6d      	ldr	r2, [pc, #436]	; (8000a54 <main+0x318>)
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	b2d8      	uxtb	r0, r3
 80008a4:	496c      	ldr	r1, [pc, #432]	; (8000a58 <main+0x31c>)
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	440b      	add	r3, r1
 80008b0:	4602      	mov	r2, r0
 80008b2:	701a      	strb	r2, [r3, #0]
  	DeviceConf[ubTargetIndex].TargetDynamicAddr =
  			aTargetDesc[ubTargetIndex]->DYNAMIC_ADDR;
 80008b4:	4b67      	ldr	r3, [pc, #412]	; (8000a54 <main+0x318>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a68      	ldr	r2, [pc, #416]	; (8000a5c <main+0x320>)
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  	DeviceConf[ubTargetIndex].TargetDynamicAddr =
 80008be:	4a65      	ldr	r2, [pc, #404]	; (8000a54 <main+0x318>)
 80008c0:	6812      	ldr	r2, [r2, #0]
  			aTargetDesc[ubTargetIndex]->DYNAMIC_ADDR;
 80008c2:	7c58      	ldrb	r0, [r3, #17]
  	DeviceConf[ubTargetIndex].TargetDynamicAddr =
 80008c4:	4964      	ldr	r1, [pc, #400]	; (8000a58 <main+0x31c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	440b      	add	r3, r1
 80008d0:	3301      	adds	r3, #1
 80008d2:	4602      	mov	r2, r0
 80008d4:	701a      	strb	r2, [r3, #0]
  	DeviceConf[ubTargetIndex].IBIAck =
  			__HAL_I3C_GET_IBI_CAPABLE(
 80008d6:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <main+0x318>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a60      	ldr	r2, [pc, #384]	; (8000a5c <main+0x320>)
 80008dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	0c0a      	lsrs	r2, r1, #16
 80008ee:	2300      	movs	r3, #0
 80008f0:	4613      	mov	r3, r2
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
  	DeviceConf[ubTargetIndex].IBIAck =
 80008f6:	4a57      	ldr	r2, [pc, #348]	; (8000a54 <main+0x318>)
 80008f8:	6812      	ldr	r2, [r2, #0]
  			__HAL_I3C_GET_IBI_CAPABLE(
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2d8      	uxtb	r0, r3
  	DeviceConf[ubTargetIndex].IBIAck =
 8000900:	4955      	ldr	r1, [pc, #340]	; (8000a58 <main+0x31c>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	440b      	add	r3, r1
 800090c:	3302      	adds	r3, #2
 800090e:	4602      	mov	r2, r0
 8000910:	701a      	strb	r2, [r3, #0]
  					__HAL_I3C_GET_BCR(aTargetDesc[ubTargetIndex]->TARGET_BCR_DCR_PID));
  	DeviceConf[ubTargetIndex].IBIPayload =
  			__HAL_I3C_GET_IBI_PAYLOAD(
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <main+0x318>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <main+0x320>)
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	0c0a      	lsrs	r2, r1, #16
 800092a:	2300      	movs	r3, #0
 800092c:	4613      	mov	r3, r2
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	b2db      	uxtb	r3, r3
  	DeviceConf[ubTargetIndex].IBIPayload =
 8000932:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <main+0x318>)
 8000934:	6812      	ldr	r2, [r2, #0]
  			__HAL_I3C_GET_IBI_PAYLOAD(
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	b2d8      	uxtb	r0, r3
  	DeviceConf[ubTargetIndex].IBIPayload =
 800093c:	4946      	ldr	r1, [pc, #280]	; (8000a58 <main+0x31c>)
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	440b      	add	r3, r1
 8000948:	3303      	adds	r3, #3
 800094a:	4602      	mov	r2, r0
 800094c:	701a      	strb	r2, [r3, #0]
  					__HAL_I3C_GET_BCR(aTargetDesc[ubTargetIndex]->TARGET_BCR_DCR_PID));
  	DeviceConf[ubTargetIndex].CtrlRoleReqAck =
  			__HAL_I3C_GET_CR_CAPABLE(
 800094e:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <main+0x318>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a42      	ldr	r2, [pc, #264]	; (8000a5c <main+0x320>)
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	0c0a      	lsrs	r2, r1, #16
 8000966:	2300      	movs	r3, #0
 8000968:	4613      	mov	r3, r2
 800096a:	099b      	lsrs	r3, r3, #6
 800096c:	b2db      	uxtb	r3, r3
  	DeviceConf[ubTargetIndex].CtrlRoleReqAck =
 800096e:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <main+0x318>)
 8000970:	6812      	ldr	r2, [r2, #0]
  			__HAL_I3C_GET_CR_CAPABLE(
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2d8      	uxtb	r0, r3
  	DeviceConf[ubTargetIndex].CtrlRoleReqAck =
 8000978:	4937      	ldr	r1, [pc, #220]	; (8000a58 <main+0x31c>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	440b      	add	r3, r1
 8000984:	3304      	adds	r3, #4
 8000986:	4602      	mov	r2, r0
 8000988:	701a      	strb	r2, [r3, #0]
  					__HAL_I3C_GET_BCR(aTargetDesc[ubTargetIndex]->TARGET_BCR_DCR_PID));
  	DeviceConf[ubTargetIndex].CtrlStopTransfer = DISABLE;
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x318>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4932      	ldr	r1, [pc, #200]	; (8000a58 <main+0x31c>)
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	440b      	add	r3, r1
 800099a:	3305      	adds	r3, #5
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]

  	if (HAL_I3C_Ctrl_ConfigBusDevices(&hi3c1,
  			&DeviceConf[ubTargetIndex], 1U) != HAL_OK) {
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <main+0x318>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <main+0x31c>)
 80009ae:	4413      	add	r3, r2
  	if (HAL_I3C_Ctrl_ConfigBusDevices(&hi3c1,
 80009b0:	2201      	movs	r2, #1
 80009b2:	4619      	mov	r1, r3
 80009b4:	4826      	ldr	r0, [pc, #152]	; (8000a50 <main+0x314>)
 80009b6:	f001 fe2a 	bl	800260e <HAL_I3C_Ctrl_ConfigBusDevices>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <main+0x288>
  		Error_Handler();
 80009c0:	f000 f9a8 	bl	8000d14 <Error_Handler>
  		ubTargetIndex++) {
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <main+0x318>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <main+0x318>)
 80009cc:	6013      	str	r3, [r2, #0]
  for (ubTargetIndex = 0; ubTargetIndex < uwTargetCount;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <main+0x318>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <main+0x324>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	f4ff af5d 	bcc.w	8000896 <main+0x15a>
  }

  /*##- Start the listen mode process ####################################*/
  /* Activate notifications for specially for this example
   - In Band Interrupt requested by a Target. */
  if (HAL_I3C_ActivateNotification(&hi3c1, NULL, HAL_I3C_IT_IBIIE)
 80009dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e0:	2100      	movs	r1, #0
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <main+0x314>)
 80009e4:	f001 fc00 	bl	80021e8 <HAL_I3C_ActivateNotification>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <main+0x2b6>
  		!= HAL_OK) {
  	/* Error_Handler() function is called when error occurs. */
  	Error_Handler();
 80009ee:	f000 f991 	bl	8000d14 <Error_Handler>
  }

  // Enable accelerometer to start receiving the IBIs.
  uint8_t acc_en = 0x0F;
 80009f2:	230f      	movs	r3, #15
 80009f4:	70fb      	strb	r3, [r7, #3]
  I3C_WRITE_REGS(&hi3c1, TARGET1_DYN_ADDR,0x30, &acc_en, 1);
 80009f6:	1cfb      	adds	r3, r7, #3
 80009f8:	2201      	movs	r2, #1
 80009fa:	9200      	str	r2, [sp, #0]
 80009fc:	2230      	movs	r2, #48	; 0x30
 80009fe:	2108      	movs	r1, #8
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <main+0x314>)
 8000a02:	f7ff fc91 	bl	8000328 <I3C_WRITE_REGS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	// -------------IBI listening loop start------------------------------------------------------------------------------
    /*##- Start the listen mode process for IBI ##################################*/
	while (uwIBIRequested == 0U) {
 8000a06:	bf00      	nop
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <main+0x328>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0fb      	beq.n	8000a08 <main+0x2cc>
	}

	/* Getting the information from the last IBI request */
	if (HAL_I3C_GetCCCInfo(&hi3c1, EVENT_ID_IBI, &CCCInfo) != HAL_OK) {
 8000a10:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <main+0x32c>)
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <main+0x314>)
 8000a18:	f002 f97c 	bl	8002d14 <HAL_I3C_GetCCCInfo>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <main+0x2ec>
		/* Error_Handler() function is called when error occurs. */
		Error_Handler();
 8000a22:	f000 f977 	bl	8000d14 <Error_Handler>
 8000a26:	e00f      	b.n	8000a48 <main+0x30c>
	} else {
		/* Turn LED2 on: Inform of IBI completion treatment */
		BSP_LED_Toggle(LED2);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 faa9 	bl	8000f80 <BSP_LED_Toggle>
		HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f000 fc52 	bl	80012d8 <HAL_Delay>
		uint8_t acc_disen = 0x00;
 8000a34:	2300      	movs	r3, #0
 8000a36:	70bb      	strb	r3, [r7, #2]
		I3C_WRITE_REGS(&hi3c1, TARGET1_DYN_ADDR,0x30, &acc_disen, 1);
 8000a38:	1cbb      	adds	r3, r7, #2
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2108      	movs	r1, #8
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <main+0x314>)
 8000a44:	f7ff fc70 	bl	8000328 <I3C_WRITE_REGS>
	}

	/* Reset Global variable */
	uwIBIRequested = 0U;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <main+0x328>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
	while (uwIBIRequested == 0U) {
 8000a4e:	e7da      	b.n	8000a06 <main+0x2ca>
 8000a50:	20000300 	.word	0x20000300
 8000a54:	20000358 	.word	0x20000358
 8000a58:	20000070 	.word	0x20000070
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	20000088 	.word	0x20000088
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	200002d0 	.word	0x200002d0

08000a6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2250      	movs	r2, #80	; 0x50
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fa6c 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a98:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a9c:	6113      	str	r3, [r2, #16]
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <SystemClock_Config+0xcc>)
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000aaa:	bf00      	nop
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <SystemClock_Config+0xcc>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d1f9      	bne.n	8000aac <SystemClock_Config+0x40>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000ace:	233e      	movs	r3, #62	; 0x3e
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fc3d 	bl	8004370 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x94>
    Error_Handler();
 8000afc:	f000 f90a 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 8000b00:	231f      	movs	r3, #31
 8000b02:	60bb      	str	r3, [r7, #8]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 f85e 	bl	8004be0 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xc2>
    Error_Handler();
 8000b2a:	f000 f8f3 	bl	8000d14 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3770      	adds	r7, #112	; 0x70
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	44020800 	.word	0x44020800

08000b3c <MX_I3C1_Init>:
/**
 * @brief I3C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I3C1_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I3C1_Init 0 */

  /* USER CODE END I3C1_Init 0 */

  I3C_FifoConfTypeDef sFifoConfig = {0};
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  I3C_CtrlConfTypeDef sCtrlConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN I3C1_Init 1 */

  /* USER CODE END I3C1_Init 1 */
  hi3c1.Instance = I3C1;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <MX_I3C1_Init+0xd0>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi3c1.Mode = HAL_I3C_MODE_CONTROLLER;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	761a      	strb	r2, [r3, #24]
  hi3c1.Init.CtrlBusCharacteristic.SDAHoldTime = HAL_I3C_SDA_HOLD_TIME_1_5;
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b6a:	605a      	str	r2, [r3, #4]
  hi3c1.Init.CtrlBusCharacteristic.WaitTime = HAL_I3C_OWN_ACTIVITY_STATE_0;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi3c1.Init.CtrlBusCharacteristic.SCLPPLowDuration = 0x09;
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b74:	2209      	movs	r2, #9
 8000b76:	731a      	strb	r2, [r3, #12]
  hi3c1.Init.CtrlBusCharacteristic.SCLI3CHighDuration = 0x09;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b7a:	2209      	movs	r2, #9
 8000b7c:	735a      	strb	r2, [r3, #13]
  hi3c1.Init.CtrlBusCharacteristic.SCLODLowDuration = 0x55;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b80:	2255      	movs	r2, #85	; 0x55
 8000b82:	739a      	strb	r2, [r3, #14]
  hi3c1.Init.CtrlBusCharacteristic.SCLI2CHighDuration = 0x55;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b86:	2255      	movs	r2, #85	; 0x55
 8000b88:	73da      	strb	r2, [r3, #15]
  hi3c1.Init.CtrlBusCharacteristic.BusFreeDuration = 0x32;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b8c:	2232      	movs	r2, #50	; 0x32
 8000b8e:	741a      	strb	r2, [r3, #16]
  hi3c1.Init.CtrlBusCharacteristic.BusIdleDuration = 0xf8;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b92:	22f8      	movs	r2, #248	; 0xf8
 8000b94:	745a      	strb	r2, [r3, #17]
  if (HAL_I3C_Init(&hi3c1) != HAL_OK) {
 8000b96:	481c      	ldr	r0, [pc, #112]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000b98:	f001 fab0 	bl	80020fc <HAL_I3C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I3C1_Init+0x6a>
    Error_Handler();
 8000ba2:	f000 f8b7 	bl	8000d14 <Error_Handler>
  }

  /** Configure FIFO
   */
  sFifoConfig.RxFifoThreshold = HAL_I3C_RXFIFO_THRESHOLD_1_4;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sFifoConfig.TxFifoThreshold = HAL_I3C_TXFIFO_THRESHOLD_1_4;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sFifoConfig.ControlFifo = HAL_I3C_CONTROLFIFO_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sFifoConfig.StatusFifo = HAL_I3C_STATUSFIFO_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  if (HAL_I3C_SetConfigFifo(&hi3c1, &sFifoConfig) != HAL_OK) {
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000bbe:	f001 fc68 	bl	8002492 <HAL_I3C_SetConfigFifo>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I3C1_Init+0x90>
    Error_Handler();
 8000bc8:	f000 f8a4 	bl	8000d14 <Error_Handler>
  }

  /** Configure controller
   */
  sCtrlConfig.DynamicAddr = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	703b      	strb	r3, [r7, #0]
  sCtrlConfig.StallTime = 0x00;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	707b      	strb	r3, [r7, #1]
  sCtrlConfig.HotJoinAllowed = DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	70bb      	strb	r3, [r7, #2]
  sCtrlConfig.ACKStallState = DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	70fb      	strb	r3, [r7, #3]
  sCtrlConfig.CCCStallState = DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	713b      	strb	r3, [r7, #4]
  sCtrlConfig.TxStallState = DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	717b      	strb	r3, [r7, #5]
  sCtrlConfig.RxStallState = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71bb      	strb	r3, [r7, #6]
  sCtrlConfig.HighKeeperSDA = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]


  if (HAL_I3C_Ctrl_Config(&hi3c1, &sCtrlConfig) != HAL_OK) {
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I3C1_Init+0xcc>)
 8000bf2:	f001 fc9e 	bl	8002532 <HAL_I3C_Ctrl_Config>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I3C1_Init+0xc4>
    Error_Handler();
 8000bfc:	f000 f88a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I3C1_Init 2 */

  /* USER CODE END I3C1_Init 2 */
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000300 	.word	0x20000300
 8000c0c:	40005c00 	.word	0x40005c00

08000c10 <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
   */
  if (HAL_ICACHE_Enable() != HAL_OK) {
 8000c14:	f003 fb9c 	bl	8004350 <HAL_ICACHE_Enable>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ICACHE_Init+0x12>
    Error_Handler();
 8000c1e:	f000 f879 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <MX_MEMORYMAP_Init>:
/**
 * @brief MEMORYMAP Initialization Function
 * @param None
 * @retval None
 */
static void MX_MEMORYMAP_Init(void) {
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_GPIO_Init+0x50>)
 8000c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	44020c00 	.word	0x44020c00

08000c88 <HAL_I3C_TgtReqDynamicAddrCallback>:
 * @par Called functions
 * - HAL_I3C_TgtReqDynamicAddrCallback()
 * - HAL_I3C_Ctrl_SetDynamicAddress()
 * @retval None
 */
void HAL_I3C_TgtReqDynamicAddrCallback(I3C_HandleTypeDef *hi3c, uint64_t targetPayload) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Update Payload on aTargetDesc */
  aTargetDesc[uwTargetCount]->TARGET_BCR_DCR_PID = targetPayload;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_I3C_TgtReqDynamicAddrCallback+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_I3C_TgtReqDynamicAddrCallback+0x44>)
 8000c9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca2:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send associated dynamic address */
  HAL_I3C_Ctrl_SetDynAddr(hi3c, aTargetDesc[uwTargetCount++]->DYNAMIC_ADDR);
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_I3C_TgtReqDynamicAddrCallback+0x40>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <HAL_I3C_TgtReqDynamicAddrCallback+0x40>)
 8000cae:	600a      	str	r2, [r1, #0]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_I3C_TgtReqDynamicAddrCallback+0x44>)
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	7c5b      	ldrb	r3, [r3, #17]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f001 fff8 	bl	8002cb0 <HAL_I3C_Ctrl_SetDynAddr>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000088 	.word	0x20000088
 8000ccc:	20000030 	.word	0x20000030

08000cd0 <HAL_I3C_CtrlDAACpltCallback>:
 * @brief  Controller dynamic address assignment Complete callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
void HAL_I3C_CtrlDAACpltCallback(I3C_HandleTypeDef *hi3c) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Turn LED2 on: Transfer in Transmission process is correct */
  BSP_LED_On(LED2);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f933 	bl	8000f44 <BSP_LED_On>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_I3C_NotifyCallback>:
 *        variable used to indicate that the event is well finished.
 * @par Called functions
 * - HAL_I3C_NotifyCallback()
 * @retval None
 */
void HAL_I3C_NotifyCallback(I3C_HandleTypeDef *hi3c, uint32_t eventId) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  if ((eventId & EVENT_ID_IBI) == EVENT_ID_IBI) {
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_I3C_NotifyCallback+0x1c>
    uwIBIRequested = 1;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_I3C_NotifyCallback+0x28>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
  } else {
    /* Error_Handler() function is called when error occurs. */
    Error_Handler();
  }
}
 8000d02:	e001      	b.n	8000d08 <HAL_I3C_NotifyCallback+0x20>
    Error_Handler();
 8000d04:	f000 f806 	bl	8000d14 <Error_Handler>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED2 is slowly blinking (1 sec. period) */
  while (1) {
    BSP_LED_Toggle(LED2);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f931 	bl	8000f80 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f000 fada 	bl	80012d8 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 8000d24:	e7f8      	b.n	8000d18 <Error_Handler+0x4>

08000d26 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_I3C_MspInit>:
 * @brief I3C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi3c: I3C handle pointer
 * @retval None
 */
void HAL_I3C_MspInit(I3C_HandleTypeDef *hi3c) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ac      	sub	sp, #176	; 0xb0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2288      	movs	r2, #136	; 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f8ff 	bl	8005f58 <memset>
	if (hi3c->Instance == I3C1) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <HAL_I3C_MspInit+0x100>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d163      	bne.n	8000e2c <HAL_I3C_MspInit+0xf8>

		/* USER CODE END I3C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I3C1;
 8000d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.I3c1ClockSelection = RCC_I3C1CLKSOURCE_PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 fa31 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I3C_MspInit+0x54>
			Error_Handler();
 8000d84:	f7ff ffc6 	bl	8000d14 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_I3C1_CLK_ENABLE();
 8000d88:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I3C_MspInit+0x104>)
 8000db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
		/**I3C1 GPIO Configuration
		 PB6     ------> I3C1_SCL
		 PB7     ------> I3C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Alternate = GPIO_AF3_I3C1;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <HAL_I3C_MspInit+0x108>)
 8000dea:	f000 fc1f 	bl	800162c <HAL_GPIO_Init>

		/* I3C1 interrupt Init */
		HAL_NVIC_SetPriority(I3C1_EV_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	207b      	movs	r0, #123	; 0x7b
 8000df4:	f000 fb6f 	bl	80014d6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I3C1_EV_IRQn);
 8000df8:	207b      	movs	r0, #123	; 0x7b
 8000dfa:	f000 fb86 	bl	800150a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I3C1_ER_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	207c      	movs	r0, #124	; 0x7c
 8000e04:	f000 fb67 	bl	80014d6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I3C1_ER_IRQn);
 8000e08:	207c      	movs	r0, #124	; 0x7c
 8000e0a:	f000 fb7e 	bl	800150a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I3C1_MspInit 1 */

		/* Add a delay to let startup of High level on the Bus */
		HAL_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 fa62 	bl	80012d8 <HAL_Delay>

		/* Then set the pull at default value for I3C communication, mean no pull */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000e14:	23c0      	movs	r3, #192	; 0xc0
 8000e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_I3C_MspInit+0x108>)
 8000e28:	f000 fc00 	bl	800162c <HAL_GPIO_Init>
		/* USER CODE END I3C1_MspInit 1 */
	}

}
 8000e2c:	bf00      	nop
 8000e2e:	37b0      	adds	r7, #176	; 0xb0
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40005c00 	.word	0x40005c00
 8000e38:	44020c00 	.word	0x44020c00
 8000e3c:	42020400 	.word	0x42020400

08000e40 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000e8c:	f000 fa04 	bl	8001298 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <I3C1_EV_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles I3C1 event interrupt.
 */
void I3C1_EV_IRQHandler(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I3C1_EV_IRQn 0 */

	/* USER CODE END I3C1_EV_IRQn 0 */
	HAL_I3C_EV_IRQHandler(&hi3c1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <I3C1_EV_IRQHandler+0x10>)
 8000e9a:	f001 fa80 	bl	800239e <HAL_I3C_EV_IRQHandler>
	/* USER CODE BEGIN I3C1_EV_IRQn 1 */

	/* USER CODE END I3C1_EV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000300 	.word	0x20000300

08000ea8 <I3C1_ER_IRQHandler>:

/**
 * @brief This function handles I3C1 error interrupt.
 */
void I3C1_ER_IRQHandler(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I3C1_ER_IRQn 0 */

	/* USER CODE END I3C1_ER_IRQn 0 */
	HAL_I3C_ER_IRQHandler(&hi3c1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <I3C1_ER_IRQHandler+0x10>)
 8000eae:	f001 fa4b 	bl	8002348 <HAL_I3C_ER_IRQHandler>
	/* USER CODE BEGIN I3C1_ER_IRQn 1 */

	/* USER CODE END I3C1_ER_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000300 	.word	0x20000300

08000ebc <BSP_LED_Init>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3
 * @retval BSP status
 */
int32_t BSP_LED_Init(Led_TypeDef Led) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	int32_t ret = BSP_ERROR_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitTypeDef gpio_init_structure;

	if ((Led != LED2)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
	) {
		ret = BSP_ERROR_WRONG_PARAM;
 8000ed0:	f06f 0301 	mvn.w	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	e02c      	b.n	8000f32 <BSP_LED_Init+0x76>
	} else {
		/* Enable the GPIO LED Clock */
		if (Led == LED2) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10e      	bne.n	8000efc <BSP_LED_Init+0x40>
			LED2_GPIO_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <BSP_LED_Init+0x80>)
 8000ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ee4:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <BSP_LED_Init+0x80>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <BSP_LED_Init+0x80>)
 8000ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

		/* Configure the GPIO_LED pin */
		gpio_init_structure.Pin = LED_PIN[Led];
 8000efc:	2320      	movs	r3, #32
 8000efe:	613b      	str	r3, [r7, #16]
		gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
		gpio_init_structure.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
		gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	61fb      	str	r3, [r7, #28]

		HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <BSP_LED_Init+0x84>)
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fb86 	bl	800162c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <BSP_LED_Init+0x84>)
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	2120      	movs	r1, #32
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fce7 	bl	8001900 <HAL_GPIO_WritePin>
	}

	return ret;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	44020c00 	.word	0x44020c00
 8000f40:	20000038 	.word	0x20000038

08000f44 <BSP_LED_On>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3
 * @retval BSP status
 */
int32_t BSP_LED_On(Led_TypeDef Led) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	int32_t ret = BSP_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]

	if ((Led != LED2)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
	) {
		ret = BSP_ERROR_WRONG_PARAM;
 8000f58:	f06f 0301 	mvn.w	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e008      	b.n	8000f72 <BSP_LED_On+0x2e>
	} else {
		HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <BSP_LED_On+0x38>)
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	2120      	movs	r1, #32
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fcc7 	bl	8001900 <HAL_GPIO_WritePin>
	}

	return ret;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000038 	.word	0x20000038

08000f80 <BSP_LED_Toggle>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3
 * @retval BSP status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	int32_t ret = BSP_ERROR_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]

	if ((Led != LED2)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
	) {
		ret = BSP_ERROR_WRONG_PARAM;
 8000f94:	f06f 0301 	mvn.w	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e008      	b.n	8000fae <BSP_LED_Toggle+0x2e>
	} else {
		HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <BSP_LED_Toggle+0x38>)
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fcc1 	bl	8001930 <HAL_GPIO_TogglePin>
	}

	return ret;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000038 	.word	0x20000038

08000fbc <BSP_PB_Init>:
 *          This parameter can be one of the following values:
 *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
 *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
 *                                    with interrupt generation capability
 */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
			{ BSP_BUTTON_USER_IT_PRIORITY };
	static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] =
			{ BUTTON_USER_EXTI_LINE };

	/* Enable the BUTTON clock */
	BUTTON_USER_GPIO_CLK_ENABLE();
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <BSP_PB_Init+0xd4>)
 8000fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <BSP_PB_Init+0xd4>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <BSP_PB_Init+0xd4>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

	gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]

	if (ButtonMode == BUTTON_MODE_GPIO) {
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <BSP_PB_Init+0x5c>
		/* Configure Button pin as input */
		gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a23      	ldr	r2, [pc, #140]	; (8001094 <BSP_PB_Init+0xd8>)
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fb0b 	bl	800162c <HAL_GPIO_Init>
 8001016:	e036      	b.n	8001086 <BSP_PB_Init+0xca>
	} else /* (ButtonMode == BUTTON_MODE_EXTI) */
	{
		/* Configure Button pin as input with External interrupt */
		gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <BSP_PB_Init+0xdc>)
 800101a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <BSP_PB_Init+0xd8>)
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fafe 	bl	800162c <HAL_GPIO_Init>

		(void) HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <BSP_PB_Init+0xe0>)
 800103c:	441a      	add	r2, r3
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4917      	ldr	r1, [pc, #92]	; (80010a0 <BSP_PB_Init+0xe4>)
 8001042:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f000 fadb 	bl	8001604 <HAL_EXTI_GetHandle>
		(void) HAL_EXTI_RegisterCallback(&hpb_exti[Button],
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4a10      	ldr	r2, [pc, #64]	; (800109c <BSP_PB_Init+0xe0>)
 800105a:	1898      	adds	r0, r3, r2
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <BSP_PB_Init+0xe8>)
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	461a      	mov	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f000 faa0 	bl	80015ac <HAL_EXTI_RegisterCallback>
				HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button],
 800106c:	2018      	movs	r0, #24
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <BSP_PB_Init+0xec>)
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	f000 fa2c 	bl	80014d6 <HAL_NVIC_SetPriority>
				0x00);
		HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800107e:	2318      	movs	r3, #24
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fa42 	bl	800150a <HAL_NVIC_EnableIRQ>
	}

	return BSP_ERROR_NONE;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	44020c00 	.word	0x44020c00
 8001094:	2000003c 	.word	0x2000003c
 8001098:	10110000 	.word	0x10110000
 800109c:	200003dc 	.word	0x200003dc
 80010a0:	08005fe0 	.word	0x08005fe0
 80010a4:	20000040 	.word	0x20000040
 80010a8:	20000044 	.word	0x20000044

080010ac <BSP_PB_GetState>:
 * @param  Button Button to be checked
 *          This parameter can be one of the following values:
 *            @arg  BUTTON_USER: Wakeup Push Button
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	return (int32_t) HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <BSP_PB_GetState+0x28>)
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fc03 	bl	80018d0 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000003c 	.word	0x2000003c

080010d8 <BSP_PB_Callback>:
/**
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
__weak void BSP_PB_Callback(Button_TypeDef Button) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Button);

	/* This function should be implemented by the user application.
	 It is called into this driver when an event on Button is triggered. */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <BUTTON_USER_EXTI_Callback>:
 */
/**
 * @brief  Key EXTI line detection callbacks.
 * @retval BSP status
 */
static void BUTTON_USER_EXTI_Callback(void) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
	BSP_PB_Callback(BUTTON_USER);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fff0 	bl	80010d8 <BSP_PB_Callback>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
	uint32_t reg_opsr;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <SystemInit+0xc8>)
 8001104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001108:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <SystemInit+0xc8>)
 800110a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR = RCC_CR_HSION;
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <SystemInit+0xcc>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <SystemInit+0xcc>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <SystemInit+0xcc>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
	/* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON |
			RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemInit+0xcc>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4927      	ldr	r1, [pc, #156]	; (80011c8 <SystemInit+0xcc>)
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <SystemInit+0xd0>)
 800112c:	4013      	ands	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
			RCC_CR_CSION | RCC_CR_CSIKERON | RCC_CR_HSI48ON | RCC_CR_PLL1ON
			| RCC_CR_PLL2ON);
#endif

	/* Reset PLLxCFGR register */
	RCC->PLL1CFGR = 0U;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemInit+0xcc>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->PLL2CFGR = 0U;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <SystemInit+0xcc>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
	RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280U;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SystemInit+0xcc>)
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <SystemInit+0xd4>)
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000U;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <SystemInit+0xcc>)
 8001144:	2200      	movs	r2, #0
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280U;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemInit+0xcc>)
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemInit+0xd4>)
 800114c:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL2FRACR register */
	RCC->PLL2FRACR = 0x00000000U;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <SystemInit+0xcc>)
 8001150:	2200      	movs	r2, #0
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <SystemInit+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <SystemInit+0xcc>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <SystemInit+0xcc>)
 8001162:	2200      	movs	r2, #0
 8001164:	651a      	str	r2, [r3, #80]	; 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <SystemInit+0xc8>)
 8001168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

	/* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
	reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <SystemInit+0xd8>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001176:	607b      	str	r3, [r7, #4]
	if ((reg_opsr == FLASH_OPSR_CODE_OP)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800117e:	d003      	beq.n	8001188 <SystemInit+0x8c>
			|| (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1))) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001186:	d117      	bne.n	80011b8 <SystemInit+0xbc>
		/* Check FLASH Option Control Register access */
		if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U) {
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <SystemInit+0xd8>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <SystemInit+0xa4>
			/* Authorizes the Option Byte registers programming */
			FLASH->OPTKEYR = 0x08192A3BU;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <SystemInit+0xd8>)
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <SystemInit+0xdc>)
 8001198:	60da      	str	r2, [r3, #12]
			FLASH->OPTKEYR = 0x4C5D6E7FU;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <SystemInit+0xd8>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <SystemInit+0xe0>)
 800119e:	60da      	str	r2, [r3, #12]
		}
		/* Launch the option bytes change operation */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <SystemInit+0xd8>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <SystemInit+0xd8>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	61d3      	str	r3, [r2, #28]

		/* Lock the FLASH Option Control Register access */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <SystemInit+0xd8>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <SystemInit+0xd8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	61d3      	str	r3, [r2, #28]
	}
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	44020c00 	.word	0x44020c00
 80011cc:	fae2eae3 	.word	0xfae2eae3
 80011d0:	01010280 	.word	0x01010280
 80011d4:	40022000 	.word	0x40022000
 80011d8:	08192a3b 	.word	0x08192a3b
 80011dc:	4c5d6e7f 	.word	0x4c5d6e7f

080011e0 <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f96b 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

	/* Update the SystemCoreClock global variable */
	SystemCoreClock =
			HAL_RCC_GetSysClockFreq()
 80011ea:	f003 feb1 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
					>> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
							>> RCC_CFGR2_HPRE_Pos];
 80011f4:	f003 030f 	and.w	r3, r3, #15
					>> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <HAL_Init+0x44>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock =
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_Init+0x48>)
 8001202:	6013      	str	r3, [r2, #0]

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8001204:	200f      	movs	r0, #15
 8001206:	f000 f811 	bl	800122c <HAL_InitTick>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_Init+0x34>
		return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e002      	b.n	800121a <HAL_Init+0x3a>
	}

	/* Init the low level hardware */
	HAL_MspInit();
 8001214:	f7ff fd87 	bl	8000d26 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	44020c00 	.word	0x44020c00
 8001224:	08005fe4 	.word	0x08005fe4
 8001228:	20000048 	.word	0x20000048

0800122c <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	/* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
	if ((uint32_t) uwTickFreq == 0UL) {
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_InitTick+0x14>
		return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e021      	b.n	8001284 <HAL_InitTick+0x58>
	}

	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t) uwTickFreq))
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_InitTick+0x64>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f965 	bl	8001526 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x3a>
			> 0U) {
		return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x58>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x56>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x68>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x58>
		return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000050 	.word	0x20000050
 8001290:	20000048 	.word	0x20000048
 8001294:	2000004c 	.word	0x2000004c

08001298 <HAL_IncTick>:
 *       in Systick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000050 	.word	0x20000050
 80012bc:	200003e8 	.word	0x200003e8

080012c0 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200003e8 	.word	0x200003e8

080012d8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
	}
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000050 	.word	0x20000050

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bit  for subpriority
 * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	81fb      	strh	r3, [r7, #14]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff40 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
 *          CMSIS device file (stm32h5xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	80fb      	strh	r3, [r7, #6]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff33 	bl	8001384 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa4 	bl	800147c <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort_IT>:
 * @brief  Abort any on-going DMA channel transfer in interrupt mode (Non-blocking mode).
 * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
 *                specified DMA Channel.
 * @retval HAL status.
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma) {
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	/* Check the DMA peripheral handle parameter */
	if (hdma == NULL) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Abort_IT+0x12>
		return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e019      	b.n	8001584 <HAL_DMA_Abort_IT+0x46>
	}

	/* Check DMA channel state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d004      	beq.n	8001566 <HAL_DMA_Abort_IT+0x28>
		/* Update the DMA channel error code */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	659a      	str	r2, [r3, #88]	; 0x58

		return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_DMA_Abort_IT+0x46>
	} else {
		/* Update the DMA channel state */
		hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2204      	movs	r2, #4
 800156a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

		/* Suspend the channel and activate suspend interrupt */
		hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6153      	str	r3, [r2, #20]
	}

	return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_DMA_GetState>:
 * @brief  Returns the DMA channel state.
 * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
 *                specified DMA Channel.
 * @retval DMA state.
 */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma) {
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	/* Return the DMA channel state */
	return hdma->State;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_EXTI_RegisterCallback>:
 *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
 * @param  pPendingCbfn function pointer to be stored as callback.
 * @retval HAL Status.
 */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti,
		EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void)) {
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	460b      	mov	r3, r1
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]

	switch (CallbackID) {
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d011      	beq.n	80015e8 <HAL_EXTI_RegisterCallback+0x3c>
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	dc13      	bgt.n	80015f0 <HAL_EXTI_RegisterCallback+0x44>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_EXTI_RegisterCallback+0x26>
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d007      	beq.n	80015e0 <HAL_EXTI_RegisterCallback+0x34>
 80015d0:	e00e      	b.n	80015f0 <HAL_EXTI_RegisterCallback+0x44>
	case HAL_EXTI_COMMON_CB_ID:
		hexti->RisingCallback = pPendingCbfn;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
		hexti->FallingCallback = pPendingCbfn;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
		break;
 80015de:	e00a      	b.n	80015f6 <HAL_EXTI_RegisterCallback+0x4a>

	case HAL_EXTI_RISING_CB_ID:
		hexti->RisingCallback = pPendingCbfn;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	605a      	str	r2, [r3, #4]
		break;
 80015e6:	e006      	b.n	80015f6 <HAL_EXTI_RegisterCallback+0x4a>

	case HAL_EXTI_FALLING_CB_ID:
		hexti->FallingCallback = pPendingCbfn;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	609a      	str	r2, [r3, #8]
		break;
 80015ee:	e002      	b.n	80015f6 <HAL_EXTI_RegisterCallback+0x4a>

	default:
		status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	75fb      	strb	r3, [r7, #23]
		break;
 80015f4:	bf00      	nop
	}

	return status;
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_EXTI_GetHandle>:
 * @param  ExtiLine Exti line number.
 *         This parameter can be from 0 to @ref EXTI_LINE_NB.
 * @retval HAL Status.
 */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti,
		uint32_t ExtiLine) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(ExtiLine));

	/* Check null pointer */
	if (hexti == NULL) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_EXTI_GetHandle+0x14>
		return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e003      	b.n	8001620 <HAL_EXTI_GetHandle+0x1c>
	} else {
		/* Store line number as handle private field */
		hexti->Line = ExtiLine;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	601a      	str	r2, [r3, #0]

		return HAL_OK;
 800161e:	2300      	movs	r3, #0
	}
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_Init>:
 *         (A..D or H) for stm32h503xx family line to select the GPIO peripheral for STM32H5 family
 * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, const GPIO_InitTypeDef *pGPIO_Init) {
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	uint32_t iocurrent;
	uint32_t position = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

	/* Configure the port pins */
	while (((pGPIO_Init->Pin) >> position) != 0U) {
 800163a:	e136      	b.n	80018aa <HAL_GPIO_Init+0x27e>
		/* Get current io position */
		iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0U) {
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8128 	beq.w	80018a4 <HAL_GPIO_Init+0x278>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x38>
					|| (pGPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d125      	bne.n	80016b0 <HAL_GPIO_Init+0x84>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				tmp = GPIOx->AFR[position >> 3U];
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	617b      	str	r3, [r7, #20]
				tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
				tmp |= ((pGPIO_Init->Alternate & 0x0FUL)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 020f 	and.w	r2, r3, #15
						<< ((position & 0x07U) * 4U));
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
				tmp |= ((pGPIO_Init->Alternate & 0x0FUL)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
				GPIOx->AFR[position >> 3U] = tmp;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	6979      	ldr	r1, [r7, #20]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			tmp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	617b      	str	r3, [r7, #20]
			tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
			tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4313      	orrs	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
			GPIOx->MODER = tmp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]

			/* In case of Output or Alternate function mode selection */
			if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d00b      	beq.n	8001704 <HAL_GPIO_Init+0xd8>
					|| (pGPIO_Init->Mode == GPIO_MODE_AF_PP)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0xd8>
					|| (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b11      	cmp	r3, #17
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0xd8>
					|| (pGPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0x13a>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

				/* Configure the IO Speed */
				tmp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	617b      	str	r3, [r7, #20]
				tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
				tmp |= (pGPIO_Init->Speed << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
				GPIOx->OSPEEDR = tmp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				tmp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	617b      	str	r3, [r7, #20]
				tmp &= ~(GPIO_OTYPER_OT0 << position);
 800173a:	2201      	movs	r2, #1
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4013      	ands	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
				tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
				tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
				GPIOx->OTYPER = tmp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	605a      	str	r2, [r3, #4]
			}

			if (pGPIO_Init->Mode != GPIO_MODE_ANALOG) {
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0x172>
				/* Check the Pull parameters */
				assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				tmp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	617b      	str	r3, [r7, #20]
				tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4013      	ands	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
				tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
				GPIOx->PUPDR = tmp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	60da      	str	r2, [r3, #12]
			}

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d07c      	beq.n	80018a4 <HAL_GPIO_Init+0x278>
				tmp = EXTI->EXTICR[position >> 2U];
 80017aa:	4a47      	ldr	r2, [pc, #284]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3318      	adds	r3, #24
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	617b      	str	r3, [r7, #20]
				tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4013      	ands	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
				tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0a9a      	lsrs	r2, r3, #10
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	00d2      	lsls	r2, r2, #3
 80017de:	4093      	lsls	r3, r2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
				EXTI->EXTICR[position >> 2U] = tmp;
 80017e6:	4938      	ldr	r1, [pc, #224]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3318      	adds	r3, #24
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				tmp = EXTI->RTSR1;
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	617b      	str	r3, [r7, #20]
				tmp &= ~((uint32_t) iocurrent);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
				if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
					tmp |= iocurrent;
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
				}
				EXTI->RTSR1 = tmp;
 8001818:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6013      	str	r3, [r2, #0]

				tmp = EXTI->FTSR1;
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	617b      	str	r3, [r7, #20]
				tmp &= ~((uint32_t) iocurrent);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43db      	mvns	r3, r3
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4013      	ands	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
				if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x216>
					tmp |= iocurrent;
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
				}
				EXTI->FTSR1 = tmp;
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				tmp = EXTI->EMR1;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 800184a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800184e:	617b      	str	r3, [r7, #20]
				tmp &= ~((uint32_t) iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4013      	ands	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
				if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x242>
					tmp |= iocurrent;
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
				}
				EXTI->EMR1 = tmp;
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

				tmp = EXTI->IMR1;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 8001878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800187c:	617b      	str	r3, [r7, #20]
				tmp &= ~((uint32_t) iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
				if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x270>
					tmp |= iocurrent;
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
				}
				EXTI->IMR1 = tmp;
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			}
		}

		position++;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	3301      	adds	r3, #1
 80018a8:	613b      	str	r3, [r7, #16]
	while (((pGPIO_Init->Pin) >> position) != 0U) {
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f47f aec1 	bne.w	800163c <HAL_GPIO_Init+0x10>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	44022000 	.word	0x44022000
 80018cc:	002f7f7f 	.word	0x002f7f7f

080018d0 <HAL_GPIO_ReadPin>:
 *         (A..D or H) for stm32h503xx family line to select the GPIO peripheral for STM32H5 family
 * @param  GPIO_Pin: specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != 0U) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_TogglePin>:
 * @brief  Toggle the specified GPIO pin.
 * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
 * @param  GPIO_Pin: specifies the pin to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43d9      	mvns	r1, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	400b      	ands	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_I3C_Enable>:
  * @rmtoll CFGR      EN            LL_I3C_Enable
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_Enable(I3C_TypeDef *I3Cx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_EN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_I3C_Disable>:
  * @rmtoll CFGR      EN            LL_I3C_Disable
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_Disable(I3C_TypeDef *I3Cx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I3Cx->CFGR, I3C_CFGR_EN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 0201 	bic.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_I3C_SetMode>:
  *         @arg @ref LL_I3C_MODE_CONTROLLER
  *         @arg @ref LL_I3C_MODE_TARGET
  * @retval None
  */
__STATIC_INLINE void LL_I3C_SetMode(I3C_TypeDef *I3Cx, uint32_t PeripheralMode)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I3Cx->CFGR, I3C_CFGR_CRINIT, PeripheralMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0202 	bic.w	r2, r3, #2
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_I3C_EnableArbitrationHeader>:
  * @rmtoll CFGR      NOARBH        LL_I3C_EnableArbitrationHeader
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_EnableArbitrationHeader(I3C_TypeDef *I3Cx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I3Cx->CFGR, I3C_CFGR_NOARBH);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 0204 	bic.w	r2, r3, #4
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_I3C_DisableArbitrationHeader>:
  * @rmtoll CFGR      NOARBH        LL_I3C_DisableArbitrationHeader
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_DisableArbitrationHeader(I3C_TypeDef *I3Cx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_NOARBH);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_I3C_DisableDMAReq_RX>:
  * @rmtoll CFGR      RXDMAEN       LL_I3C_DisableDMAReq_RX
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_DisableDMAReq_RX(I3C_TypeDef *I3Cx)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I3Cx->CFGR, I3C_CFGR_RXDMAEN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_I3C_GetRxFIFOThreshold>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I3C_RXFIFO_THRESHOLD_1_4
  *         @arg @ref LL_I3C_RXFIFO_THRESHOLD_4_4
  */
__STATIC_INLINE uint32_t LL_I3C_GetRxFIFOThreshold(const I3C_TypeDef *I3Cx)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->CFGR, I3C_CFGR_RXTHRES));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_I3C_DisableDMAReq_TX>:
  * @rmtoll CFGR      TXDMAEN       LL_I3C_DisableDMAReq_TX
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_DisableDMAReq_TX(I3C_TypeDef *I3Cx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I3Cx->CFGR, I3C_CFGR_TXDMAEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_I3C_GetTxFIFOThreshold>:
  *         @arg @ref LL_I3C_TXFIFO_THRESHOLD_1_4
  *         @arg @ref LL_I3C_TXFIFO_THRESHOLD_4_4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_GetTxFIFOThreshold(const I3C_TypeDef *I3Cx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->CFGR, I3C_CFGR_TXTHRES));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_I3C_DisableDMAReq_Control>:
  * @rmtoll CFGR      CDMAEN        LL_I3C_DisableDMAReq_Control
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_DisableDMAReq_Control(I3C_TypeDef *I3Cx)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I3Cx->CFGR, I3C_CFGR_CDMAEN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_I3C_EnableOwnDynAddress>:
  * @rmtoll DEVR0        DAVAL         LL_I3C_EnableOwnDynAddress
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_EnableOwnDynAddress(I3C_TypeDef *I3Cx)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->DEVR0, I3C_DEVR0_DAVAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_I3C_IsEnabledOwnDynAddress>:
  * @rmtoll DEVR0        DAVAL         LL_I3C_IsEnabledOwnDynAddress
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsEnabledOwnDynAddress(const I3C_TypeDef *I3Cx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->DEVR0, I3C_DEVR0_DAVAL) == (I3C_DEVR0_DAVAL)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <LL_I3C_IsEnabledOwnDynAddress+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_I3C_IsEnabledOwnDynAddress+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_I3C_SetOwnDynamicAddress>:
  * @param  I3Cx I3C Instance.
  * @param  OwnDynamicAddress This parameter must be a value between Min_Data=0 and Max_Data=0x7F
  * @retval None
  */
__STATIC_INLINE void LL_I3C_SetOwnDynamicAddress(I3C_TypeDef *I3Cx, uint32_t OwnDynamicAddress)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I3Cx->DEVR0, I3C_DEVR0_DA, (OwnDynamicAddress << I3C_DEVR0_DA_Pos));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_I3C_GetOwnDynamicAddress>:
  * @rmtoll DEVR0        DA            LL_I3C_GetOwnDynamicAddress
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 and Max_Data=0x7F
  */
__STATIC_INLINE uint8_t LL_I3C_GetOwnDynamicAddress(const I3C_TypeDef *I3Cx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I3Cx->DEVR0, I3C_DEVR0_DA) >> I3C_DEVR0_DA_Pos);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b24:	b2db      	uxtb	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_I3C_IsEnabledIBI>:
  * @rmtoll DEVR0        IBIEN         LL_I3C_IsEnabledIBI
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsEnabledIBI(const I3C_TypeDef *I3Cx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->DEVR0, I3C_DEVR0_IBIEN) == (I3C_DEVR0_IBIEN)) ? 1UL : 0UL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d101      	bne.n	8001b4c <LL_I3C_IsEnabledIBI+0x1a>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_I3C_IsEnabledIBI+0x1c>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_I3C_IsEnabledControllerRoleReq>:
  * @rmtoll DEVR0        CREN          LL_I3C_IsEnabledControllerRoleReq
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsEnabledControllerRoleReq(const I3C_TypeDef *I3Cx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->DEVR0, I3C_DEVR0_CREN) == (I3C_DEVR0_CREN)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b6e:	d101      	bne.n	8001b74 <LL_I3C_IsEnabledControllerRoleReq+0x1a>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_I3C_IsEnabledControllerRoleReq+0x1c>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_I3C_IsEnabledHotJoin>:
  * @rmtoll DEVR0        HJEN          LL_I3C_IsEnabledHotJoin
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsEnabledHotJoin(const I3C_TypeDef *I3Cx)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->DEVR0, I3C_DEVR0_HJEN) == (I3C_DEVR0_HJEN)) ? 1UL : 0UL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b96:	d101      	bne.n	8001b9c <LL_I3C_IsEnabledHotJoin+0x1a>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_I3C_IsEnabledHotJoin+0x1c>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_I3C_GetMaxWriteLength>:
  * @rmtoll MAXWLR       MWL           LL_I3C_GetMaxWriteLength
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFFFFF
  */
__STATIC_INLINE uint32_t LL_I3C_GetMaxWriteLength(const I3C_TypeDef *I3Cx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->MAXWLR, I3C_MAXWLR_MWL));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb8:	b29b      	uxth	r3, r3
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_I3C_ConfigClockWaveForm>:
  * @param  I3Cx I3C Instance.
  * @param  ClockWaveForm This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ConfigClockWaveForm(I3C_TypeDef *I3Cx, uint32_t ClockWaveForm)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  WRITE_REG(I3Cx->TIMINGR0, ClockWaveForm);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_I3C_SetAvalTiming>:
  * @param  I3Cx I3C Instance.
  * @param  AvalTiming This parameter must be a value between Min_Data=0 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_SetAvalTiming(I3C_TypeDef *I3Cx, uint32_t AvalTiming)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I3Cx->TIMINGR1, I3C_TIMINGR1_AVAL, (AvalTiming << I3C_TIMINGR1_AVAL_Pos));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bf4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_I3C_SetCtrlBusCharacteristic>:
  * @param  I3Cx I3C Instance.
  * @param  CtrlBusCharacteristic This parameter must be a value between Min_Data=0 and Max_Data=0x107F03FF.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_SetCtrlBusCharacteristic(I3C_TypeDef *I3Cx, uint32_t CtrlBusCharacteristic)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(I3Cx->TIMINGR1, CtrlBusCharacteristic);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_I3C_RequestRxFIFOFlush>:
  * @rmtoll CFGR      RXFLUSH       LL_I3C_RequestRxFIFOFlush
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_RequestRxFIFOFlush(I3C_TypeDef *I3Cx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_RXFLUSH);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_I3C_RequestTxFIFOFlush>:
  * @rmtoll CFGR      TXFLUSH       LL_I3C_RequestTxFIFOFlush
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_RequestTxFIFOFlush(I3C_TypeDef *I3Cx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_TXFLUSH);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_I3C_RequestStatusFIFOFlush>:
  * @rmtoll CFGR      SFLUSH        LL_I3C_RequestStatusFIFOFlush
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_RequestStatusFIFOFlush(I3C_TypeDef *I3Cx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_SFLUSH);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_I3C_GetActivityState>:
  *         @arg @ref LL_I3C_BUS_ACTIVITY_STATE_1
  *         @arg @ref LL_I3C_BUS_ACTIVITY_STATE_2
  *         @arg @ref LL_I3C_BUS_ACTIVITY_STATE_3
  */
__STATIC_INLINE uint32_t LL_I3C_GetActivityState(const I3C_TypeDef *I3Cx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->DEVR0, I3C_DEVR0_AS));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_I3C_GetResetAction>:
  *         @arg @ref LL_I3C_RESET_ACTION_NONE
  *         @arg @ref LL_I3C_RESET_ACTION_PARTIAL
  *         @arg @ref LL_I3C_RESET_ACTION_FULL
  */
__STATIC_INLINE uint32_t LL_I3C_GetResetAction(const I3C_TypeDef *I3Cx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->DEVR0, I3C_DEVR0_RSTACT));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_I3C_RequestControlFIFOFlush>:
  * @rmtoll CFGR      CFLUSH        LL_I3C_RequestControlFIFOFlush
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_RequestControlFIFOFlush(I3C_TypeDef *I3Cx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_CFLUSH);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_I3C_RequestTransfer>:
  * @rmtoll CFGR      TSFSET        LL_I3C_RequestTransfer
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_RequestTransfer(I3C_TypeDef *I3Cx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(I3Cx->CFGR, I3C_CFGR_TSFSET);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_I3C_ControllerHandleCCC>:
  *         @arg @ref LL_I3C_GENERATE_RESTART
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ControllerHandleCCC(I3C_TypeDef *I3Cx, uint32_t CCCValue,
                                                uint32_t AddByteSize, uint32_t EndMode)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  WRITE_REG(I3Cx->CR, ((CCCValue << I3C_CR_CCC_Pos) | AddByteSize | EndMode | LL_I3C_CONTROLLER_MTYPE_CCC) \
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	f023 535c 	bic.w	r3, r3, #922746880	; 0x37000000
 8001d22:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	601a      	str	r2, [r3, #0]
            & (I3C_CR_CCC | I3C_CR_DCNT | I3C_CR_MTYPE | I3C_CR_MEND));
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_I3C_ReceiveData8>:
  * @rmtoll RDR          RDB0         LL_I3C_ReceiveData8
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 to Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I3C_ReceiveData8(const I3C_TypeDef *I3Cx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I3Cx->RDR, I3C_RDR_RDB0));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	b2db      	uxtb	r3, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_I3C_TransmitData8>:
  * @param  I3Cx I3C Instance.
  * @param  Data This parameter must be a value between Min_Data=0 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_TransmitData8(I3C_TypeDef *I3Cx, uint8_t Data)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I3Cx->TDR, Data);
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_I3C_ReceiveData32>:
  * @rmtoll RDWR         RDWR          LL_I3C_ReceiveData32
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 to Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_I3C_ReceiveData32(const I3C_TypeDef *I3Cx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(I3Cx->RDWR));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_I3C_TransmitData32>:
  * @param  I3Cx I3C Instance.
  * @param  Data This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_TransmitData32(I3C_TypeDef *I3Cx, uint32_t Data)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I3Cx->TDWR, Data);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	61da      	str	r2, [r3, #28]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_I3C_GetIBIPayload>:
  * @rmtoll IBIDR        IBIDR         LL_I3C_GetIBIPayload
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 to Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_I3C_GetIBIPayload(const I3C_TypeDef *I3Cx)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(I3Cx->IBIDR));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_I3C_GetNbIBIAddData>:
  * @rmtoll RMR         IBIRDCNT     LL_I3C_GetNbIBIAddData
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 to Max_Data=0x7
  */
__STATIC_INLINE uint32_t LL_I3C_GetNbIBIAddData(const I3C_TypeDef *I3Cx)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->RMR, I3C_RMR_IBIRDCNT));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_I3C_GetIBITargetAddr>:
  * @rmtoll RMR         RADD         LL_I3C_GetIBITargetAddr
  * @param  I3Cx I3C Instance.
  * @retval Value between Min_Data=0 to Max_Data=0x3F
  */
__STATIC_INLINE uint32_t LL_I3C_GetIBITargetAddr(const I3C_TypeDef *I3Cx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->RMR, I3C_RMR_RADD) >> I3C_RMR_RADD_Pos);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	0c5b      	lsrs	r3, r3, #17
 8001de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_I3C_GetMessageErrorCode>:
  *         @arg @ref LL_I3C_TARGET_ERROR_TE4
  *         @arg @ref LL_I3C_TARGET_ERROR_TE5
  *         @arg @ref LL_I3C_TARGET_ERROR_TE6
  */
__STATIC_INLINE uint32_t LL_I3C_GetMessageErrorCode(const I3C_TypeDef *I3Cx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I3Cx->SER, I3C_SER_CODERR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	f003 030f 	and.w	r3, r3, #15
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_I3C_IsActiveFlag_PERR>:
  * @rmtoll SER          PERR          LL_I3C_IsActiveFlag_PERR
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_PERR(const I3C_TypeDef *I3Cx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_PERR) == (I3C_SER_PERR)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d101      	bne.n	8001e28 <LL_I3C_IsActiveFlag_PERR+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_I3C_IsActiveFlag_PERR+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_I3C_IsActiveFlag_STALL>:
  * @rmtoll SER          STALL         LL_I3C_IsActiveFlag_STALL
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_STALL(const I3C_TypeDef *I3Cx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_STALL) == (I3C_SER_STALL)) ? 1UL : 0UL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d101      	bne.n	8001e4e <LL_I3C_IsActiveFlag_STALL+0x18>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_I3C_IsActiveFlag_STALL+0x1a>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_I3C_IsActiveFlag_DOVR>:
  * @rmtoll SER          DOVR          LL_I3C_IsActiveFlag_DOVR
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_DOVR(const I3C_TypeDef *I3Cx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_DOVR) == (I3C_SER_DOVR)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d101      	bne.n	8001e74 <LL_I3C_IsActiveFlag_DOVR+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_I3C_IsActiveFlag_DOVR+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_I3C_IsActiveFlag_COVR>:
  * @rmtoll SER          COVR          LL_I3C_IsActiveFlag_COVR
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_COVR(const I3C_TypeDef *I3Cx)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_COVR) == (I3C_SER_COVR)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d101      	bne.n	8001e9a <LL_I3C_IsActiveFlag_COVR+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_I3C_IsActiveFlag_COVR+0x1a>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_I3C_IsActiveFlag_ANACK>:
  * @rmtoll SER          ANACK         LL_I3C_IsActiveFlag_ANACK
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_ANACK(const I3C_TypeDef *I3Cx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_ANACK) == (I3C_SER_ANACK)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebc:	d101      	bne.n	8001ec2 <LL_I3C_IsActiveFlag_ANACK+0x1a>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_I3C_IsActiveFlag_ANACK+0x1c>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_I3C_IsActiveFlag_DNACK>:
  * @rmtoll SER          DNACK         LL_I3C_IsActiveFlag_DNACK
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_DNACK(const I3C_TypeDef *I3Cx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_DNACK) == (I3C_SER_DNACK)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee4:	d101      	bne.n	8001eea <LL_I3C_IsActiveFlag_DNACK+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_I3C_IsActiveFlag_DNACK+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_I3C_IsActiveFlag_DERR>:
  * @rmtoll SER          DERR          LL_I3C_IsActiveFlag_DERR
  * @param  I3Cx I3C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I3C_IsActiveFlag_DERR(const I3C_TypeDef *I3Cx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I3Cx->SER, I3C_SER_DERR) == (I3C_SER_DERR)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d101      	bne.n	8001f12 <LL_I3C_IsActiveFlag_DERR+0x1a>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <LL_I3C_IsActiveFlag_DERR+0x1c>
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_I3C_ClearFlag_FC>:
  * @rmtoll CEVR         CFCF          LL_I3C_ClearFlag_FC
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_FC(I3C_TypeDef *I3Cx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CFCF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_I3C_ClearFlag_ERR>:
  * @rmtoll CEVR         CERRF         LL_I3C_ClearFlag_ERR
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_ERR(I3C_TypeDef *I3Cx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CERRF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_I3C_ClearFlag_IBI>:
  * @rmtoll CEVR         CIBIF         LL_I3C_ClearFlag_IBI
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_IBI(I3C_TypeDef *I3Cx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CIBIF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_I3C_ClearFlag_CR>:
  * @rmtoll CEVR         CCRF          LL_I3C_ClearFlag_CR
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_CR(I3C_TypeDef *I3Cx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CCRF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_I3C_ClearFlag_CRUPD>:
  * @rmtoll CEVR         CCRUPDF       LL_I3C_ClearFlag_CRUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_CRUPD(I3C_TypeDef *I3Cx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CCRUPDF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_I3C_ClearFlag_HJ>:
  * @rmtoll CEVR         CHJF          LL_I3C_ClearFlag_HJ
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_HJ(I3C_TypeDef *I3Cx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CHJF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_I3C_ClearFlag_WKP>:
  * @rmtoll CEVR         CWKPF         LL_I3C_ClearFlag_WKP
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_WKP(I3C_TypeDef *I3Cx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CWKPF);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_I3C_ClearFlag_GET>:
  * @rmtoll CEVR         CGETF         LL_I3C_ClearFlag_GET
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_GET(I3C_TypeDef *I3Cx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CGETF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_I3C_ClearFlag_STA>:
  * @rmtoll CEVR         CSTAF         LL_I3C_ClearFlag_STA
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_STA(I3C_TypeDef *I3Cx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CSTAF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800200e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_I3C_ClearFlag_DAUPD>:
  * @rmtoll CEVR         CDAUPDF       LL_I3C_ClearFlag_DAUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_DAUPD(I3C_TypeDef *I3Cx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CDAUPDF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800202a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_I3C_ClearFlag_MWLUPD>:
  * @rmtoll CEVR         CMWLUPDF      LL_I3C_ClearFlag_MWLUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_MWLUPD(I3C_TypeDef *I3Cx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CMWLUPDF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_I3C_ClearFlag_MRLUPD>:
  * @rmtoll CEVR         CMRLUPDF      LL_I3C_ClearFlag_MRLUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_MRLUPD(I3C_TypeDef *I3Cx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CMRLUPDF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_I3C_ClearFlag_RST>:
  * @rmtoll CEVR         CRSTF         LL_I3C_ClearFlag_RST
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_RST(I3C_TypeDef *I3Cx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CRSTF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_I3C_ClearFlag_ASUPD>:
  * @rmtoll CEVR         CASUPDF       LL_I3C_ClearFlag_ASUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_ASUPD(I3C_TypeDef *I3Cx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CASUPDF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800209a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_I3C_ClearFlag_INTUPD>:
  * @rmtoll CEVR         CINTUPDF      LL_I3C_ClearFlag_INTUPD
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_INTUPD(I3C_TypeDef *I3Cx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CINTUPDF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_I3C_ClearFlag_DEF>:
  * @rmtoll CEVR         CDEFF         LL_I3C_ClearFlag_DEF
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_DEF(I3C_TypeDef *I3Cx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CDEFF);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_I3C_ClearFlag_GRP>:
  * @rmtoll CEVR         CGRPF         LL_I3C_ClearFlag_GRP
  * @param  I3Cx I3C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I3C_ClearFlag_GRP(I3C_TypeDef *I3Cx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(I3Cx->CEVR, I3C_CEVR_CGRPF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I3C_Init>:
 *         characteristic according to the specified parameters in the I3C_InitTypeDef.
 * @param  hi3c       : [IN]  Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                            for the specified I3C.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Init(I3C_HandleTypeDef *hi3c) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	75fb      	strb	r3, [r7, #23]
	uint32_t waveform_value;
	uint32_t timing_value;

	/* Check the I3C handle allocation */
	if (hi3c == NULL) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_I3C_Init+0x18>
		status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
 8002112:	e063      	b.n	80021dc <HAL_I3C_Init+0xe0>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Check the I3C state */
		if (hi3c->State == HAL_I3C_STATE_RESET) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <HAL_I3C_Init+0x2a>

      /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
      hi3c->MspInitCallback(hi3c);
#else
			/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
			HAL_I3C_MspInit(hi3c);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe fe07 	bl	8000d34 <HAL_I3C_MspInit>

#endif /* USE_HAL_I3C_REGISTER_CALLBACKS */
		}

		/* Update the I3C state to busy */
		hi3c->State = HAL_I3C_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		/* Disable the selected I3C peripheral */
		LL_I3C_Disable(hi3c->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc26 	bl	8001984 <LL_I3C_Disable>

		/* Check on the I3C mode: initialization depends on the mode */
		if (hi3c->Mode == HAL_I3C_MODE_CONTROLLER) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12f      	bne.n	80021a0 <HAL_I3C_Init+0xa4>
					IS_I3C_SDAHOLDTIME_VALUE(hi3c->Init.CtrlBusCharacteristic.SDAHoldTime));
			assert_param(
					IS_I3C_WAITTIME_VALUE(hi3c->Init.CtrlBusCharacteristic.WaitTime));

			/* Set Controller mode */
			LL_I3C_SetMode(hi3c->Instance, LL_I3C_MODE_CONTROLLER);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2102      	movs	r1, #2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc2c 	bl	80019a4 <LL_I3C_SetMode>

			/*----------------- SCL signal waveform configuration : I3C timing register 0 (I3C_TIMINGR0) ------------------ */
			/* Set the controller SCL waveform */
			waveform_value =
					((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLPPLowDuration
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7b1b      	ldrb	r3, [r3, #12]
 8002150:	461a      	mov	r2, r3
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLI3CHighDuration
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b5b      	ldrb	r3, [r3, #13]
									<< I3C_TIMINGR0_SCLH_I3C_Pos)
 8002156:	021b      	lsls	r3, r3, #8
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLI3CHighDuration
 8002158:	431a      	orrs	r2, r3
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLODLowDuration
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b9b      	ldrb	r3, [r3, #14]
									<< I3C_TIMINGR0_SCLL_OD_Pos)
 800215e:	041b      	lsls	r3, r3, #16
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLODLowDuration
 8002160:	431a      	orrs	r2, r3
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.SCLI2CHighDuration
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7bdb      	ldrb	r3, [r3, #15]
									<< I3C_TIMINGR0_SCLH_I2C_Pos));
 8002166:	061b      	lsls	r3, r3, #24
			waveform_value =
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

			LL_I3C_ConfigClockWaveForm(hi3c->Instance, waveform_value);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fd27 	bl	8001bc6 <LL_I3C_ConfigClockWaveForm>

			/*------------------ Timing configuration : I3C timing register 1 (I3C_TIMINGR1) ------------------------------ */
			/* Set SDA hold time, activity state, bus free duration and bus available duration */
			timing_value =
					((uint32_t) hi3c->Init.CtrlBusCharacteristic.SDAHoldTime
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
							| (uint32_t) hi3c->Init.CtrlBusCharacteristic.WaitTime
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	431a      	orrs	r2, r3
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.BusFreeDuration
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7c1b      	ldrb	r3, [r3, #16]
									<< I3C_TIMINGR1_FREE_Pos)
 8002186:	041b      	lsls	r3, r3, #16
							| ((uint32_t) hi3c->Init.CtrlBusCharacteristic.BusFreeDuration
 8002188:	4313      	orrs	r3, r2
							| (uint32_t) hi3c->Init.CtrlBusCharacteristic.BusIdleDuration);
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7c52      	ldrb	r2, [r2, #17]
			timing_value =
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

			LL_I3C_SetCtrlBusCharacteristic(hi3c->Instance, timing_value);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fd38 	bl	8001c0e <LL_I3C_SetCtrlBusCharacteristic>
 800219e:	e00d      	b.n	80021bc <HAL_I3C_Init+0xc0>
		} else {
			/* Set target mode */
			LL_I3C_SetMode(hi3c->Instance, LL_I3C_MODE_TARGET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fbfc 	bl	80019a4 <LL_I3C_SetMode>

			/*------------------ Timing configuration : I3C timing register 1 (I3C_TIMINGR1) ------------------------------ */
			/* Set the number of kernel clocks cycles for the bus available condition time */
			LL_I3C_SetAvalTiming(hi3c->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
					hi3c->Init.TgtBusCharacteristic.BusAvailableDuration);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7d1b      	ldrb	r3, [r3, #20]
			LL_I3C_SetAvalTiming(hi3c->Instance,
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7ff fd14 	bl	8001be4 <LL_I3C_SetAvalTiming>
		}

		/* Enable the selected I3C peripheral */
		LL_I3C_Enable(hi3c->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fbcf 	bl	8001964 <LL_I3C_Enable>

		hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	649a      	str	r2, [r3, #72]	; 0x48

		/* Update I3C state */
		hi3c->State = HAL_I3C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2210      	movs	r2, #16
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		hi3c->PreviousState = HAL_I3C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2210      	movs	r2, #16
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}

	return status;
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_I3C_ActivateNotification>:
 *                               the I3C is in target mode or a combination of @arg I3C_CONTROLLER_INTERRUPT
 *                               when it is in controller mode.
 * @retval HAL Status    :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_ActivateNotification(I3C_HandleTypeDef *hi3c,
		I3C_XferTypeDef *pXferData, uint32_t interruptMask) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	75fb      	strb	r3, [r7, #23]

	/* Check on the handle */
	if (hi3c == NULL) {
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_I3C_ActivateNotification+0x1c>
		status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
 8002202:	e060      	b.n	80022c6 <HAL_I3C_ActivateNotification+0xde>
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));
		assert_param(IS_I3C_INTERRUPTMASK(hi3c->Mode, interruptMask));

		/* Check the I3C state and mode */
		if ((hi3c->State == HAL_I3C_STATE_RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_I3C_ActivateNotification+0x38>
				|| ((hi3c->Mode != HAL_I3C_MODE_CONTROLLER)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d00a      	beq.n	800222e <HAL_I3C_ActivateNotification+0x46>
						&& (hi3c->Mode != HAL_I3C_MODE_TARGET))) {
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	7e1b      	ldrb	r3, [r3, #24]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d006      	beq.n	800222e <HAL_I3C_ActivateNotification+0x46>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002226:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
 800222c:	e04b      	b.n	80022c6 <HAL_I3C_ActivateNotification+0xde>
		}
		/* Check the I3C mode */
		else if ((hi3c->Mode == HAL_I3C_MODE_TARGET)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	7e1b      	ldrb	r3, [r3, #24]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10e      	bne.n	8002254 <HAL_I3C_ActivateNotification+0x6c>
				&& ((interruptMask & (HAL_I3C_IT_DEFIE | HAL_I3C_IT_GRPIE))
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_I3C_ActivateNotification+0xe8>)
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_I3C_ActivateNotification+0x6c>
						!= 0U) && (pXferData == NULL)) {
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_I3C_ActivateNotification+0x6c>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800224c:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
 8002252:	e038      	b.n	80022c6 <HAL_I3C_ActivateNotification+0xde>
		} else {
			/* Check the I3C mode */
			if (hi3c->Mode == HAL_I3C_MODE_TARGET) {
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	7e1b      	ldrb	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d11f      	bne.n	800229c <HAL_I3C_ActivateNotification+0xb4>
				if ((interruptMask & (HAL_I3C_IT_DEFIE | HAL_I3C_IT_GRPIE))
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_I3C_ActivateNotification+0xe8>)
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d016      	beq.n	8002294 <HAL_I3C_ActivateNotification+0xac>
						!= 0U) {
					hi3c->pXferData = pXferData;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	61da      	str	r2, [r3, #28]
					hi3c->RxXferCount = hi3c->pXferData->RxBuf.Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Check on the Rx threshold to know the Rx treatment process : byte or word */
					if (LL_I3C_GetRxFIFOThreshold(
							hi3c->Instance) == LL_I3C_RXFIFO_THRESHOLD_1_4) {
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
					if (LL_I3C_GetRxFIFOThreshold(
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fbd5 	bl	8001a2a <LL_I3C_GetRxFIFOThreshold>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_I3C_ActivateNotification+0xa6>
						/* Set byte treatment function pointer */
						hi3c->ptrRxFunc = &I3C_ReceiveByteTreatment;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_I3C_ActivateNotification+0xec>)
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
 800228c:	e002      	b.n	8002294 <HAL_I3C_ActivateNotification+0xac>
					} else {
						/* Set word treatment function pointer */
						hi3c->ptrRxFunc = &I3C_ReceiveWordTreatment;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_I3C_ActivateNotification+0xf0>)
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
					}
				}
				/* Store the target event treatment function */
				hi3c->XferISR = I3C_Tgt_Event_ISR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_I3C_ActivateNotification+0xf4>)
 8002298:	64da      	str	r2, [r3, #76]	; 0x4c
 800229a:	e002      	b.n	80022a2 <HAL_I3C_ActivateNotification+0xba>
			} else {
				/* Store the controller event treatment function */
				hi3c->XferISR = I3C_Ctrl_Event_ISR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_I3C_ActivateNotification+0xf8>)
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
			}

			/* Update handle parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_LISTEN;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2230      	movs	r2, #48	; 0x30
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->PreviousState = HAL_I3C_STATE_LISTEN;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2230      	movs	r2, #48	; 0x30
 80022b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */
			/* Enable selected notifications */
			I3C_Enable_IRQ(hi3c, (interruptMask | I3C_XFER_LISTEN_IT));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	4619      	mov	r1, r3
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f001 fe5e 	bl	8003f82 <I3C_Enable_IRQ>
		}
	}

	return status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	c0000020 	.word	0xc0000020
 80022d4:	08003611 	.word	0x08003611
 80022d8:	0800365b 	.word	0x0800365b
 80022dc:	08002e83 	.word	0x08002e83
 80022e0:	0800308d 	.word	0x0800308d

080022e4 <HAL_I3C_CtrlTxCpltCallback>:
 * @brief  Controller Transmission Complete callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
__weak void HAL_I3C_CtrlTxCpltCallback(I3C_HandleTypeDef *hi3c) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	UNUSED(hi3c);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I3C_CtrlTxCpltCallback could be implemented in the user file
	 */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_I3C_CtrlRxCpltCallback>:
 * @brief  Controller Reception Complete callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
__weak void HAL_I3C_CtrlRxCpltCallback(I3C_HandleTypeDef *hi3c) {
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	UNUSED(hi3c);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I3C_CtrlRxCpltCallback could be implemented in the user file
	 */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_I3C_CtrlMultipleXferCpltCallback>:
 * @brief  Controller multiple Direct CCC Command, I3C private or I2C transfer Complete callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
__weak void HAL_I3C_CtrlMultipleXferCpltCallback(I3C_HandleTypeDef *hi3c) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	UNUSED(hi3c);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I3C_CtrlMultipleXferCpltCallback could be implemented in the user file
	 */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_I3C_AbortCpltCallback>:
 * @brief  Abort complete callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
__weak void HAL_I3C_AbortCpltCallback(I3C_HandleTypeDef *hi3c) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	UNUSED(hi3c);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I3C_AbortCpltCallback could be implemented in the user file
	 */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_I3C_ErrorCallback>:
 * @brief  Error callback.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                     for the specified I3C.
 * @retval None
 */
__weak void HAL_I3C_ErrorCallback(I3C_HandleTypeDef *hi3c) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	UNUSED(hi3c);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I3C_ErrorCallback could be implemented in the user file
	 */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_I3C_ER_IRQHandler>:
 * @brief  This function handles I3C error interrupt request.
 * @param  hi3c : [IN]  Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                      for the specified I3C.
 * @retval None
 */
void HAL_I3C_ER_IRQHandler(I3C_HandleTypeDef *hi3c) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	uint32_t it_flag = READ_REG(hi3c->Instance->EVR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	60fb      	str	r3, [r7, #12]
	uint32_t it_source = READ_REG(hi3c->Instance->IER);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	60bb      	str	r3, [r7, #8]

	/* Check on the error interrupt flag and source */
	if ((I3C_CHECK_FLAG(it_flag, HAL_I3C_FLAG_ERRF) != RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_I3C_ER_IRQHandler+0x4e>
			&& (I3C_CHECK_IT_SOURCE(it_source, HAL_I3C_IT_ERRIE) != RESET)) {
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002370:	2b00      	cmp	r3, #0
 8002372:	d010      	beq.n	8002396 <HAL_I3C_ER_IRQHandler+0x4e>
		/* Clear the error flag */
		LL_I3C_ClearFlag_ERR(hi3c->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fddf 	bl	8001f3c <LL_I3C_ClearFlag_ERR>

		if (hi3c->State != HAL_I3C_STATE_ABORT) {
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b60      	cmp	r3, #96	; 0x60
 8002388:	d002      	beq.n	8002390 <HAL_I3C_ER_IRQHandler+0x48>
			/* Get error sources */
			I3C_GetErrorSources(hi3c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f9e2 	bl	8003754 <I3C_GetErrorSources>
		}

		/* Errors treatment */
		I3C_ErrorTreatment(hi3c);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f001 fefd 	bl	8004190 <I3C_ErrorTreatment>
	}
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_I3C_EV_IRQHandler>:
 * @param  hi3c : [IN]  Pointer to an I3C_HandleTypeDef structure that contains the configuration information
 *                      for the specified I3C.
 * @retval None
 */
void HAL_I3C_EV_IRQHandler(I3C_HandleTypeDef *hi3c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	uint32_t it_flags = READ_REG(hi3c->Instance->EVR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	60fb      	str	r3, [r7, #12]
	uint32_t it_sources = READ_REG(hi3c->Instance->IER);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	60bb      	str	r3, [r7, #8]

	/* I3C events treatment */
	if (hi3c->XferISR != NULL) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_I3C_EV_IRQHandler+0x2c>
		hi3c->XferISR(hi3c, it_flags, it_sources);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
	}
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_I3C_Ctrl_BusCharacteristicConfig>:
 *                            for the specified I3C.
 * @param  pConfig    : [IN]  Pointer to an LL_I3C_CtrlBusConfTypeDef structure contains controller bus configuration.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_BusCharacteristicConfig(I3C_HandleTypeDef *hi3c,
		const LL_I3C_CtrlBusConfTypeDef *pConfig) {
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]
	uint32_t waveform_value;
	uint32_t timing_value;

	/* Check the I3C handle allocation */
	if (hi3c == NULL) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_I3C_Ctrl_BusCharacteristicConfig+0x1a>
		status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
 80023ea:	e04d      	b.n	8002488 <HAL_I3C_Ctrl_BusCharacteristicConfig+0xb6>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Check on user parameters */
		if (pConfig == NULL) {
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I3C_Ctrl_BusCharacteristicConfig+0x2e>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023f8:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
 80023fe:	e043      	b.n	8002488 <HAL_I3C_Ctrl_BusCharacteristicConfig+0xb6>
		}
		/* Check the I3C state and mode */
		else if ((hi3c->State != HAL_I3C_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b10      	cmp	r3, #16
 800240a:	d103      	bne.n	8002414 <HAL_I3C_Ctrl_BusCharacteristicConfig+0x42>
				|| (hi3c->Mode != HAL_I3C_MODE_CONTROLLER)) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e1b      	ldrb	r3, [r3, #24]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d006      	beq.n	8002422 <HAL_I3C_Ctrl_BusCharacteristicConfig+0x50>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800241a:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	e032      	b.n	8002488 <HAL_I3C_Ctrl_BusCharacteristicConfig+0xb6>
			/* Check the parameters */
			assert_param(IS_I3C_SDAHOLDTIME_VALUE(pConfig->SDAHoldTime));
			assert_param(IS_I3C_WAITTIME_VALUE(pConfig->WaitTime));

			/* Disable the selected I3C peripheral */
			LL_I3C_Disable(hi3c->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff faac 	bl	8001984 <LL_I3C_Disable>

			/*----------------- SCL signal waveform configuration : I3C timing register 0 (I3C_TIMINGR0) ------------------ */
			/* Set the controller SCL waveform */
			waveform_value = ((uint32_t) pConfig->SCLPPLowDuration
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7a1b      	ldrb	r3, [r3, #8]
 8002430:	461a      	mov	r2, r3
					| ((uint32_t) pConfig->SCLI3CHighDuration
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7a5b      	ldrb	r3, [r3, #9]
							<< I3C_TIMINGR0_SCLH_I3C_Pos)
 8002436:	021b      	lsls	r3, r3, #8
					| ((uint32_t) pConfig->SCLI3CHighDuration
 8002438:	431a      	orrs	r2, r3
					| ((uint32_t) pConfig->SCLODLowDuration
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7a9b      	ldrb	r3, [r3, #10]
							<< I3C_TIMINGR0_SCLL_OD_Pos)
 800243e:	041b      	lsls	r3, r3, #16
					| ((uint32_t) pConfig->SCLODLowDuration
 8002440:	431a      	orrs	r2, r3
					| ((uint32_t) pConfig->SCLI2CHighDuration
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7adb      	ldrb	r3, [r3, #11]
							<< I3C_TIMINGR0_SCLH_I2C_Pos));
 8002446:	061b      	lsls	r3, r3, #24
			waveform_value = ((uint32_t) pConfig->SCLPPLowDuration
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

			LL_I3C_ConfigClockWaveForm(hi3c->Instance, waveform_value);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6939      	ldr	r1, [r7, #16]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fbb7 	bl	8001bc6 <LL_I3C_ConfigClockWaveForm>

			/*------------------ Timing configuration : I3C timing register 1 (I3C_TIMINGR1) ------------------------------ */
			/* Set SDA hold time, activity state, bus free duration and bus available duration */
			timing_value = ((uint32_t) pConfig->SDAHoldTime
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
					| (uint32_t) pConfig->WaitTime
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	431a      	orrs	r2, r3
					| ((uint32_t) pConfig->BusFreeDuration
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	7b1b      	ldrb	r3, [r3, #12]
							<< I3C_TIMINGR1_FREE_Pos)
 8002466:	041b      	lsls	r3, r3, #16
					| ((uint32_t) pConfig->BusFreeDuration
 8002468:	4313      	orrs	r3, r2
					| (uint32_t) pConfig->BusIdleDuration);
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	7b52      	ldrb	r2, [r2, #13]
			timing_value = ((uint32_t) pConfig->SDAHoldTime
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

			LL_I3C_SetCtrlBusCharacteristic(hi3c->Instance, timing_value);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fbc8 	bl	8001c0e <LL_I3C_SetCtrlBusCharacteristic>

			/* Enable the selected I3C peripheral */
			LL_I3C_Enable(hi3c->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fa6e 	bl	8001964 <LL_I3C_Enable>
		}
	}

	return status;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_I3C_SetConfigFifo>:
 *                            for the specified I3C.
 * @param  pConfig    : [IN]  Pointer to an I3C_FifoConfTypeDef structure contains FIFOs configuration.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_SetConfigFifo(I3C_HandleTypeDef *hi3c,
		const I3C_FifoConfTypeDef *pConfig) {
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
	uint32_t cfgr_value;
	uint32_t cfgr_mask;

	/* Check the I3C handle */
	if (hi3c == NULL) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_I3C_SetConfigFifo+0x1a>
		status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
 80024aa:	e03b      	b.n	8002524 <HAL_I3C_SetConfigFifo+0x92>
	} else {
		/* Check on user parameters */
		if (pConfig == NULL) {
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_I3C_SetConfigFifo+0x2e>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024b8:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
 80024be:	e031      	b.n	8002524 <HAL_I3C_SetConfigFifo+0x92>
		}
		/* Check the I3C state */
		else if (hi3c->State == HAL_I3C_STATE_RESET) {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_I3C_SetConfigFifo+0x48>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024d2:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
 80024d8:	e024      	b.n	8002524 <HAL_I3C_SetConfigFifo+0x92>
					IS_I3C_TXFIFOTHRESHOLD_VALUE(pConfig->TxFifoThreshold));
			assert_param(
					IS_I3C_RXFIFOTHRESHOLD_VALUE(pConfig->RxFifoThreshold));

			/* Set Tx and Rx Fifo threshold */
			cfgr_value = (pConfig->TxFifoThreshold | pConfig->RxFifoThreshold);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
			cfgr_mask = (I3C_CFGR_TXTHRES | I3C_CFGR_RXTHRES);
 80024e6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80024ea:	60fb      	str	r3, [r7, #12]

			/* Check on the I3C mode: Control and status FIFOs available only with controller mode */
			if (hi3c->Mode == HAL_I3C_MODE_CONTROLLER) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10b      	bne.n	800250c <HAL_I3C_SetConfigFifo+0x7a>
				assert_param(
						IS_I3C_CONTROLFIFOSTATE_VALUE(pConfig->ControlFifo));
				assert_param(IS_I3C_STATUSFIFOSTATE_VALUE(pConfig->StatusFifo));

				/* Set Control and Status Fifo states */
				cfgr_value |= (pConfig->StatusFifo | pConfig->ControlFifo);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
				cfgr_mask |= (I3C_CFGR_TMODE | I3C_CFGR_SMODE);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800250a:	60fb      	str	r3, [r7, #12]
			}

			/* Set configuration in the CFGR register */
			MODIFY_REG(hi3c->Instance->CFGR, cfgr_mask, cfgr_value);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	ea02 0103 	and.w	r1, r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
		}
	}

	return status;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I3C_Ctrl_Config>:
 *                            for the specified I3C.
 * @param  pConfig    : [IN]  Pointer to an I3C_CtrlConfTypeDef structure that contains controller configuration.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_Config(I3C_HandleTypeDef *hi3c,
		const I3C_CtrlConfTypeDef *pConfig) {
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
	uint32_t timing2_value;
	uint32_t cfgr_value;

	/* Check the I3C handle */
	if (hi3c == NULL) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_I3C_Ctrl_Config+0x1a>
		status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
 800254a:	e05b      	b.n	8002604 <HAL_I3C_Ctrl_Config+0xd2>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Check on user parameters */
		if (pConfig == NULL) {
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_I3C_Ctrl_Config+0x2e>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002558:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e051      	b.n	8002604 <HAL_I3C_Ctrl_Config+0xd2>
		}
		/* Check the I3C state and mode */
		else if ((hi3c->State == HAL_I3C_STATE_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_I3C_Ctrl_Config+0x42>
				|| (hi3c->Mode != HAL_I3C_MODE_CONTROLLER)) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e1b      	ldrb	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d006      	beq.n	8002582 <HAL_I3C_Ctrl_Config+0x50>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800257a:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
 8002580:	e040      	b.n	8002604 <HAL_I3C_Ctrl_Config+0xd2>
			assert_param(IS_I3C_FUNCTIONALSTATE_VALUE(pConfig->CCCStallState));
			assert_param(IS_I3C_FUNCTIONALSTATE_VALUE(pConfig->TxStallState));
			assert_param(IS_I3C_FUNCTIONALSTATE_VALUE(pConfig->RxStallState));

			/* Disable the selected I3C peripheral */
			LL_I3C_Disable(hi3c->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f9fc 	bl	8001984 <LL_I3C_Disable>

			/* Calculate value to be written in timing register 2 */
			timing2_value = (((uint32_t) pConfig->StallTime
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	785b      	ldrb	r3, [r3, #1]
					<< I3C_TIMINGR2_STALL_Pos)
 8002590:	021a      	lsls	r2, r3, #8
					| ((uint32_t) pConfig->ACKStallState
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	78db      	ldrb	r3, [r3, #3]
							<< I3C_TIMINGR2_STALLA_Pos)
 8002596:	00db      	lsls	r3, r3, #3
					| ((uint32_t) pConfig->ACKStallState
 8002598:	431a      	orrs	r2, r3
					| ((uint32_t) pConfig->CCCStallState
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	791b      	ldrb	r3, [r3, #4]
							<< I3C_TIMINGR2_STALLC_Pos)
 800259e:	009b      	lsls	r3, r3, #2
					| ((uint32_t) pConfig->CCCStallState
 80025a0:	431a      	orrs	r2, r3
					| ((uint32_t) pConfig->TxStallState
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	795b      	ldrb	r3, [r3, #5]
							<< I3C_TIMINGR2_STALLD_Pos)
 80025a6:	005b      	lsls	r3, r3, #1
					| ((uint32_t) pConfig->TxStallState
 80025a8:	4313      	orrs	r3, r2
					| ((uint32_t) pConfig->RxStallState
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	7992      	ldrb	r2, [r2, #6]
			timing2_value = (((uint32_t) pConfig->StallTime
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
							<< I3C_TIMINGR2_STALLT_Pos));

			/* Set value in timing 2 register */
			WRITE_REG(hi3c->Instance->TIMINGR2, timing2_value);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

			/* Calculate value to be written in CFGR register */
			cfgr_value =
					(((uint32_t) pConfig->HighKeeperSDA << I3C_CFGR_HKSDAEN_Pos)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	79db      	ldrb	r3, [r3, #7]
 80025c0:	015a      	lsls	r2, r3, #5
							| ((uint32_t) pConfig->HotJoinAllowed
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	789b      	ldrb	r3, [r3, #2]
									<< I3C_CFGR_HJACK_Pos));
 80025c6:	01db      	lsls	r3, r3, #7
			cfgr_value =
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

			/* Set hot join acknowledge and high keeper values */
			MODIFY_REG(hi3c->Instance->CFGR, I3C_CFGR_HKSDAEN | I3C_CFGR_HJACK,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 01a0 	bic.w	r1, r3, #160	; 0xa0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
					cfgr_value);

			/* Set dynamic address value */
			LL_I3C_SetOwnDynamicAddress(hi3c->Instance, pConfig->DynamicAddr);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7ff fa7c 	bl	8001ae8 <LL_I3C_SetOwnDynamicAddress>

			/* Validate the controller dynamic address */
			LL_I3C_EnableOwnDynAddress(hi3c->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fa54 	bl	8001aa2 <LL_I3C_EnableOwnDynAddress>

			/* Enable the selected I3C peripheral */
			LL_I3C_Enable(hi3c->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f9b0 	bl	8001964 <LL_I3C_Enable>
		}
	}

	return status;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_I3C_Ctrl_ConfigBusDevices>:
 * @param  nbDevice   : [IN]  Value specifies the number of devices to be treated.
 *                            This parameter must be a number between Min_Data=1U and Max_Data=4U.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_ConfigBusDevices(I3C_HandleTypeDef *hi3c,
		const I3C_DeviceConfTypeDef *pDesc, uint8_t nbDevice) {
 800260e:	b480      	push	{r7}
 8002610:	b089      	sub	sp, #36	; 0x24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
	uint32_t write_value;

	/* Check the I3C handle */
	if (hi3c == NULL) {
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_I3C_Ctrl_ConfigBusDevices+0x1e>
		status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e06c      	b.n	8002706 <HAL_I3C_Ctrl_ConfigBusDevices+0xf8>
	} else {
		/* Check on user parameters */
		if (pDesc == NULL) {
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_I3C_Ctrl_ConfigBusDevices+0x32>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002638:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	e062      	b.n	8002706 <HAL_I3C_Ctrl_ConfigBusDevices+0xf8>
		}
		/* Check the I3C state and mode */
		else if ((hi3c->State == HAL_I3C_STATE_RESET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_I3C_Ctrl_ConfigBusDevices+0x46>
				|| (hi3c->Mode != HAL_I3C_MODE_CONTROLLER)) {
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d006      	beq.n	8002662 <HAL_I3C_Ctrl_ConfigBusDevices+0x54>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800265a:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e051      	b.n	8002706 <HAL_I3C_Ctrl_ConfigBusDevices+0xf8>
			assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
			assert_param(IS_I3C_MODE(hi3c->Mode));
			assert_param(IS_I3C_DEVICE_VALUE(nbDevice));

			/* Loop on the nbDevice to be treated */
			for (uint32_t index = 0U; index < nbDevice; index++) {
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e04a      	b.n	80026fe <HAL_I3C_Ctrl_ConfigBusDevices+0xf0>
						IS_I3C_FUNCTIONALSTATE_VALUE(pDesc[index].CtrlStopTransfer));
				assert_param(
						IS_I3C_FUNCTIONALSTATE_VALUE(pDesc[index].IBIPayload));

				/* Set value to be written */
				write_value = (((uint32_t) pDesc[index].TargetDynamicAddr
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4413      	add	r3, r2
 8002678:	785b      	ldrb	r3, [r3, #1]
						<< I3C_DEVRX_DA_Pos)
 800267a:	0059      	lsls	r1, r3, #1
						| ((uint32_t) pDesc[index].IBIAck
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4413      	add	r3, r2
 800268c:	789b      	ldrb	r3, [r3, #2]
								<< I3C_DEVRX_IBIACK_Pos)
 800268e:	041b      	lsls	r3, r3, #16
						| ((uint32_t) pDesc[index].IBIAck
 8002690:	4319      	orrs	r1, r3
						| ((uint32_t) pDesc[index].CtrlRoleReqAck
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	791b      	ldrb	r3, [r3, #4]
								<< I3C_DEVRX_CRACK_Pos)
 80026a4:	045b      	lsls	r3, r3, #17
						| ((uint32_t) pDesc[index].CtrlRoleReqAck
 80026a6:	4319      	orrs	r1, r3
						| ((uint32_t) pDesc[index].CtrlStopTransfer
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4413      	add	r3, r2
 80026b8:	795b      	ldrb	r3, [r3, #5]
								<< I3C_DEVRX_SUSP_Pos)
 80026ba:	04db      	lsls	r3, r3, #19
						| ((uint32_t) pDesc[index].CtrlStopTransfer
 80026bc:	4319      	orrs	r1, r3
						| ((uint32_t) pDesc[index].IBIPayload
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	78db      	ldrb	r3, [r3, #3]
								<< I3C_DEVRX_IBIDEN_Pos));
 80026d0:	049b      	lsls	r3, r3, #18
				write_value = (((uint32_t) pDesc[index].TargetDynamicAddr
 80026d2:	430b      	orrs	r3, r1
 80026d4:	617b      	str	r3, [r7, #20]

				/* Write configuration in the DEVRx register */
				WRITE_REG(
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	3318      	adds	r3, #24
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	605a      	str	r2, [r3, #4]
			for (uint32_t index = 0U; index < nbDevice; index++) {
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	429a      	cmp	r2, r3
 8002704:	d3b0      	bcc.n	8002668 <HAL_I3C_Ctrl_ConfigBusDevices+0x5a>
						write_value);
			}
		}
	}

	return status;
 8002706:	7ffb      	ldrb	r3, [r7, #31]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I3C_AddDescToFrame>:
 * @param  option        : [IN]  Value indicates the transfer option. It can be one value of @ref I3C_OPTION_DEFINITION
 * @retval HAL Status    :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_AddDescToFrame(I3C_HandleTypeDef *hi3c,
		const I3C_CCCTypeDef *pCCCDesc, const I3C_PrivateTypeDef *pPrivateDesc,
		I3C_XferTypeDef *pXferData, uint8_t nbFrame, uint32_t option) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

	/* check on the handle */
	if (hi3c == NULL) {
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <HAL_I3C_AddDescToFrame+0x1e>
		status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
 8002730:	e076      	b.n	8002820 <HAL_I3C_AddDescToFrame+0x10c>
	} else {
		/* Get I3C handle state */
		handle_state = hi3c->State;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002738:	75bb      	strb	r3, [r7, #22]

		/* Set handle transfer parameters */
		hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	649a      	str	r2, [r3, #72]	; 0x48
		hi3c->pCCCDesc = pCCCDesc;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	621a      	str	r2, [r3, #32]
		hi3c->pPrivateDesc = pPrivateDesc;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
		hi3c->pXferData = pXferData;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	61da      	str	r2, [r3, #28]
		hi3c->RxXferCount = 0;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
		hi3c->TxXferCount = 0;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30

		/* Prepare Direction, and Check on user parameters */
		if (((option & I3C_OPERATION_TYPE_MASK) == LL_I3C_CONTROLLER_MTYPE_CCC)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8002764:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002768:	d005      	beq.n	8002776 <HAL_I3C_AddDescToFrame+0x62>
				|| ((option & I3C_OPERATION_TYPE_MASK)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8002770:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002774:	d11a      	bne.n	80027ac <HAL_I3C_AddDescToFrame+0x98>
						== LL_I3C_CONTROLLER_MTYPE_DIRECT)) {
			/* Check on user parameters */
			if ((pCCCDesc == NULL) || (pXferData == NULL) || (nbFrame < 1U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_I3C_AddDescToFrame+0x8a>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <HAL_I3C_AddDescToFrame+0x8a>
 8002782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_I3C_AddDescToFrame+0x8a>
					|| (((option
							& (I3C_OPERATION_TYPE_MASK | I3C_DEFINE_BYTE_MASK))
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_I3C_AddDescToFrame+0x118>)
 800278e:	4013      	ands	r3, r2
					|| (((option
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_I3C_AddDescToFrame+0x11c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d11b      	bne.n	80027ce <HAL_I3C_AddDescToFrame+0xba>
							== (LL_I3C_CONTROLLER_MTYPE_DIRECT
									| I3C_DEFINE_BYTE_MASK))
							&& (pCCCDesc->CCCBuf.Size == 0U))) {
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d117      	bne.n	80027ce <HAL_I3C_AddDescToFrame+0xba>
				hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027a4:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
			if ((pCCCDesc == NULL) || (pXferData == NULL) || (nbFrame < 1U)
 80027aa:	e010      	b.n	80027ce <HAL_I3C_AddDescToFrame+0xba>
			}
		} else {
			/* Check on user parameters */
			if ((pPrivateDesc == NULL) || (pXferData == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_I3C_AddDescToFrame+0xac>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_I3C_AddDescToFrame+0xac>
					|| (nbFrame <= 0U)) {
 80027b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_I3C_AddDescToFrame+0xbc>
				hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027c6:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
 80027cc:	e000      	b.n	80027d0 <HAL_I3C_AddDescToFrame+0xbc>
			if ((pCCCDesc == NULL) || (pXferData == NULL) || (nbFrame < 1U)
 80027ce:	bf00      	nop
			}
		}

		if (status == HAL_OK) {
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d124      	bne.n	8002820 <HAL_I3C_AddDescToFrame+0x10c>
			/* check on the State */
			if ((handle_state == HAL_I3C_STATE_READY)
 80027d6:	7dbb      	ldrb	r3, [r7, #22]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d002      	beq.n	80027e2 <HAL_I3C_AddDescToFrame+0xce>
					|| (handle_state == HAL_I3C_STATE_LISTEN)) {
 80027dc:	7dbb      	ldrb	r3, [r7, #22]
 80027de:	2b30      	cmp	r3, #48	; 0x30
 80027e0:	d11c      	bne.n	800281c <HAL_I3C_AddDescToFrame+0x108>
				/* I3C control buffer prior preparation */
				if (I3C_ControlBuffer_PriorPreparation(hi3c, nbFrame, option)
 80027e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f001 f9ff 	bl	8003bee <I3C_ControlBuffer_PriorPreparation>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_I3C_AddDescToFrame+0xee>
						!= HAL_OK) {
					hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027fc:	649a      	str	r2, [r3, #72]	; 0x48
					status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
				}

				/* I3C Tx Buffer prior preparation, set and check RxCount */
				if (I3C_Xfer_PriorPreparation(hi3c, nbFrame, option)
 8002802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f001 f81f 	bl	800384e <I3C_Xfer_PriorPreparation>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_I3C_AddDescToFrame+0x10c>
						!= HAL_OK) {
					status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
				if (I3C_Xfer_PriorPreparation(hi3c, nbFrame, option)
 800281a:	e001      	b.n	8002820 <HAL_I3C_AddDescToFrame+0x10c>
				}
			} else {
				status = HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	return status;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	78000001 	.word	0x78000001
 8002830:	18000001 	.word	0x18000001

08002834 <HAL_I3C_Ctrl_TransmitCCC_IT>:
 *                            (control buffer, data buffer and status buffer).
 *                            This value contain transfer data after called @ref HAL_I3C_AddDescToFrame().
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_TransmitCCC_IT(I3C_HandleTypeDef *hi3c,
		I3C_XferTypeDef *pXferData) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]

	/* check on the handle */
	if (hi3c == NULL) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_I3C_Ctrl_TransmitCCC_IT+0x1a>
		status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e04e      	b.n	80028ec <HAL_I3C_Ctrl_TransmitCCC_IT+0xb8>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Get I3C handle state */
		handle_state = hi3c->State;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	73bb      	strb	r3, [r7, #14]

		/* Check on user parameters */
		if ((pXferData == NULL)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_I3C_Ctrl_TransmitCCC_IT+0x38>
				|| ((pXferData->TxBuf.pBuffer == NULL)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_I3C_Ctrl_TransmitCCC_IT+0x46>
						&& (hi3c->TxXferCount != 0U))) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_I3C_Ctrl_TransmitCCC_IT+0x46>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002872:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e038      	b.n	80028ec <HAL_I3C_Ctrl_TransmitCCC_IT+0xb8>
		}
		/* check on the Mode */
		else if (hi3c->Mode != HAL_I3C_MODE_CONTROLLER) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7e1b      	ldrb	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d006      	beq.n	8002890 <HAL_I3C_Ctrl_TransmitCCC_IT+0x5c>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e02d      	b.n	80028ec <HAL_I3C_Ctrl_TransmitCCC_IT+0xb8>
		}
		/* check on the State */
		else if ((handle_state != HAL_I3C_STATE_READY)
 8002890:	7bbb      	ldrb	r3, [r7, #14]
 8002892:	2b10      	cmp	r3, #16
 8002894:	d005      	beq.n	80028a2 <HAL_I3C_Ctrl_TransmitCCC_IT+0x6e>
				&& (handle_state != HAL_I3C_STATE_LISTEN)) {
 8002896:	7bbb      	ldrb	r3, [r7, #14]
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d002      	beq.n	80028a2 <HAL_I3C_Ctrl_TransmitCCC_IT+0x6e>
			status = HAL_BUSY;
 800289c:	2302      	movs	r3, #2
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e024      	b.n	80028ec <HAL_I3C_Ctrl_TransmitCCC_IT+0xb8>
		} else {
			/* Set handle transfer parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_BUSY_TX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2221      	movs	r2, #33	; 0x21
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->pXferData = pXferData;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	61da      	str	r2, [r3, #28]
			hi3c->XferISR = I3C_Ctrl_Tx_ISR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_I3C_Ctrl_TransmitCCC_IT+0xc4>)
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Check on the Tx threshold to know the Tx treatment process : byte or word */
			if (LL_I3C_GetTxFIFOThreshold(
					hi3c->Instance) == LL_I3C_TXFIFO_THRESHOLD_1_4) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetTxFIFOThreshold(
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f8d0 	bl	8001a66 <LL_I3C_GetTxFIFOThreshold>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <HAL_I3C_Ctrl_TransmitCCC_IT+0xa0>
				/* Set byte treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitByteTreatment;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_I3C_Ctrl_TransmitCCC_IT+0xc8>)
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
 80028d2:	e002      	b.n	80028da <HAL_I3C_Ctrl_TransmitCCC_IT+0xa6>
			} else {
				/* Set word treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitWordTreatment;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_I3C_Ctrl_TransmitCCC_IT+0xcc>)
 80028d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */

			/* Enable Tx process interrupts */
			I3C_Enable_IRQ(hi3c, I3C_XFER_CONTROLLER_TX_IT);
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f001 fb50 	bl	8003f82 <I3C_Enable_IRQ>

			/* Initiate a Start condition */
			LL_I3C_RequestTransfer(hi3c->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f9fc 	bl	8001ce4 <LL_I3C_RequestTransfer>
		}
	}

	return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08003121 	.word	0x08003121
 80028fc:	08003563 	.word	0x08003563
 8002900:	080035b3 	.word	0x080035b3

08002904 <HAL_I3C_Ctrl_ReceiveCCC_IT>:
 *                            (control buffer, data buffer and status buffer).
 *                            This value contain transfer data after called @ref HAL_I3C_AddDescToFrame().
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_ReceiveCCC_IT(I3C_HandleTypeDef *hi3c,
		I3C_XferTypeDef *pXferData) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]

	/* check on the handle */
	if (hi3c == NULL) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_I3C_Ctrl_ReceiveCCC_IT+0x1a>
		status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e06a      	b.n	80029f4 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xf0>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Get I3C handle state */
		handle_state = hi3c->State;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002924:	73bb      	strb	r3, [r7, #14]

		/* Check on user parameters */
		if ((pXferData == NULL) || (pXferData->RxBuf.pBuffer == NULL)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x40>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x40>
				|| ((pXferData->TxBuf.pBuffer == NULL)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x4e>
						&& (hi3c->TxXferCount != 0U))) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x4e>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800294a:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e050      	b.n	80029f4 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xf0>
		}
		/* check on the Mode */
		else if (hi3c->Mode != HAL_I3C_MODE_CONTROLLER) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7e1b      	ldrb	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d006      	beq.n	8002968 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x64>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002960:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e045      	b.n	80029f4 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xf0>
		}
		/* check on the State */
		else if ((handle_state != HAL_I3C_STATE_READY)
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	2b10      	cmp	r3, #16
 800296c:	d005      	beq.n	800297a <HAL_I3C_Ctrl_ReceiveCCC_IT+0x76>
				&& (handle_state != HAL_I3C_STATE_LISTEN)) {
 800296e:	7bbb      	ldrb	r3, [r7, #14]
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d002      	beq.n	800297a <HAL_I3C_Ctrl_ReceiveCCC_IT+0x76>
			status = HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e03c      	b.n	80029f4 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xf0>
		} else {
			/* Set handle transfer parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_BUSY_RX;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2222      	movs	r2, #34	; 0x22
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->pXferData = pXferData;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	61da      	str	r2, [r3, #28]
			hi3c->RxXferCount = pXferData->RxBuf.Size;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
			hi3c->XferISR = I3C_Ctrl_Rx_ISR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xfc>)
 800299a:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Check on CCC defining byte */
			if (hi3c->TxXferCount != 0U) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xbe>
				/* Check on the Tx threshold to know the Tx treatment process : byte or word */
				if (LL_I3C_GetTxFIFOThreshold(
						hi3c->Instance) == LL_I3C_TXFIFO_THRESHOLD_1_4) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
				if (LL_I3C_GetTxFIFOThreshold(
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff f85c 	bl	8001a66 <LL_I3C_GetTxFIFOThreshold>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_I3C_Ctrl_ReceiveCCC_IT+0xb8>
					/* Set byte treatment function pointer */
					hi3c->ptrTxFunc = &I3C_TransmitByteTreatment;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x100>)
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50
 80029ba:	e002      	b.n	80029c2 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xbe>
				} else {
					/* Set word treatment function pointer */
					hi3c->ptrTxFunc = &I3C_TransmitWordTreatment;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x104>)
 80029c0:	651a      	str	r2, [r3, #80]	; 0x50
				}
			}

			/* Check on the Rx threshold to know the Rx treatment process : byte or word */
			if (LL_I3C_GetRxFIFOThreshold(
					hi3c->Instance) == LL_I3C_RXFIFO_THRESHOLD_1_4) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetRxFIFOThreshold(
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff f82f 	bl	8001a2a <LL_I3C_GetRxFIFOThreshold>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_I3C_Ctrl_ReceiveCCC_IT+0xd6>
				/* Set byte treatment function pointer */
				hi3c->ptrRxFunc = &I3C_ReceiveByteTreatment;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_I3C_Ctrl_ReceiveCCC_IT+0x108>)
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
 80029d8:	e002      	b.n	80029e0 <HAL_I3C_Ctrl_ReceiveCCC_IT+0xdc>
			} else {
				/* Set word treatment function pointer */
				hi3c->ptrRxFunc = &I3C_ReceiveWordTreatment;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_I3C_Ctrl_ReceiveCCC_IT+0x10c>)
 80029de:	655a      	str	r2, [r3, #84]	; 0x54

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */

			/* Enable Rx process interrupts */
			I3C_Enable_IRQ(hi3c, I3C_XFER_CONTROLLER_RX_CCC_IT);
 80029e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f001 facc 	bl	8003f82 <I3C_Enable_IRQ>

			/* Initiate a Start condition */
			LL_I3C_RequestTransfer(hi3c->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f978 	bl	8001ce4 <LL_I3C_RequestTransfer>

		}
	}

	return status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	080031e1 	.word	0x080031e1
 8002a04:	08003563 	.word	0x08003563
 8002a08:	080035b3 	.word	0x080035b3
 8002a0c:	08003611 	.word	0x08003611
 8002a10:	0800365b 	.word	0x0800365b

08002a14 <HAL_I3C_Ctrl_Transmit_IT>:
 *                            (control buffer, data buffer and status buffer).
 *                            This value contain transfer data after called @ref HAL_I3C_AddDescToFrame().
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_Transmit_IT(I3C_HandleTypeDef *hi3c,
		I3C_XferTypeDef *pXferData) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]

	/* check on the handle */
	if (hi3c == NULL) {
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <HAL_I3C_Ctrl_Transmit_IT+0x1a>
		status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e053      	b.n	8002ad6 <HAL_I3C_Ctrl_Transmit_IT+0xc2>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Get I3C handle state */
		handle_state = hi3c->State;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a34:	73bb      	strb	r3, [r7, #14]

		/* Check on user parameters */
		if ((pXferData == NULL)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_I3C_Ctrl_Transmit_IT+0x38>
				|| ((pXferData->TxBuf.pBuffer == NULL)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_I3C_Ctrl_Transmit_IT+0x46>
						&& (hi3c->TxXferCount != 0U))) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_I3C_Ctrl_Transmit_IT+0x46>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a52:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e03d      	b.n	8002ad6 <HAL_I3C_Ctrl_Transmit_IT+0xc2>
		}
		/* check on the Mode */
		else if (hi3c->Mode != HAL_I3C_MODE_CONTROLLER) {
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e1b      	ldrb	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d006      	beq.n	8002a70 <HAL_I3C_Ctrl_Transmit_IT+0x5c>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a68:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e032      	b.n	8002ad6 <HAL_I3C_Ctrl_Transmit_IT+0xc2>
		}
		/* check on the State */
		else if ((handle_state != HAL_I3C_STATE_READY)
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d005      	beq.n	8002a82 <HAL_I3C_Ctrl_Transmit_IT+0x6e>
				&& (handle_state != HAL_I3C_STATE_LISTEN)) {
 8002a76:	7bbb      	ldrb	r3, [r7, #14]
 8002a78:	2b30      	cmp	r3, #48	; 0x30
 8002a7a:	d002      	beq.n	8002a82 <HAL_I3C_Ctrl_Transmit_IT+0x6e>
			status = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e029      	b.n	8002ad6 <HAL_I3C_Ctrl_Transmit_IT+0xc2>
		} else {
			/* Set handle transfer parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_BUSY_TX;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2221      	movs	r2, #33	; 0x21
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->pXferData = pXferData;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	61da      	str	r2, [r3, #28]
			hi3c->TxXferCount = hi3c->pXferData->TxBuf.Size;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
			hi3c->XferISR = I3C_Ctrl_Tx_ISR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_I3C_Ctrl_Transmit_IT+0xcc>)
 8002aa4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Check on the Tx threshold to know the Tx treatment process : byte or word */
			if (LL_I3C_GetTxFIFOThreshold(
					hi3c->Instance) == LL_I3C_TXFIFO_THRESHOLD_1_4) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetTxFIFOThreshold(
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe ffdb 	bl	8001a66 <LL_I3C_GetTxFIFOThreshold>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <HAL_I3C_Ctrl_Transmit_IT+0xaa>
				/* Set byte treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitByteTreatment;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_I3C_Ctrl_Transmit_IT+0xd0>)
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50
 8002abc:	e002      	b.n	8002ac4 <HAL_I3C_Ctrl_Transmit_IT+0xb0>
			} else {
				/* Set word treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitWordTreatment;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_I3C_Ctrl_Transmit_IT+0xd4>)
 8002ac2:	651a      	str	r2, [r3, #80]	; 0x50

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */

			/* Enable Tx process interrupts */
			I3C_Enable_IRQ(hi3c, I3C_XFER_CONTROLLER_TX_IT);
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f001 fa5b 	bl	8003f82 <I3C_Enable_IRQ>

			/* Initiate a Start condition */
			LL_I3C_RequestTransfer(hi3c->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f907 	bl	8001ce4 <LL_I3C_RequestTransfer>
		}
	}

	return status;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08003121 	.word	0x08003121
 8002ae4:	08003563 	.word	0x08003563
 8002ae8:	080035b3 	.word	0x080035b3

08002aec <HAL_I3C_Ctrl_MultipleTransfer_IT>:
 *                            buffers (control buffer, data buffers and status buffer).
 *                            This value contain transfer data after called @ref HAL_I3C_AddDescToFrame().
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_MultipleTransfer_IT(I3C_HandleTypeDef *hi3c,
		I3C_XferTypeDef *pXferData) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]

	/* check on the handle */
	if (hi3c == NULL) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x1a>
		status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e070      	b.n	8002be8 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xfc>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Get I3C handle state */
		handle_state = hi3c->State;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0c:	73bb      	strb	r3, [r7, #14]

		/* Check on user parameters */
		if ((pXferData == NULL)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00f      	beq.n	8002b34 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x48>
				|| ((pXferData->RxBuf.pBuffer == NULL)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x38>
						&& (hi3c->RxXferCount != 0U))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x48>
				|| ((pXferData->TxBuf.pBuffer == NULL)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x56>
						&& (hi3c->TxXferCount != 0U))) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x56>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b3a:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e052      	b.n	8002be8 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xfc>
		}
		/* check on the Mode */
		else if (hi3c->Mode != HAL_I3C_MODE_CONTROLLER) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e1b      	ldrb	r3, [r3, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d006      	beq.n	8002b58 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x6c>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b50:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e047      	b.n	8002be8 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xfc>
		}
		/* check on the State */
		else if ((handle_state != HAL_I3C_STATE_READY)
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d005      	beq.n	8002b6a <HAL_I3C_Ctrl_MultipleTransfer_IT+0x7e>
				&& (handle_state != HAL_I3C_STATE_LISTEN)) {
 8002b5e:	7bbb      	ldrb	r3, [r7, #14]
 8002b60:	2b30      	cmp	r3, #48	; 0x30
 8002b62:	d002      	beq.n	8002b6a <HAL_I3C_Ctrl_MultipleTransfer_IT+0x7e>
			status = HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e03e      	b.n	8002be8 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xfc>
		} else {
			/* Set handle transfer parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_BUSY_TX_RX;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2223      	movs	r2, #35	; 0x23
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->pXferData = pXferData;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	61da      	str	r2, [r3, #28]
			hi3c->TxXferCount = hi3c->pXferData->TxBuf.Size;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
			hi3c->RxXferCount = hi3c->pXferData->RxBuf.Size;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
			hi3c->XferISR = I3C_Ctrl_Multiple_Xfer_ISR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x108>)
 8002b96:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Check on the Tx threshold to know the Tx treatment process : byte or word */
			if (LL_I3C_GetTxFIFOThreshold(
					hi3c->Instance) == LL_I3C_TXFIFO_THRESHOLD_1_4) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetTxFIFOThreshold(
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe ff62 	bl	8001a66 <LL_I3C_GetTxFIFOThreshold>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xc4>
				/* Set byte treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitByteTreatment;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x10c>)
 8002bac:	651a      	str	r2, [r3, #80]	; 0x50
 8002bae:	e002      	b.n	8002bb6 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xca>
			} else {
				/* Set word treatment function pointer */
				hi3c->ptrTxFunc = &I3C_TransmitWordTreatment;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <HAL_I3C_Ctrl_MultipleTransfer_IT+0x110>)
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50
			}

			/* Check on the Rx threshold to know the Rx treatment process : byte or word */
			if (LL_I3C_GetRxFIFOThreshold(
					hi3c->Instance) == LL_I3C_RXFIFO_THRESHOLD_1_4) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetRxFIFOThreshold(
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe ff35 	bl	8001a2a <LL_I3C_GetRxFIFOThreshold>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_I3C_Ctrl_MultipleTransfer_IT+0xe2>
				/* Set byte treatment function pointer */
				hi3c->ptrRxFunc = &I3C_ReceiveByteTreatment;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x114>)
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
 8002bcc:	e002      	b.n	8002bd4 <HAL_I3C_Ctrl_MultipleTransfer_IT+0xe8>
			} else {
				/* Set word treatment function pointer */
				hi3c->ptrRxFunc = &I3C_ReceiveWordTreatment;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <HAL_I3C_Ctrl_MultipleTransfer_IT+0x118>)
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */

			/* Enable Tx and Rx process interrupts */
			I3C_Enable_IRQ(hi3c,
 8002bd4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f001 f9d2 	bl	8003f82 <I3C_Enable_IRQ>
					(I3C_XFER_CONTROLLER_TX_IT | I3C_XFER_CONTROLLER_RX_IT));

			/* Initiate a Start condition */
			LL_I3C_RequestTransfer(hi3c->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f87e 	bl	8001ce4 <LL_I3C_RequestTransfer>
		}
	}
	return status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	080032c7 	.word	0x080032c7
 8002bf8:	08003563 	.word	0x08003563
 8002bfc:	080035b3 	.word	0x080035b3
 8002c00:	08003611 	.word	0x08003611
 8002c04:	0800365b 	.word	0x0800365b

08002c08 <HAL_I3C_Ctrl_DynAddrAssign_IT>:
 * @param  dynOption  : [IN]  Parameter indicates the Dynamic address assignment option.
 *                            It can be one value of @ref I3C_DYNAMIC_ADDRESS_OPTION_DEFINITION.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_DynAddrAssign_IT(I3C_HandleTypeDef *hi3c,
		uint32_t dynOption) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	HAL_I3C_StateTypeDef handle_state;
	HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]

	/* check on parameters */
	assert_param(IS_I3C_ENTDAA_OPTION(dynOption));

	/* check on the handle */
	if (hi3c == NULL) {
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x1a>
		status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e03e      	b.n	8002ca0 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x98>
		/* Check the instance and the mode parameters */
		assert_param(IS_I3C_ALL_INSTANCE(hi3c->Instance));
		assert_param(IS_I3C_MODE(hi3c->Mode));

		/* Get I3C handle state */
		handle_state = hi3c->State;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c28:	73bb      	strb	r3, [r7, #14]

		/* check on the Mode */
		if (hi3c->Mode != HAL_I3C_MODE_CONTROLLER) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7e1b      	ldrb	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d006      	beq.n	8002c40 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x38>
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c38:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e02f      	b.n	8002ca0 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x98>
		}
		/* check on the State */
		else if ((handle_state != HAL_I3C_STATE_READY)
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d005      	beq.n	8002c52 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x4a>
				&& (handle_state != HAL_I3C_STATE_LISTEN)) {
 8002c46:	7bbb      	ldrb	r3, [r7, #14]
 8002c48:	2b30      	cmp	r3, #48	; 0x30
 8002c4a:	d002      	beq.n	8002c52 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x4a>
			status = HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e026      	b.n	8002ca0 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x98>
		} else {
			/* Set handle transfer parameters */
			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	649a      	str	r2, [r3, #72]	; 0x48
			hi3c->State = HAL_I3C_STATE_BUSY_DAA;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			hi3c->XferISR = I3C_Ctrl_DAA_ISR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_I3C_Ctrl_DynAddrAssign_IT+0xa4>)
 8002c64:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Note : The I3C interrupts must be enabled after unlocking current process to avoid the risk
			 of I3C interrupt handle execution before current process unlock */

			/* Enable Dynamic Address Assignment process interrupts */
			I3C_Enable_IRQ(hi3c, I3C_XFER_CONTROLLER_DAA_IT);
 8002c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 f989 	bl	8003f82 <I3C_Enable_IRQ>

			/* Enable arbitration header */
			LL_I3C_EnableArbitrationHeader(hi3c->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fea8 	bl	80019ca <LL_I3C_EnableArbitrationHeader>

			/* Launch a RSTDAA procedure before launch ENTDAA */
			if (dynOption == I3C_RSTDAA_THEN_ENTDAA) {
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x88>
				/* Write RSTDAA CCC information in the control register */
				LL_I3C_ControllerHandleCCC(hi3c->Instance, I3C_BROADCAST_RSTDAA,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	2200      	movs	r2, #0
 8002c88:	2106      	movs	r1, #6
 8002c8a:	f7ff f83b 	bl	8001d04 <LL_I3C_ControllerHandleCCC>
 8002c8e:	e007      	b.n	8002ca0 <HAL_I3C_Ctrl_DynAddrAssign_IT+0x98>
						0U, LL_I3C_GENERATE_RESTART);
			} else {
				/* Write ENTDAA CCC information in the control register */
				LL_I3C_ControllerHandleCCC(hi3c->Instance, I3C_BROADCAST_ENTDAA,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2107      	movs	r1, #7
 8002c9c:	f7ff f832 	bl	8001d04 <LL_I3C_ControllerHandleCCC>
						0U, LL_I3C_GENERATE_STOP);
			}
		}
	}

	return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	080033af 	.word	0x080033af

08002cb0 <HAL_I3C_Ctrl_SetDynAddr>:
 *                            for the specified I3C.
 * @param  devAddress : [IN]  Value of the dynamic address to be assigned.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
HAL_StatusTypeDef HAL_I3C_Ctrl_SetDynAddr(I3C_HandleTypeDef *hi3c,
		uint8_t devAddress) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

	/* check on the handle */
	if (hi3c == NULL) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_I3C_Ctrl_SetDynAddr+0x1c>
		status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e010      	b.n	8002cee <HAL_I3C_Ctrl_SetDynAddr+0x3e>
	} else {
		/* Check if Tx FIFO requests data */
		if (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_TXFNFF) == SET) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d107      	bne.n	8002cea <HAL_I3C_Ctrl_SetDynAddr+0x3a>
			/* Write device address in the TDR register */
			LL_I3C_TransmitData8(hi3c->Instance, devAddress);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f834 	bl	8001d50 <LL_I3C_TransmitData8>
 8002ce8:	e001      	b.n	8002cee <HAL_I3C_Ctrl_SetDynAddr+0x3e>
		} else {
			status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_I3C_GetState>:
 * @brief  Return the I3C handle state.
 * @param  hi3c      : [IN]  Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                           information for the specified I3C.
 * @retval HAL State : [OUT] Value from HAL_I3C_StateTypeDef enumeration.
 */
HAL_I3C_StateTypeDef HAL_I3C_GetState(const I3C_HandleTypeDef *hi3c) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	return hi3c->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d06:	b2db      	uxtb	r3, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I3C_GetCCCInfo>:
 * @param  pCCCInfo : [IN/OUT] Pointer to an I3C_CCCInfoTypeDef structure that contains the CCC information
 *                             updated after CCC event.
 * @retval None
 */
HAL_StatusTypeDef HAL_I3C_GetCCCInfo(I3C_HandleTypeDef *hi3c, uint32_t notifyId,
		I3C_CCCInfoTypeDef *pCCCInfo) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]

	/* check on the handle */
	if (hi3c == NULL) {
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_I3C_GetCCCInfo+0x1c>
		status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
 8002d2e:	e0a3      	b.n	8002e78 <HAL_I3C_GetCCCInfo+0x164>
	} else {
		/* Check on user parameters */
		if (pCCCInfo == NULL) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_I3C_GetCCCInfo+0x30>
			/* Update handle error code parameter */
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d3c:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
 8002d42:	e099      	b.n	8002e78 <HAL_I3C_GetCCCInfo+0x164>
		}
		/* Check the I3C state */
		else if (hi3c->State == HAL_I3C_STATE_RESET) {
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_I3C_GetCCCInfo+0x4a>
			/* Update handle error code parameter */
			hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d56:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
 8002d5c:	e08c      	b.n	8002e78 <HAL_I3C_GetCCCInfo+0x164>
		} else {
			/* Retrieve Target Dynamic Address value and Validity (target/controller) */
			if ((notifyId & EVENT_ID_DAU) == EVENT_ID_DAU) {
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <HAL_I3C_GetCCCInfo+0x76>
				pCCCInfo->DynamicAddrValid = LL_I3C_IsEnabledOwnDynAddress(
						hi3c->Instance);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->DynamicAddrValid = LL_I3C_IsEnabledOwnDynAddress(
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe fea8 	bl	8001ac2 <LL_I3C_IsEnabledOwnDynAddress>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	601a      	str	r2, [r3, #0]
				pCCCInfo->DynamicAddr = LL_I3C_GetOwnDynamicAddress(
						hi3c->Instance);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->DynamicAddr = LL_I3C_GetOwnDynamicAddress(
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fec7 	bl	8001b10 <LL_I3C_GetOwnDynamicAddress>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	605a      	str	r2, [r3, #4]
			}

			/* Retrieve Maximum Write Data Length (target) */
			if ((notifyId & EVENT_ID_SETMWL) == EVENT_ID_SETMWL) {
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_I3C_GetCCCInfo+0x90>
				pCCCInfo->MaxWriteLength = LL_I3C_GetMaxWriteLength(
						hi3c->Instance);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->MaxWriteLength = LL_I3C_GetMaxWriteLength(
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe ff06 	bl	8001baa <LL_I3C_GetMaxWriteLength>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
			/* Retrieve Maximum Read Data Length (target) */
			/*if ((notifyId & EVENT_ID_SETMRL) == EVENT_ID_SETMRL) {
				pCCCInfo->MaxReadLength = LL_I3C_GetMaxReadLength(
						hi3c->Instance);
			}*/
			if ((notifyId & EVENT_ID_SETMRL) == EVENT_ID_SETMRL) {
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_I3C_GetCCCInfo+0xa2>
				pCCCInfo->MaxReadLength = LL_I3C_PAYLOAD_2_BYTES;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db4:	60da      	str	r2, [r3, #12]
			}

			/* Retrieve Reset Action/Level on received reset pattern (target) */
			if ((notifyId & EVENT_ID_RSTACT) == EVENT_ID_RSTACT) {
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I3C_GetCCCInfo+0xbc>
				pCCCInfo->ResetAction = LL_I3C_GetResetAction(hi3c->Instance);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe ff6f 	bl	8001ca8 <LL_I3C_GetResetAction>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
			}

			/* Retrieve Activity State (target) */
			if ((notifyId & EVENT_ID_ENTASx) == EVENT_ID_ENTASx) {
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_I3C_GetCCCInfo+0xd6>
				pCCCInfo->ActivityState = LL_I3C_GetActivityState(
						hi3c->Instance);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->ActivityState = LL_I3C_GetActivityState(
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ff54 	bl	8001c8c <LL_I3C_GetActivityState>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
			}

			/* Retrieve Interrupt allowed status (target) */
			if ((notifyId & EVENT_ID_ENEC_DISEC) == EVENT_ID_ENEC_DISEC) {
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_I3C_GetCCCInfo+0x110>
				pCCCInfo->HotJoinAllowed = LL_I3C_IsEnabledHotJoin(
						hi3c->Instance);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->HotJoinAllowed = LL_I3C_IsEnabledHotJoin(
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fec2 	bl	8001b82 <LL_I3C_IsEnabledHotJoin>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
				pCCCInfo->InBandAllowed = LL_I3C_IsEnabledIBI(hi3c->Instance);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fe92 	bl	8001b32 <LL_I3C_IsEnabledIBI>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	61da      	str	r2, [r3, #28]
				pCCCInfo->CtrlRoleAllowed = LL_I3C_IsEnabledControllerRoleReq(
						hi3c->Instance);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->CtrlRoleAllowed = LL_I3C_IsEnabledControllerRoleReq(
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fe9e 	bl	8001b5a <LL_I3C_IsEnabledControllerRoleReq>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	621a      	str	r2, [r3, #32]
			}

			/* Retrieve In Band Interrupt information (controller) */
			if ((notifyId & EVENT_ID_IBI) == EVENT_ID_IBI) {
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_I3C_GetCCCInfo+0x14a>
				pCCCInfo->IBICRTgtAddr = LL_I3C_GetIBITargetAddr(
						hi3c->Instance);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->IBICRTgtAddr = LL_I3C_GetIBITargetAddr(
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ffcf 	bl	8001dd6 <LL_I3C_GetIBITargetAddr>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
				pCCCInfo->IBITgtNbPayload = LL_I3C_GetNbIBIAddData(
						hi3c->Instance);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->IBITgtNbPayload = LL_I3C_GetNbIBIAddData(
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe ffb9 	bl	8001dba <LL_I3C_GetNbIBIAddData>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
				pCCCInfo->IBITgtPayload = LL_I3C_GetIBIPayload(hi3c->Instance);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ffa5 	bl	8001da2 <LL_I3C_GetIBIPayload>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			/* Retrieve Controller role request Interrupt information (controller) */
			if ((notifyId & EVENT_ID_CR) == EVENT_ID_CR) {
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_I3C_GetCCCInfo+0x164>
				pCCCInfo->IBICRTgtAddr = LL_I3C_GetIBITargetAddr(
						hi3c->Instance);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
				pCCCInfo->IBICRTgtAddr = LL_I3C_GetIBITargetAddr(
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe ffb2 	bl	8001dd6 <LL_I3C_GetIBITargetAddr>
 8002e72:	4602      	mov	r2, r0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}
	}

	return status;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I3C_Tgt_Event_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Tgt_Event_ISR(struct __I3C_HandleTypeDef *hi3c,
		uint32_t itFlags, uint32_t itSources) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
	uint32_t tmpevent = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]

	/* I3C Rx FIFO not empty interrupt Check */
	if ((I3C_CHECK_FLAG(itFlags, HAL_I3C_FLAG_RXFNEF) != RESET)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <I3C_Tgt_Event_ISR+0x2c>
			&& (I3C_CHECK_IT_SOURCE(itSources, HAL_I3C_IT_RXFNEIE) != RESET)) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <I3C_Tgt_Event_ISR+0x2c>
		/* Call receive treatment function */
		hi3c->ptrRxFunc(hi3c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	4798      	blx	r3
	}

	/* I3C target complete controller-role hand-off procedure (direct GETACCR CCC) event management --------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CRUPDF) != RESET)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <I3C_Tgt_Event_ISR+0x52>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CRUPDIE) != RESET)) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <I3C_Tgt_Event_ISR+0x52>
		/* Clear controller-role update flag */
		LL_I3C_ClearFlag_CRUPD(hi3c->Instance);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f862 	bl	8001f90 <LL_I3C_ClearFlag_CRUPD>

		/* Set Identifier EVENT_ID_GETACCCR */
		tmpevent |= EVENT_ID_GETACCCR;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive any direct GETxxx CCC event management -------------------------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_GETF) != RESET)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <I3C_Tgt_Event_ISR+0x78>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_GETIE) != RESET)) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <I3C_Tgt_Event_ISR+0x78>
		/* Clear GETxxx CCC flag */
		LL_I3C_ClearFlag_GET(hi3c->Instance);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff f879 	bl	8001fe4 <LL_I3C_ClearFlag_GET>

		/* Set Identifier EVENT_ID_GETx */
		tmpevent |= EVENT_ID_GETx;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive get status command (direct GETSTATUS CCC) event management -----------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_STAF) != RESET)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <I3C_Tgt_Event_ISR+0x9e>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_STAIE) != RESET)) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <I3C_Tgt_Event_ISR+0x9e>
		/* Clear GETSTATUS CCC flag */
		LL_I3C_ClearFlag_STA(hi3c->Instance);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f874 	bl	8002000 <LL_I3C_ClearFlag_STA>

		/* Set Identifier EVENT_ID_GETSTATUS */
		tmpevent |= EVENT_ID_GETSTATUS;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f043 0310 	orr.w	r3, r3, #16
 8002f1e:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive a dynamic address update (ENTDAA/RSTDAA/SETNEWDA CCC) event management -----------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_DAUPDF) != RESET)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <I3C_Tgt_Event_ISR+0xc4>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_DAUPDIE) != RESET)) {
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <I3C_Tgt_Event_ISR+0xc4>
		/* Clear dynamic address update flag */
		LL_I3C_ClearFlag_DAUPD(hi3c->Instance);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f86f 	bl	800201c <LL_I3C_ClearFlag_DAUPD>

		/* Set Identifier EVENT_ID_DAU */
		tmpevent |= EVENT_ID_DAU;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive maximum write length update (direct SETMWL CCC) event management -----------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_MWLUPDF) != RESET)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <I3C_Tgt_Event_ISR+0xea>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_MWLUPDIE) != RESET)) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <I3C_Tgt_Event_ISR+0xea>
		/* Clear SETMWL CCC flag */
		LL_I3C_ClearFlag_MWLUPD(hi3c->Instance);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f86a 	bl	8002038 <LL_I3C_ClearFlag_MWLUPD>

		/* Set Identifier EVENT_ID_SETMWL */
		tmpevent |= EVENT_ID_SETMWL;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive maximum read length update(direct SETMRL CCC) event management -------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_MRLUPDF) != RESET)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <I3C_Tgt_Event_ISR+0x110>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_MRLUPDIE) != RESET)) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <I3C_Tgt_Event_ISR+0x110>
		/* Clear SETMRL CCC flag */
		LL_I3C_ClearFlag_MRLUPD(hi3c->Instance);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f865 	bl	8002054 <LL_I3C_ClearFlag_MRLUPD>

		/* Set Identifier EVENT_ID_SETMRL */
		tmpevent |= EVENT_ID_SETMRL;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f90:	617b      	str	r3, [r7, #20]
	}

	/* I3C target detect reset pattern (broadcast or direct RSTACT CCC) event management -------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_RSTF) != RESET)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <I3C_Tgt_Event_ISR+0x136>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_RSTIE) != RESET)) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <I3C_Tgt_Event_ISR+0x136>
		/* Clear reset pattern flag */
		LL_I3C_ClearFlag_RST(hi3c->Instance);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f860 	bl	8002070 <LL_I3C_ClearFlag_RST>

		/* Set Identifier EVENT_ID_RSTACT */
		tmpevent |= EVENT_ID_RSTACT;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive activity state update (direct or broadcast ENTASx) CCC event management ----------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_ASUPDF) != RESET)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I3C_Tgt_Event_ISR+0x15c>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_ASUPDIE) != RESET)) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <I3C_Tgt_Event_ISR+0x15c>
		/* Clear ENTASx CCC flag */
		LL_I3C_ClearFlag_ASUPD(hi3c->Instance);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f85b 	bl	800208c <LL_I3C_ClearFlag_ASUPD>

		/* Set Identifier EVENT_ID_ENTASx */
		tmpevent |= EVENT_ID_ENTASx;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive a direct or broadcast ENEC/DISEC CCC event management ----------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_INTUPDF) != RESET)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I3C_Tgt_Event_ISR+0x182>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_INTUPDIE) != RESET)) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <I3C_Tgt_Event_ISR+0x182>
		/* Clear ENEC/DISEC CCC flag */
		LL_I3C_ClearFlag_INTUPD(hi3c->Instance);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f856 	bl	80020a8 <LL_I3C_ClearFlag_INTUPD>

		/* Set Identifier EVENT_ID_ENEC_DISEC */
		tmpevent |= EVENT_ID_ENEC_DISEC;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003002:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive a broadcast DEFTGTS CCC event management -----------------------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_DEFF) != RESET)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I3C_Tgt_Event_ISR+0x1a8>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_DEFIE) != RESET)) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <I3C_Tgt_Event_ISR+0x1a8>
		/* Clear DEFTGTS CCC flag */
		LL_I3C_ClearFlag_DEF(hi3c->Instance);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f851 	bl	80020c4 <LL_I3C_ClearFlag_DEF>

		/* Set Identifier EVENT_ID_DEFTGTS */
		tmpevent |= EVENT_ID_DEFTGTS;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003028:	617b      	str	r3, [r7, #20]
	}

	/* I3C target receive a group addressing (broadcast DEFGRPA CCC) event management ----------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_GRPF) != RESET)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	da0b      	bge.n	8003048 <I3C_Tgt_Event_ISR+0x1c6>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_GRPIE) != RESET)) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da08      	bge.n	8003048 <I3C_Tgt_Event_ISR+0x1c6>
		/* Clear DEFGRPA CCC flag */
		LL_I3C_ClearFlag_GRP(hi3c->Instance);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f850 	bl	80020e0 <LL_I3C_ClearFlag_GRP>

		/* Set Identifier EVENT_ID_DEFGRPA */
		tmpevent |= EVENT_ID_DEFGRPA;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003046:	617b      	str	r3, [r7, #20]
	}

	/* I3C target wakeup event management ----------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_WKPF) != RESET)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I3C_Tgt_Event_ISR+0x1ec>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_WKPIE) != RESET)) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <I3C_Tgt_Event_ISR+0x1ec>
		/* Clear WKP flag */
		LL_I3C_ClearFlag_WKP(hi3c->Instance);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe ffb1 	bl	8001fc8 <LL_I3C_ClearFlag_WKP>

		/* Set Identifier EVENT_ID_WKP */
		tmpevent |= EVENT_ID_WKP;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800306c:	617b      	str	r3, [r7, #20]
	}

	if (tmpevent != 0U) {
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <I3C_Tgt_Event_ISR+0x1fa>
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
    /* Call registered callback */
    hi3c->NotifyCallback(hi3c, tmpevent);
#else
		/* Asynchronous receive CCC event Callback */
		HAL_I3C_NotifyCallback(hi3c, tmpevent);
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7fd fe36 	bl	8000ce8 <HAL_I3C_NotifyCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
	}

	/* Update handle state parameter */
	I3C_StateUpdate(hi3c);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fb3d 	bl	80036fc <I3C_StateUpdate>

	return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I3C_Ctrl_Event_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Ctrl_Event_ISR(struct __I3C_HandleTypeDef *hi3c,
		uint32_t itFlags, uint32_t itSources) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	/* I3C controller receive IBI event management ---------------------------------------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_IBIF) != RESET)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00e      	beq.n	80030c0 <I3C_Ctrl_Event_ISR+0x34>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_IBIIE) != RESET)) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <I3C_Ctrl_Event_ISR+0x34>
		/* Clear IBI request flag */
		LL_I3C_ClearFlag_IBI(hi3c->Instance);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe ff51 	bl	8001f58 <LL_I3C_ClearFlag_IBI>
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
    /* Call registered callback */
    hi3c->NotifyCallback(hi3c, EVENT_ID_IBI);
#else
		/* Asynchronous IBI event Callback */
		HAL_I3C_NotifyCallback(hi3c, EVENT_ID_IBI);
 80030b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7fd fe14 	bl	8000ce8 <HAL_I3C_NotifyCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
	}

	/* I3C controller controller-role request event management ---------------------------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CRF) != RESET)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <I3C_Ctrl_Event_ISR+0x5c>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CRIE) != RESET)) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <I3C_Ctrl_Event_ISR+0x5c>
		/* Clear controller-role request flag */
		LL_I3C_ClearFlag_CR(hi3c->Instance);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ff4b 	bl	8001f74 <LL_I3C_ClearFlag_CR>
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
    /* Call registered callback */
    hi3c->NotifyCallback(hi3c, EVENT_ID_CR);
#else
		/* Asynchronous controller-role event Callback */
		HAL_I3C_NotifyCallback(hi3c, EVENT_ID_CR);
 80030de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7fd fe00 	bl	8000ce8 <HAL_I3C_NotifyCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
	}

	/* I3C controller hot-join event management ------------------------------------------------------------------------*/
	if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_HJF) != RESET)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <I3C_Ctrl_Event_ISR+0x84>
			&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_HJIE) != RESET)) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <I3C_Ctrl_Event_ISR+0x84>
		/* Clear hot-join flag */
		LL_I3C_ClearFlag_HJ(hi3c->Instance);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe ff53 	bl	8001fac <LL_I3C_ClearFlag_HJ>
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
    /* Call registered callback */
    hi3c->NotifyCallback(hi3c, EVENT_ID_HJ);
#else
		/* Asynchronous hot-join event Callback */
		HAL_I3C_NotifyCallback(hi3c, EVENT_ID_HJ);
 8003106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fd fdec 	bl	8000ce8 <HAL_I3C_NotifyCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
	}

	/* Update handle state parameter */
	I3C_StateUpdate(hi3c);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 faf3 	bl	80036fc <I3C_StateUpdate>

	return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I3C_Ctrl_Tx_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Ctrl_Tx_ISR(struct __I3C_HandleTypeDef *hi3c,
		uint32_t itFlags, uint32_t itSources) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	/* Check that a Tx process is ongoing */
	if (hi3c->State == HAL_I3C_STATE_BUSY_TX) {
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b21      	cmp	r3, #33	; 0x21
 8003136:	d14e      	bne.n	80031d6 <I3C_Ctrl_Tx_ISR+0xb6>
		/* Check if Control FIFO requests data */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CFNFF) != RESET)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <I3C_Ctrl_Tx_ISR+0x3a>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CFNFIE) != RESET)) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <I3C_Ctrl_Tx_ISR+0x3a>
			if (hi3c->ControlXferCount > 0U) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <I3C_Ctrl_Tx_ISR+0x3a>
				/* Call control data treatment function */
				I3C_ControlDataTreatment(hi3c);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 faaf 	bl	80036b8 <I3C_ControlDataTreatment>
			}
		}

		/* I3C Tx FIFO not full interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_TXFNFF) != RESET)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <I3C_Ctrl_Tx_ISR+0x5e>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_TXFNFIE) != RESET)) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <I3C_Ctrl_Tx_ISR+0x5e>
			if (hi3c->TxXferCount > 0U) {
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <I3C_Ctrl_Tx_ISR+0x5e>
				/* Call Transmit treatment function */
				hi3c->ptrTxFunc(hi3c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	4798      	blx	r3
			}
		}

		/* I3C target frame complete event Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_FCF) != RESET)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	2b00      	cmp	r3, #0
 8003186:	d026      	beq.n	80031d6 <I3C_Ctrl_Tx_ISR+0xb6>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_FCIE) != RESET)) {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318e:	2b00      	cmp	r3, #0
 8003190:	d021      	beq.n	80031d6 <I3C_Ctrl_Tx_ISR+0xb6>
			/* Clear frame complete flag */
			LL_I3C_ClearFlag_FC(hi3c->Instance);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fec2 	bl	8001f20 <LL_I3C_ClearFlag_FC>

			if (hi3c->ControlXferCount == 0U) {
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <I3C_Ctrl_Tx_ISR+0xa0>
				/* Disable Tx process interrupts */
				I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_TX_IT);
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 ff73 	bl	8004092 <I3C_Disable_IRQ>

				/* Update handle state parameter */
				I3C_StateUpdate(hi3c);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 faa5 	bl	80036fc <I3C_StateUpdate>

				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	649a      	str	r2, [r3, #72]	; 0x48

				/* Call the transmit complete callback to inform upper layer of End of Transfer */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
        hi3c->CtrlTxCpltCallback(hi3c);
#else
				HAL_I3C_CtrlTxCpltCallback(hi3c);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff f893 	bl	80022e4 <HAL_I3C_CtrlTxCpltCallback>
 80031be:	e00a      	b.n	80031d6 <I3C_Ctrl_Tx_ISR+0xb6>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
			} else {
				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	649a      	str	r2, [r3, #72]	; 0x48

				/* Call the transmit complete callback */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
        hi3c->CtrlTxCpltCallback(hi3c);
#else
				HAL_I3C_CtrlTxCpltCallback(hi3c);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff f88c 	bl	80022e4 <HAL_I3C_CtrlTxCpltCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */

				/* Then Initiate a Start condition */
				LL_I3C_RequestTransfer(hi3c->Instance);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fd87 	bl	8001ce4 <LL_I3C_RequestTransfer>

			}
		}
	}
	return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I3C_Ctrl_Rx_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Ctrl_Rx_ISR(struct __I3C_HandleTypeDef *hi3c,
		uint32_t itFlags, uint32_t itSources) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
	/* Check that an Rx process is ongoing */
	if (hi3c->State == HAL_I3C_STATE_BUSY_RX) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b22      	cmp	r3, #34	; 0x22
 80031f6:	d161      	bne.n	80032bc <I3C_Ctrl_Rx_ISR+0xdc>
		/* Check if Control FIFO requests data */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CFNFF) != RESET)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <I3C_Ctrl_Rx_ISR+0x3a>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CFNFIE) != RESET)) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <I3C_Ctrl_Rx_ISR+0x3a>
			if (hi3c->ControlXferCount > 0U) {
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <I3C_Ctrl_Rx_ISR+0x3a>
				/* Call control data treatment function */
				I3C_ControlDataTreatment(hi3c);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fa4f 	bl	80036b8 <I3C_ControlDataTreatment>
			}
		}

		/* I3C Rx FIFO not empty interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, HAL_I3C_FLAG_RXFNEF) != RESET)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <I3C_Ctrl_Rx_ISR+0x5e>
				&& (I3C_CHECK_IT_SOURCE(itSources, HAL_I3C_IT_RXFNEIE) != RESET)) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <I3C_Ctrl_Rx_ISR+0x5e>
			if (hi3c->RxXferCount > 0U) {
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <I3C_Ctrl_Rx_ISR+0x5e>
				/* Call receive treatment function */
				hi3c->ptrRxFunc(hi3c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	4798      	blx	r3
			}
		}

		/* I3C Tx FIFO not full interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_TXFNFF) != RESET)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <I3C_Ctrl_Rx_ISR+0x82>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_TXFNFIE) != RESET)) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <I3C_Ctrl_Rx_ISR+0x82>
			if (hi3c->TxXferCount > 0U) {
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <I3C_Ctrl_Rx_ISR+0x82>
				/* Call Transmit treatment function */
				hi3c->ptrTxFunc(hi3c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	4798      	blx	r3
			}
		}

		/* I3C target frame complete event Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_FCF) != RESET)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d027      	beq.n	80032bc <I3C_Ctrl_Rx_ISR+0xdc>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_FCIE) != RESET)) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d022      	beq.n	80032bc <I3C_Ctrl_Rx_ISR+0xdc>
			/* Clear frame complete flag */
			LL_I3C_ClearFlag_FC(hi3c->Instance);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fe50 	bl	8001f20 <LL_I3C_ClearFlag_FC>

			if (hi3c->ControlXferCount == 0U) {
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10e      	bne.n	80032a6 <I3C_Ctrl_Rx_ISR+0xc6>
				/* Disable Rx process interrupts */
				I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_RX_CCC_IT);
 8003288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 ff00 	bl	8004092 <I3C_Disable_IRQ>

				/* Update handle state parameter */
				I3C_StateUpdate(hi3c);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa32 	bl	80036fc <I3C_StateUpdate>

				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	649a      	str	r2, [r3, #72]	; 0x48

				/* Call the receive complete callback */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
        hi3c->CtrlRxCpltCallback(hi3c);
#else
				HAL_I3C_CtrlRxCpltCallback(hi3c);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff f82a 	bl	80022f8 <HAL_I3C_CtrlRxCpltCallback>
 80032a4:	e00a      	b.n	80032bc <I3C_Ctrl_Rx_ISR+0xdc>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
			} else {
				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	649a      	str	r2, [r3, #72]	; 0x48

				/* Call the receive complete callback */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
        hi3c->CtrlRxCpltCallback(hi3c);
#else
				HAL_I3C_CtrlRxCpltCallback(hi3c);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff f823 	bl	80022f8 <HAL_I3C_CtrlRxCpltCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */

				/* Then Initiate a Start condition */
				LL_I3C_RequestTransfer(hi3c->Instance);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fd14 	bl	8001ce4 <LL_I3C_RequestTransfer>
			}
		}
	}
	return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <I3C_Ctrl_Multiple_Xfer_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Ctrl_Multiple_Xfer_ISR(
		struct __I3C_HandleTypeDef *hi3c, uint32_t itFlags, uint32_t itSources) {
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
	/* Check that a Tx/Rx process is ongoing */
	if (hi3c->State == HAL_I3C_STATE_BUSY_TX_RX) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b23      	cmp	r3, #35	; 0x23
 80032dc:	d162      	bne.n	80033a4 <I3C_Ctrl_Multiple_Xfer_ISR+0xde>
		/* Check if Control FIFO requests data */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CFNFF) != RESET)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <I3C_Ctrl_Multiple_Xfer_ISR+0x3a>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CFNFIE) != RESET)) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <I3C_Ctrl_Multiple_Xfer_ISR+0x3a>
			if (hi3c->ControlXferCount > 0U) {
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <I3C_Ctrl_Multiple_Xfer_ISR+0x3a>
				/* Call control data treatment function */
				I3C_ControlDataTreatment(hi3c);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f9dc 	bl	80036b8 <I3C_ControlDataTreatment>
			}
		}

		/* I3C Tx FIFO not full interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_TXFNFF) != RESET)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <I3C_Ctrl_Multiple_Xfer_ISR+0x5e>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_TXFNFIE) != RESET)) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <I3C_Ctrl_Multiple_Xfer_ISR+0x5e>
			if (hi3c->TxXferCount > 0U) {
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <I3C_Ctrl_Multiple_Xfer_ISR+0x5e>
				/* Call Transmit treatment function */
				hi3c->ptrTxFunc(hi3c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	4798      	blx	r3
			}
		}

		/* I3C Rx FIFO not empty interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, HAL_I3C_FLAG_RXFNEF) != RESET)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <I3C_Ctrl_Multiple_Xfer_ISR+0x82>
				&& (I3C_CHECK_IT_SOURCE(itSources, HAL_I3C_IT_RXFNEIE) != RESET)) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <I3C_Ctrl_Multiple_Xfer_ISR+0x82>
			if (hi3c->RxXferCount > 0U) {
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <I3C_Ctrl_Multiple_Xfer_ISR+0x82>
				/* Call receive treatment function */
				hi3c->ptrRxFunc(hi3c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	4798      	blx	r3
			}
		}

		/* I3C target frame complete event Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_FCF) != RESET)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <I3C_Ctrl_Multiple_Xfer_ISR+0xde>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_FCIE) != RESET)) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <I3C_Ctrl_Multiple_Xfer_ISR+0xde>
			/* Clear frame complete flag */
			LL_I3C_ClearFlag_FC(hi3c->Instance);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fddd 	bl	8001f20 <LL_I3C_ClearFlag_FC>

			if (hi3c->ControlXferCount == 0U) {
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <I3C_Ctrl_Multiple_Xfer_ISR+0xce>
				/* Disable Tx process interrupts */
				I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_TX_IT);
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fe8e 	bl	8004092 <I3C_Disable_IRQ>

				/* Disable Rx process interrupts */
				I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_RX_CCC_IT);
 8003376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fe89 	bl	8004092 <I3C_Disable_IRQ>

				/* Update handle state parameter */
				I3C_StateUpdate(hi3c);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f9bb 	bl	80036fc <I3C_StateUpdate>

				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	649a      	str	r2, [r3, #72]	; 0x48

				/* Call the transmit, receive complete callback to inform upper layer of End of Transfer */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
        hi3c->CtrlMultipleXferCpltCallback(hi3c);
#else
				HAL_I3C_CtrlMultipleXferCpltCallback(hi3c);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7fe ffbd 	bl	800230c <HAL_I3C_CtrlMultipleXferCpltCallback>
 8003392:	e007      	b.n	80033a4 <I3C_Ctrl_Multiple_Xfer_ISR+0xde>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
			} else {
				hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	649a      	str	r2, [r3, #72]	; 0x48

				/* Then Initiate a Start condition */
				LL_I3C_RequestTransfer(hi3c->Instance);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fca0 	bl	8001ce4 <LL_I3C_RequestTransfer>
			}
		}
	}
	return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <I3C_Ctrl_DAA_ISR>:
 * @param  itFlags    : [IN]  Interrupt flags to handle.
 * @param  itSources  : [IN]  Interrupt sources enabled.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Ctrl_DAA_ISR(struct __I3C_HandleTypeDef *hi3c,
		uint32_t itFlags, uint32_t itSources) {
 80033ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b2:	b08e      	sub	sp, #56	; 0x38
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24
 80033b8:	6239      	str	r1, [r7, #32]
 80033ba:	61fa      	str	r2, [r7, #28]
	uint64_t target_payload = 0U;
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* Check that a Dynamic Address Assignment process is ongoing */
	if (hi3c->State == HAL_I3C_STATE_BUSY_DAA) {
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b24      	cmp	r3, #36	; 0x24
 80033d2:	f040 809a 	bne.w	800350a <I3C_Ctrl_DAA_ISR+0x15c>
		/* I3C Control FIFO not full interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_CFNFF) != RESET)
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <I3C_Ctrl_DAA_ISR+0x4c>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_CFNFIE) != RESET)) {
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <I3C_Ctrl_DAA_ISR+0x4c>
			/* Write ENTDAA CCC information in the control register */
			LL_I3C_ControllerHandleCCC(hi3c->Instance, I3C_BROADCAST_ENTDAA, 0U,
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033f2:	2200      	movs	r2, #0
 80033f4:	2107      	movs	r1, #7
 80033f6:	f7fe fc85 	bl	8001d04 <LL_I3C_ControllerHandleCCC>
					LL_I3C_GENERATE_STOP);
		}

		/* I3C Tx FIFO not full interrupt Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_TXFNFF) != RESET)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d065      	beq.n	80034d0 <I3C_Ctrl_DAA_ISR+0x122>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_TXFNFIE) != RESET)) {
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d060      	beq.n	80034d0 <I3C_Ctrl_DAA_ISR+0x122>
			/* Check on the Rx FIFO threshold to know the Dynamic Address Assignment treatment process : byte or word */
			if (LL_I3C_GetRxFIFOThreshold(
					hi3c->Instance) == LL_I3C_RXFIFO_THRESHOLD_1_4) {
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	681b      	ldr	r3, [r3, #0]
			if (LL_I3C_GetRxFIFOThreshold(
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fb09 	bl	8001a2a <LL_I3C_GetRxFIFOThreshold>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d12e      	bne.n	800347c <I3C_Ctrl_DAA_ISR+0xce>
				/* For loop to get target payload */
				for (uint32_t index = 0U; index < 8U; index++) {
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003422:	e027      	b.n	8003474 <I3C_Ctrl_DAA_ISR+0xc6>
					/* Retrieve payload byte by byte */
					target_payload |=
							(uint64_t) ((uint64_t) LL_I3C_ReceiveData8(
									hi3c->Instance) << (index * 8U));
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
							(uint64_t) ((uint64_t) LL_I3C_ReceiveData8(
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fc84 	bl	8001d36 <LL_I3C_ReceiveData8>
 800342e:	4603      	mov	r3, r0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2200      	movs	r2, #0
 8003434:	4698      	mov	r8, r3
 8003436:	4691      	mov	r9, r2
									hi3c->Instance) << (index * 8U));
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	00db      	lsls	r3, r3, #3
							(uint64_t) ((uint64_t) LL_I3C_ReceiveData8(
 800343c:	f1a3 0120 	sub.w	r1, r3, #32
 8003440:	f1c3 0220 	rsb	r2, r3, #32
 8003444:	fa09 f503 	lsl.w	r5, r9, r3
 8003448:	fa08 f101 	lsl.w	r1, r8, r1
 800344c:	430d      	orrs	r5, r1
 800344e:	fa28 f202 	lsr.w	r2, r8, r2
 8003452:	4315      	orrs	r5, r2
 8003454:	fa08 f403 	lsl.w	r4, r8, r3
					target_payload |=
 8003458:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800345c:	ea42 0104 	orr.w	r1, r2, r4
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	432b      	orrs	r3, r5
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800346a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				for (uint32_t index = 0U; index < 8U; index++) {
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	3301      	adds	r3, #1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	2b07      	cmp	r3, #7
 8003478:	d9d4      	bls.n	8003424 <I3C_Ctrl_DAA_ISR+0x76>
 800347a:	e024      	b.n	80034c6 <I3C_Ctrl_DAA_ISR+0x118>
				}
			} else {
				/* Retrieve first 32 bits payload */
				target_payload = (uint64_t) LL_I3C_ReceiveData32(
						hi3c->Instance);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	681b      	ldr	r3, [r3, #0]
				target_payload = (uint64_t) LL_I3C_ReceiveData32(
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fc74 	bl	8001d6e <LL_I3C_ReceiveData32>
 8003486:	4603      	mov	r3, r0
 8003488:	2200      	movs	r2, #0
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003492:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

				/* Retrieve second 32 bits payload */
				target_payload |= (uint64_t) ((uint64_t) LL_I3C_ReceiveData32(
						hi3c->Instance) << 32U);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	681b      	ldr	r3, [r3, #0]
				target_payload |= (uint64_t) ((uint64_t) LL_I3C_ReceiveData32(
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fc67 	bl	8001d6e <LL_I3C_ReceiveData32>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2200      	movs	r2, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	617a      	str	r2, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	6939      	ldr	r1, [r7, #16]
 80034b2:	000b      	movs	r3, r1
 80034b4:	2200      	movs	r2, #0
 80034b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034ba:	ea40 0a02 	orr.w	sl, r0, r2
 80034be:	ea41 0b03 	orr.w	fp, r1, r3
 80034c2:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30

			/* Call the corresponding callback */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
      hi3c->TgtReqDynamicAddrCallback(hi3c, target_payload);
#else
			HAL_I3C_TgtReqDynamicAddrCallback(hi3c, target_payload);
 80034c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034cc:	f7fd fbdc 	bl	8000c88 <HAL_I3C_TgtReqDynamicAddrCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS */
		}

		/* I3C frame complete event Check */
		if ((I3C_CHECK_FLAG(itFlags, I3C_EVR_FCF) != RESET)
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d017      	beq.n	800350a <I3C_Ctrl_DAA_ISR+0x15c>
				&& (I3C_CHECK_IT_SOURCE(itSources, I3C_IER_FCIE) != RESET)) {
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <I3C_Ctrl_DAA_ISR+0x15c>
			/* Clear frame complete flag */
			LL_I3C_ClearFlag_FC(hi3c->Instance);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fd19 	bl	8001f20 <LL_I3C_ClearFlag_FC>

			/* Disable Dynamic Address Assignment process interrupts */
			I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_DAA_IT);
 80034ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f4:	f000 fdcd 	bl	8004092 <I3C_Disable_IRQ>

			/* Update handle state parameter */
			I3C_StateUpdate(hi3c);
 80034f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034fa:	f000 f8ff 	bl	80036fc <I3C_StateUpdate>

			hi3c->ErrorCode = HAL_I3C_ERROR_NONE;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2200      	movs	r2, #0
 8003502:	649a      	str	r2, [r3, #72]	; 0x48

			/* Call the Dynamic Address Assignment complete callback */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1U)
      hi3c->CtrlDAACpltCallback(hi3c);
#else
			HAL_I3C_CtrlDAACpltCallback(hi3c);
 8003504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003506:	f7fd fbe3 	bl	8000cd0 <HAL_I3C_CtrlDAACpltCallback>
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS == 1U */
		}
	}
	return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3738      	adds	r7, #56	; 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003516 <I3C_DMAAbort>:
 * @brief DMA I3C communication abort callback to be called at end of DMA Abort procedure.
 * @param  hdma : [IN] Pointer to a DMA_HandleTypeDef structure that contains the configuration information
 *                     for the specified DMA channel.
 * @retval None
 */
static void I3C_DMAAbort(DMA_HandleTypeDef *hdma) {
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
	/* Derogation MISRAC2012-Rule-11.5 */
	I3C_HandleTypeDef *hi3c =
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	60fb      	str	r3, [r7, #12]
			(I3C_HandleTypeDef*) (((DMA_HandleTypeDef*) hdma)->Parent);

	/* Reset Tx DMA AbortCpltCallback */
	if (hi3c->hdmatx != NULL) {
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <I3C_DMAAbort+0x1e>
		hi3c->hdmatx->XferAbortCallback = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2200      	movs	r2, #0
 8003532:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	/* Reset Rx DMA AbortCpltCallback */
	if (hi3c->hdmarx != NULL) {
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <I3C_DMAAbort+0x2e>
		hi3c->hdmarx->XferAbortCallback = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2200      	movs	r2, #0
 8003542:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	/* Reset control DMA AbortCpltCallback */
	if (hi3c->hdmacr != NULL) {
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <I3C_DMAAbort+0x3e>
		hi3c->hdmacr->XferAbortCallback = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	2200      	movs	r2, #0
 8003552:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	I3C_TreatErrorCallback(hi3c);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fedf 	bl	8004318 <I3C_TreatErrorCallback>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <I3C_TransmitByteTreatment>:
 * @brief  I3C transmit by byte.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_TransmitByteTreatment(I3C_HandleTypeDef *hi3c) {
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	/* Check TX FIFO not full flag */
	while ((__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_TXFNFF) == SET)
 800356a:	e013      	b.n	8003594 <I3C_TransmitByteTreatment+0x32>
			&& (hi3c->TxXferCount > 0U)) {
		/* Write Tx buffer data to transmit register */
		LL_I3C_TransmitData8(hi3c->Instance, *hi3c->pXferData->TxBuf.pBuffer);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7fe fbe8 	bl	8001d50 <LL_I3C_TransmitData8>

		/* Increment Buffer pointer */
		hi3c->pXferData->TxBuf.pBuffer++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	3201      	adds	r2, #1
 8003588:	611a      	str	r2, [r3, #16]

		/* Decrement remaining bytes counter */
		hi3c->TxXferCount--;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
	while ((__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_TXFNFF) == SET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	f003 0310 	and.w	r3, r3, #16
			&& (hi3c->TxXferCount > 0U)) {
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d103      	bne.n	80035aa <I3C_TransmitByteTreatment+0x48>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e0      	bne.n	800356c <I3C_TransmitByteTreatment+0xa>
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <I3C_TransmitWordTreatment>:
 * @brief  I3C transmit by word.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_TransmitWordTreatment(I3C_HandleTypeDef *hi3c) {
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	/* Check TX FIFO not full flag */
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_TXFNFF) == SET) {
 80035ba:	e01d      	b.n	80035f8 <I3C_TransmitWordTreatment+0x46>
		/* Write Tx buffer data to transmit register */
		LL_I3C_TransmitData32(hi3c->Instance,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
				*((uint32_t*) hi3c->pXferData->TxBuf.pBuffer));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	691b      	ldr	r3, [r3, #16]
		LL_I3C_TransmitData32(hi3c->Instance,
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7fe fbdb 	bl	8001d86 <LL_I3C_TransmitData32>

		/* Increment Buffer pointer */
		hi3c->pXferData->TxBuf.pBuffer += sizeof(uint32_t);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	3204      	adds	r2, #4
 80035dc:	611a      	str	r2, [r3, #16]

		if (hi3c->TxXferCount < sizeof(uint32_t)) {
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d803      	bhi.n	80035ee <I3C_TransmitWordTreatment+0x3c>
			hi3c->TxXferCount = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
 80035ec:	e004      	b.n	80035f8 <I3C_TransmitWordTreatment+0x46>
		} else {
			/* Decrement remaining bytes counter */
			hi3c->TxXferCount -= sizeof(uint32_t);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	1f1a      	subs	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_TXFNFF) == SET) {
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b10      	cmp	r3, #16
 8003604:	d0da      	beq.n	80035bc <I3C_TransmitWordTreatment+0xa>
		}
	}
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I3C_ReceiveByteTreatment>:
 * @brief  I3C receive by byte.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_ReceiveByteTreatment(I3C_HandleTypeDef *hi3c) {
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* Check RX FIFO not empty flag */
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_RXFNEF) == SET) {
 8003618:	e013      	b.n	8003642 <I3C_ReceiveByteTreatment+0x32>
		/* Store received bytes in the Rx buffer */
		*hi3c->pXferData->RxBuf.pBuffer = LL_I3C_ReceiveData8(hi3c->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	699c      	ldr	r4, [r3, #24]
 8003624:	4610      	mov	r0, r2
 8003626:	f7fe fb86 	bl	8001d36 <LL_I3C_ReceiveData8>
 800362a:	4603      	mov	r3, r0
 800362c:	7023      	strb	r3, [r4, #0]

		/* Increment Buffer pointer */
		hi3c->pXferData->RxBuf.pBuffer++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	3201      	adds	r2, #1
 8003636:	619a      	str	r2, [r3, #24]

		/* Decrement remaining bytes counter */
		hi3c->RxXferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_RXFNEF) == SET) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b20      	cmp	r3, #32
 800364e:	d0e4      	beq.n	800361a <I3C_ReceiveByteTreatment+0xa>
	}
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}

0800365a <I3C_ReceiveWordTreatment>:
 * @brief  I3C receive by word.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_ReceiveWordTreatment(I3C_HandleTypeDef *hi3c) {
 800365a:	b590      	push	{r4, r7, lr}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
	/* Check RX FIFO not empty flag */
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_RXFNEF) == SET) {
 8003662:	e01d      	b.n	80036a0 <I3C_ReceiveWordTreatment+0x46>
		/* Store received bytes in the Rx buffer */
		*((uint32_t*) hi3c->pXferData->RxBuf.pBuffer) = LL_I3C_ReceiveData32(
				hi3c->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
		*((uint32_t*) hi3c->pXferData->RxBuf.pBuffer) = LL_I3C_ReceiveData32(
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	699c      	ldr	r4, [r3, #24]
 800366e:	4610      	mov	r0, r2
 8003670:	f7fe fb7d 	bl	8001d6e <LL_I3C_ReceiveData32>
 8003674:	4603      	mov	r3, r0
 8003676:	6023      	str	r3, [r4, #0]

		/* Increment Buffer pointer */
		hi3c->pXferData->RxBuf.pBuffer += sizeof(uint32_t);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	3204      	adds	r2, #4
 8003684:	619a      	str	r2, [r3, #24]

		if (hi3c->RxXferCount > sizeof(uint32_t)) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	2b04      	cmp	r3, #4
 800368c:	d905      	bls.n	800369a <I3C_ReceiveWordTreatment+0x40>
			/* Decrement remaining bytes counter */
			hi3c->RxXferCount -= sizeof(uint32_t);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	1f1a      	subs	r2, r3, #4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
 8003698:	e002      	b.n	80036a0 <I3C_ReceiveWordTreatment+0x46>
		} else {
			/* Reset counter as last modulo word Rx data received */
			hi3c->RxXferCount = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_RXFNEF) == SET) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d0da      	beq.n	8003664 <I3C_ReceiveWordTreatment+0xa>
		}
	}
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <I3C_ControlDataTreatment>:
 * @brief  I3C Control data treatment.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_ControlDataTreatment(I3C_HandleTypeDef *hi3c) {
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	/* Check if Control FIFO requests data */
	if (__HAL_I3C_GET_FLAG(hi3c, HAL_I3C_FLAG_CFNFF) == SET) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d110      	bne.n	80036f0 <I3C_ControlDataTreatment+0x38>
		/* Decrement remaining control buffer data counter */
		hi3c->ControlXferCount--;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	1e5a      	subs	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

		/* Write Control buffer data to control register */
		WRITE_REG(hi3c->Instance->CR, *hi3c->pXferData->CtrlBuf.pBuffer);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	601a      	str	r2, [r3, #0]

		/* Increment Buffer pointer */
		hi3c->pXferData->CtrlBuf.pBuffer++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	3204      	adds	r2, #4
 80036ee:	601a      	str	r2, [r3, #0]
	}
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I3C_StateUpdate>:
 * @brief  I3C state update.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_StateUpdate(I3C_HandleTypeDef *hi3c) {
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	/* Check on previous state */
	if (hi3c->PreviousState == HAL_I3C_STATE_LISTEN) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d10f      	bne.n	8003730 <I3C_StateUpdate+0x34>
		/* Set state to listen */
		hi3c->State = HAL_I3C_STATE_LISTEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2230      	movs	r2, #48	; 0x30
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		/* Check the I3C mode */
		if (hi3c->Mode == HAL_I3C_MODE_TARGET) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7e1b      	ldrb	r3, [r3, #24]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d103      	bne.n	8003728 <I3C_StateUpdate+0x2c>
			/* Store the target event treatment function */
			hi3c->XferISR = I3C_Tgt_Event_ISR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <I3C_StateUpdate+0x50>)
 8003724:	64da      	str	r2, [r3, #76]	; 0x4c
		hi3c->State = HAL_I3C_STATE_READY;

		/* Reset XferISR */
		hi3c->XferISR = NULL;
	}
}
 8003726:	e00a      	b.n	800373e <I3C_StateUpdate+0x42>
			hi3c->XferISR = I3C_Ctrl_Event_ISR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <I3C_StateUpdate+0x54>)
 800372c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800372e:	e006      	b.n	800373e <I3C_StateUpdate+0x42>
		hi3c->State = HAL_I3C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2210      	movs	r2, #16
 8003734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		hi3c->XferISR = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	08002e83 	.word	0x08002e83
 8003750:	0800308d 	.word	0x0800308d

08003754 <I3C_GetErrorSources>:
 * @brief  I3C get error source.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_GetErrorSources(I3C_HandleTypeDef *hi3c) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* Check on the I3C mode */
	switch (hi3c->Mode) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e1b      	ldrb	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d002      	beq.n	800376a <I3C_GetErrorSources+0x16>
 8003764:	2b02      	cmp	r3, #2
 8003766:	d039      	beq.n	80037dc <I3C_GetErrorSources+0x88>

		break;
	}

	default: {
		break;
 8003768:	e04a      	b.n	8003800 <I3C_GetErrorSources+0xac>
		if (LL_I3C_IsActiveFlag_DERR(hi3c->Instance) == 1U) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fbc2 	bl	8001ef8 <LL_I3C_IsActiveFlag_DERR>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <I3C_GetErrorSources+0x32>
			hi3c->ErrorCode |= HAL_I3C_ERROR_DATA_HAND_OFF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	649a      	str	r2, [r3, #72]	; 0x48
		if (LL_I3C_IsActiveFlag_DNACK(hi3c->Instance) == 1U) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fba0 	bl	8001ed0 <LL_I3C_IsActiveFlag_DNACK>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <I3C_GetErrorSources+0x4e>
			hi3c->ErrorCode |= HAL_I3C_ERROR_DATA_NACK;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	649a      	str	r2, [r3, #72]	; 0x48
		if (LL_I3C_IsActiveFlag_ANACK(hi3c->Instance) == 1U) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fb7e 	bl	8001ea8 <LL_I3C_IsActiveFlag_ANACK>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <I3C_GetErrorSources+0x6a>
			hi3c->ErrorCode |= HAL_I3C_ERROR_ADDRESS_NACK;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	649a      	str	r2, [r3, #72]	; 0x48
		if (LL_I3C_IsActiveFlag_COVR(hi3c->Instance) == 1U) {
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fb5d 	bl	8001e82 <LL_I3C_IsActiveFlag_COVR>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <I3C_GetErrorSources+0xa6>
			hi3c->ErrorCode |= HAL_I3C_ERROR_COVR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 80037da:	e00e      	b.n	80037fa <I3C_GetErrorSources+0xa6>
		if (LL_I3C_IsActiveFlag_STALL(hi3c->Instance) == 1U) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fb28 	bl	8001e36 <LL_I3C_IsActiveFlag_STALL>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <I3C_GetErrorSources+0xaa>
			hi3c->ErrorCode |= HAL_I3C_ERROR_STALL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 80037f8:	e001      	b.n	80037fe <I3C_GetErrorSources+0xaa>
		break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <I3C_GetErrorSources+0xac>
		break;
 80037fe:	bf00      	nop
	}
	}

	/* I3C Rx FIFO Over-Run or Tx FIFO Under-Run error */
	if (LL_I3C_IsActiveFlag_DOVR(hi3c->Instance) == 1U) {
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fb29 	bl	8001e5c <LL_I3C_IsActiveFlag_DOVR>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I3C_GetErrorSources+0xc8>
		hi3c->ErrorCode |= HAL_I3C_ERROR_DOVR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* I3C Protocol error */
	if (LL_I3C_IsActiveFlag_PERR(hi3c->Instance) == 1U) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe faf5 	bl	8001e10 <LL_I3C_IsActiveFlag_PERR>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <I3C_GetErrorSources+0xf2>
		hi3c->ErrorCode |= (I3C_SER_PERR
				| LL_I3C_GetMessageErrorCode(hi3c->Instance));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fadf 	bl	8001df4 <LL_I3C_GetMessageErrorCode>
 8003836:	4603      	mov	r3, r0
 8003838:	f043 0210 	orr.w	r2, r3, #16
		hi3c->ErrorCode |= (I3C_SER_PERR
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	649a      	str	r2, [r3, #72]	; 0x48
	}
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <I3C_Xfer_PriorPreparation>:
 * @param  counter    : [IN]  Number of devices or commands to treat.
 * @param  option     : [IN]  Parameter indicates the transfer option.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_Xfer_PriorPreparation(I3C_HandleTypeDef *hi3c,
		uint8_t counter, uint32_t option) {
 800384e:	b580      	push	{r7, lr}
 8003850:	b08c      	sub	sp, #48	; 0x30
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	460b      	mov	r3, r1
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t current_tx_index = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t global_tx_size = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t global_rx_size = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
	uint32_t nb_tx_frame = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
	uint32_t direction;

	for (uint32_t descr_index = 0U; descr_index < counter; descr_index++) {
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e123      	b.n	8003ac0 <I3C_Xfer_PriorPreparation+0x272>
		/* Direct CCC command */
		if ((option & I3C_OPERATION_TYPE_MASK) == LL_I3C_CONTROLLER_MTYPE_DIRECT) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 800387e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003882:	d17f      	bne.n	8003984 <I3C_Xfer_PriorPreparation+0x136>
			/* Update direction of frame */
			direction = hi3c->pCCCDesc[descr_index].Direction;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	617b      	str	r3, [r7, #20]

			/* Direction read with Define byte */
			if (((option & I3C_DEFINE_BYTE_MASK) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d034      	beq.n	8003906 <I3C_Xfer_PriorPreparation+0xb8>
					&& (direction == HAL_I3C_DIRECTION_READ)) {
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d130      	bne.n	8003906 <I3C_Xfer_PriorPreparation+0xb8>
				nb_tx_frame += 1U;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]

				global_tx_size += 1U;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24

				global_rx_size += hi3c->pCCCDesc[descr_index].CCCBuf.Size - 1U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	4413      	add	r3, r2
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	4413      	add	r3, r2
 80038c0:	3b01      	subs	r3, #1
 80038c2:	623b      	str	r3, [r7, #32]

				/* Check on the global size and on the Tx buffer pointer */
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d80a      	bhi.n	80038e6 <I3C_Xfer_PriorPreparation+0x98>
						|| (current_tx_index > hi3c->pXferData->TxBuf.Size)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	429a      	cmp	r2, r3
 80038da:	d804      	bhi.n	80038e6 <I3C_Xfer_PriorPreparation+0x98>
						|| (hi3c->pXferData->TxBuf.pBuffer == NULL)) {
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <I3C_Xfer_PriorPreparation+0xa8>
					hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038ec:	649a      	str	r2, [r3, #72]	; 0x48

					status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 80038f4:	e0dd      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
				} else {
					/* Fill global Tx buffer with data and update the current index of the Tx buffer */
					current_tx_index = I3C_FillTxBuffer_CCC(hi3c, descr_index,
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2201      	movs	r2, #1
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f91b 	bl	8003b38 <I3C_FillTxBuffer_CCC>
 8003902:	62b8      	str	r0, [r7, #40]	; 0x28
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 8003904:	e0d5      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
							1U, current_tx_index);
				}
			} else if (direction == HAL_I3C_DIRECTION_WRITE) {
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d131      	bne.n	8003970 <I3C_Xfer_PriorPreparation+0x122>
				nb_tx_frame += 1U;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]

				global_tx_size += hi3c->pCCCDesc[descr_index].CCCBuf.Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	4413      	add	r3, r2
 8003922:	627b      	str	r3, [r7, #36]	; 0x24

				/* Check on the global size and on the Tx buffer pointer */
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	429a      	cmp	r2, r3
 800392e:	d80a      	bhi.n	8003946 <I3C_Xfer_PriorPreparation+0xf8>
						|| (current_tx_index > hi3c->pXferData->TxBuf.Size)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003938:	429a      	cmp	r2, r3
 800393a:	d804      	bhi.n	8003946 <I3C_Xfer_PriorPreparation+0xf8>
						|| (hi3c->pXferData->TxBuf.pBuffer == NULL)) {
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <I3C_Xfer_PriorPreparation+0x108>
					hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800394c:	649a      	str	r2, [r3, #72]	; 0x48

					status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003954:	e0ad      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
				} else {
					/* Fill global Tx buffer with data and update the current index of the Tx buffer */
					current_tx_index = I3C_FillTxBuffer_CCC(hi3c, descr_index,
							hi3c->pCCCDesc[descr_index].CCCBuf.Size,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	4413      	add	r3, r2
 8003960:	689a      	ldr	r2, [r3, #8]
					current_tx_index = I3C_FillTxBuffer_CCC(hi3c, descr_index,
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	69b9      	ldr	r1, [r7, #24]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f8e6 	bl	8003b38 <I3C_FillTxBuffer_CCC>
 800396c:	62b8      	str	r0, [r7, #40]	; 0x28
 800396e:	e0a0      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
							current_tx_index);
				}
			}
			/* Direction read without Define byte */
			else {
				global_rx_size += hi3c->pCCCDesc[descr_index].CCCBuf.Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e096      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
			}
		}
		/* Broadcast CCC command */
		else if ((option & I3C_OPERATION_TYPE_MASK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 800398a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398e:	d13f      	bne.n	8003a10 <I3C_Xfer_PriorPreparation+0x1c2>
				== LL_I3C_CONTROLLER_MTYPE_CCC) {
			/* Update direction of frame */
			direction = hi3c->pCCCDesc[descr_index].Direction;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	617b      	str	r3, [r7, #20]

			if (direction == HAL_I3C_DIRECTION_WRITE) {
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d131      	bne.n	8003a08 <I3C_Xfer_PriorPreparation+0x1ba>
				nb_tx_frame += 1U;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	3301      	adds	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]

				global_tx_size += hi3c->pCCCDesc[descr_index].CCCBuf.Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	4413      	add	r3, r2
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	4413      	add	r3, r2
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

				/* Check on the global size and on the Tx buffer pointer */
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d80a      	bhi.n	80039de <I3C_Xfer_PriorPreparation+0x190>
						|| (current_tx_index > hi3c->pXferData->TxBuf.Size)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d804      	bhi.n	80039de <I3C_Xfer_PriorPreparation+0x190>
						|| (hi3c->pXferData->TxBuf.pBuffer == NULL)) {
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <I3C_Xfer_PriorPreparation+0x1a0>
					hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039e4:	649a      	str	r2, [r3, #72]	; 0x48

					status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039ec:	e061      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
				} else {
					/* Fill global Tx buffer with data and update the current index of the Tx buffer */
					current_tx_index = I3C_FillTxBuffer_CCC(hi3c, descr_index,
							hi3c->pCCCDesc[descr_index].CCCBuf.Size,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	689a      	ldr	r2, [r3, #8]
					current_tx_index = I3C_FillTxBuffer_CCC(hi3c, descr_index,
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f89a 	bl	8003b38 <I3C_FillTxBuffer_CCC>
 8003a04:	62b8      	str	r0, [r7, #40]	; 0x28
 8003a06:	e054      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
							current_tx_index);
				}
			} else {
				status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a0e:	e050      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
			}
		}
		/* Private */
		else {
			/* Update direction of frame */
			direction = hi3c->pPrivateDesc[descr_index].Direction;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]

			if (direction == HAL_I3C_DIRECTION_WRITE) {
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d137      	bne.n	8003a9a <I3C_Xfer_PriorPreparation+0x24c>
				nb_tx_frame += 1U;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]

				global_tx_size += hi3c->pPrivateDesc[descr_index].TxBuf.Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	4413      	add	r3, r2
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24

				/* Check on the global size and on the Tx buffer pointer */
				if ((global_tx_size > hi3c->pXferData->TxBuf.Size)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d80a      	bhi.n	8003a6a <I3C_Xfer_PriorPreparation+0x21c>
						|| (current_tx_index > hi3c->pXferData->TxBuf.Size)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d804      	bhi.n	8003a6a <I3C_Xfer_PriorPreparation+0x21c>
						|| (hi3c->pXferData->TxBuf.pBuffer == NULL)) {
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d107      	bne.n	8003a7a <I3C_Xfer_PriorPreparation+0x22c>
					hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a70:	649a      	str	r2, [r3, #72]	; 0x48

					status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a78:	e01b      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
				} else {
					/* Fill global Tx buffer with data and update the current index of the Tx buffer */
					current_tx_index = I3C_FillTxBuffer_Private(hi3c,
							descr_index,
							hi3c->pPrivateDesc[descr_index].TxBuf.Size,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	440b      	add	r3, r1
 8003a8a:	689a      	ldr	r2, [r3, #8]
					current_tx_index = I3C_FillTxBuffer_Private(hi3c,
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f87d 	bl	8003b90 <I3C_FillTxBuffer_Private>
 8003a96:	62b8      	str	r0, [r7, #40]	; 0x28
 8003a98:	e00b      	b.n	8003ab2 <I3C_Xfer_PriorPreparation+0x264>
							current_tx_index);
				}
			} else {
				global_rx_size += hi3c->pPrivateDesc[descr_index].RxBuf.Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	4413      	add	r3, r2
 8003ab0:	623b      	str	r3, [r7, #32]
			}
		}

		/* Check if there is an error in the Tx Buffer*/
		if (status == HAL_ERROR) {
 8003ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d008      	beq.n	8003acc <I3C_Xfer_PriorPreparation+0x27e>
	for (uint32_t descr_index = 0U; descr_index < counter; descr_index++) {
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	f4ff aed7 	bcc.w	8003878 <I3C_Xfer_PriorPreparation+0x2a>
 8003aca:	e000      	b.n	8003ace <I3C_Xfer_PriorPreparation+0x280>
			break;
 8003acc:	bf00      	nop
		}
	}

	if (status == HAL_OK) {
 8003ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d112      	bne.n	8003afc <I3C_Xfer_PriorPreparation+0x2ae>
		/* Check on the Tx threshold and the number of Tx frame */
		if (LL_I3C_GetTxFIFOThreshold(
				hi3c->Instance) == LL_I3C_TXFIFO_THRESHOLD_4_4) {
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
		if (LL_I3C_GetTxFIFOThreshold(
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd ffc3 	bl	8001a66 <LL_I3C_GetTxFIFOThreshold>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae6:	d109      	bne.n	8003afc <I3C_Xfer_PriorPreparation+0x2ae>
			/* LL_I3C_TXFIFO_THRESHOLD_4_4 is not allowed when the transfer descriptor contains
			 multiple transmission frames */
			if (nb_tx_frame > 1U) {
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d906      	bls.n	8003afc <I3C_Xfer_PriorPreparation+0x2ae>
				hi3c->ErrorCode = HAL_I3C_ERROR_NOT_ALLOWED;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003af4:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
		}
	}

	if (status == HAL_OK) {
 8003afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d113      	bne.n	8003b2c <I3C_Xfer_PriorPreparation+0x2de>
		/* Check on the size Rx buffer */
		if (global_rx_size > hi3c->pXferData->RxBuf.Size) {
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d907      	bls.n	8003b20 <I3C_Xfer_PriorPreparation+0x2d2>
			hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b16:	649a      	str	r2, [r3, #72]	; 0x48
			status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b1e:	e002      	b.n	8003b26 <I3C_Xfer_PriorPreparation+0x2d8>
		} else {
			hi3c->RxXferCount = global_rx_size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		/* Set handle transfer parameters */
		hi3c->TxXferCount = global_tx_size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	return status;
 8003b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I3C_FillTxBuffer_CCC>:
 * @param  txSize       : [IN]  Size of Tx data.
 * @param  txCurrentIndex : [IN]  Current Index of TxBuffer.
 * @retval index_tx      : [OUT] New current Index of TxBuffer.
 */
static uint32_t I3C_FillTxBuffer_CCC(I3C_HandleTypeDef *hi3c,
		uint32_t indexDesc, uint32_t txSize, uint32_t txCurrentIndex) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
	uint32_t index_tx = txCurrentIndex;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	617b      	str	r3, [r7, #20]

	for (uint32_t index = 0U; index < txSize; index++) {
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e014      	b.n	8003b7a <I3C_FillTxBuffer_CCC+0x42>
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
				hi3c->pCCCDesc[indexDesc].CCCBuf.pBuffer[index];
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	4413      	add	r3, r2
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	441a      	add	r2, r3
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	6919      	ldr	r1, [r3, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	440b      	add	r3, r1
				hi3c->pCCCDesc[indexDesc].CCCBuf.pBuffer[index];
 8003b6a:	7812      	ldrb	r2, [r2, #0]
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
 8003b6c:	701a      	strb	r2, [r3, #0]

		index_tx++;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
	for (uint32_t index = 0U; index < txSize; index++) {
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	3301      	adds	r3, #1
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3e6      	bcc.n	8003b50 <I3C_FillTxBuffer_CCC+0x18>
	}

	return index_tx;
 8003b82:	697b      	ldr	r3, [r7, #20]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <I3C_FillTxBuffer_Private>:
 * @param  txSize       : [IN]  Size of Tx data.
 * @param  txCurrentIndex : [IN]  Current Index of TxBuffer.
 * @retval index_tx      : [OUT] New current Index of TxBuffer.
 */
static uint32_t I3C_FillTxBuffer_Private(I3C_HandleTypeDef *hi3c,
		uint32_t indexDesc, uint32_t txSize, uint32_t txCurrentIndex) {
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
	uint32_t index_tx = txCurrentIndex;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	617b      	str	r3, [r7, #20]

	for (uint32_t index = 0U; index < txSize; index++) {
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e017      	b.n	8003bd8 <I3C_FillTxBuffer_Private+0x48>
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
				hi3c->pPrivateDesc[indexDesc].TxBuf.pBuffer[index];
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	441a      	add	r2, r3
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	6919      	ldr	r1, [r3, #16]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	440b      	add	r3, r1
				hi3c->pPrivateDesc[indexDesc].TxBuf.pBuffer[index];
 8003bc8:	7812      	ldrb	r2, [r2, #0]
		hi3c->pXferData->TxBuf.pBuffer[index_tx] =
 8003bca:	701a      	strb	r2, [r3, #0]

		index_tx++;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
	for (uint32_t index = 0U; index < txSize; index++) {
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3e3      	bcc.n	8003ba8 <I3C_FillTxBuffer_Private+0x18>
	}

	return index_tx;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <I3C_ControlBuffer_PriorPreparation>:
 * @param  counter    : [IN]  Number of devices or commands to treat.
 * @param  option     : [IN]  Parameter indicates the transfer option.
 * @retval HAL Status :       Value from HAL_StatusTypeDef enumeration.
 */
static HAL_StatusTypeDef I3C_ControlBuffer_PriorPreparation(
		I3C_HandleTypeDef *hi3c, uint8_t counter, uint32_t option) {
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	; 0x28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stop_condition;
	uint32_t nb_data_bytes;
	uint32_t index;

	/* Check on the control buffer pointer */
	if (hi3c->pXferData->CtrlBuf.pBuffer == NULL) {
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <I3C_ControlBuffer_PriorPreparation+0x2e>
		hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c12:	649a      	str	r2, [r3, #72]	; 0x48
		status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c1a:	e1ac      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
	} else {
		/* Extract from option required information */
		nb_define_bytes = (option & I3C_DEFINE_BYTE_MASK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
		stop_condition = (option & I3C_RESTART_STOP_MASK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2a:	617b      	str	r3, [r7, #20]

		/* Check on the deactivation of the arbitration */
		if ((option & I3C_ARBITRATION_HEADER_MASK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <I3C_ControlBuffer_PriorPreparation+0x54>
				== I3C_ARBITRATION_HEADER_MASK) {
			/* Disable arbitration header */
			LL_I3C_DisableArbitrationHeader(hi3c->Instance);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fed5 	bl	80019ea <LL_I3C_DisableArbitrationHeader>
 8003c40:	e004      	b.n	8003c4c <I3C_ControlBuffer_PriorPreparation+0x5e>
		} else {
			/* Enable arbitration header */
			LL_I3C_EnableArbitrationHeader(hi3c->Instance);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd febf 	bl	80019ca <LL_I3C_EnableArbitrationHeader>
		}

		/* Check on the operation type */
		if ((option & I3C_OPERATION_TYPE_MASK) == LL_I3C_CONTROLLER_MTYPE_CCC) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8003c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c56:	d14c      	bne.n	8003cf2 <I3C_ControlBuffer_PriorPreparation+0x104>
			/*------------------------------------------ Broadcast CCC -----------------------------------------------------*/
			/* Check on the control buffer size */
			if (hi3c->pXferData->CtrlBuf.Size < (uint32_t) counter) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d207      	bcs.n	8003c74 <I3C_ControlBuffer_PriorPreparation+0x86>
				hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c6a:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c72:	e180      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
			} else {
				/* Set remaining control buffer data counter */
				hi3c->ControlXferCount = (uint32_t) counter;
 8003c74:	7afa      	ldrb	r2, [r7, #11]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

				/* For loop on the number of commands */
				for (index = 0U; index < ((uint32_t) counter - 1U); index++) {
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e01b      	b.n	8003cb8 <I3C_ControlBuffer_PriorPreparation+0xca>
					/* Update control buffer value */
					hi3c->pXferData->CtrlBuf.pBuffer[index] =
							((uint32_t) hi3c->pCCCDesc[index].CCCBuf.Size
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	689a      	ldr	r2, [r3, #8]
									| ((uint32_t) hi3c->pCCCDesc[index].CCC
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	440b      	add	r3, r1
 8003c96:	785b      	ldrb	r3, [r3, #1]
											<< I3C_CR_CCC_Pos) |
 8003c98:	041b      	lsls	r3, r3, #16
									| ((uint32_t) hi3c->pCCCDesc[index].CCC
 8003c9a:	431a      	orrs	r2, r3
									LL_I3C_CONTROLLER_MTYPE_CCC | stop_condition);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	431a      	orrs	r2, r3
					hi3c->pXferData->CtrlBuf.pBuffer[index] =
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
									LL_I3C_CONTROLLER_MTYPE_CCC | stop_condition);
 8003cac:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
					hi3c->pXferData->CtrlBuf.pBuffer[index] =
 8003cb0:	601a      	str	r2, [r3, #0]
				for (index = 0U; index < ((uint32_t) counter - 1U); index++) {
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3de      	bcc.n	8003c80 <I3C_ControlBuffer_PriorPreparation+0x92>
				}

				/* At the last device we should generate a stop condition */
				hi3c->pXferData->CtrlBuf.pBuffer[index] =
						((uint32_t) hi3c->pCCCDesc[index].CCCBuf.Size
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	689a      	ldr	r2, [r3, #8]
								| ((uint32_t) hi3c->pCCCDesc[index].CCC
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a19      	ldr	r1, [r3, #32]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	440b      	add	r3, r1
 8003cd8:	785b      	ldrb	r3, [r3, #1]
										<< I3C_CR_CCC_Pos) |
 8003cda:	041b      	lsls	r3, r3, #16
								| ((uint32_t) hi3c->pCCCDesc[index].CCC
 8003cdc:	431a      	orrs	r2, r3
				hi3c->pXferData->CtrlBuf.pBuffer[index] =
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
								LL_I3C_CONTROLLER_MTYPE_CCC
								| LL_I3C_GENERATE_STOP);
 8003cea:	f042 4230 	orr.w	r2, r2, #2952790016	; 0xb0000000
				hi3c->pXferData->CtrlBuf.pBuffer[index] =
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e141      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
			}
		} else if ((option & I3C_OPERATION_TYPE_MASK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8003cf8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003cfc:	f040 8092 	bne.w	8003e24 <I3C_ControlBuffer_PriorPreparation+0x236>
				== LL_I3C_CONTROLLER_MTYPE_DIRECT) {
			/*------------------------------------------ Direct CCC --------------------------------------------------------*/
			/* Check on the control buffer size */
			if (hi3c->pXferData->CtrlBuf.Size < ((uint32_t) counter * 2U)) {
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d207      	bcs.n	8003d1e <I3C_ControlBuffer_PriorPreparation+0x130>
				hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d14:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d1c:	e12b      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
			} else {
				/* Set remaining control buffer data counter */
				hi3c->ControlXferCount = ((uint32_t) counter * 2U);
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	005a      	lsls	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28

				/* For loop on the number of (devices or commands) * 2 */
				for (index = 0U; index < (((uint32_t) counter * 2U) - 2U);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e03b      	b.n	8003da4 <I3C_ControlBuffer_PriorPreparation+0x1b6>
						index += 2U) {
					/* Step 1 : update control buffer value for the CCC command */
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
							| ((uint32_t) hi3c->pCCCDesc[index / 2U].CCC
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	4413      	add	r3, r2
 8003d38:	785b      	ldrb	r3, [r3, #1]
									<< I3C_CR_CCC_Pos) |
 8003d3a:	041a      	lsls	r2, r3, #16
							| ((uint32_t) hi3c->pCCCDesc[index / 2U].CCC
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	431a      	orrs	r2, r3
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
							LL_I3C_CONTROLLER_MTYPE_CCC
							| LL_I3C_GENERATE_RESTART);
 8003d4c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
 8003d50:	601a      	str	r2, [r3, #0]

					/* Step 2 : update control buffer value for target address */
					hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
							(((uint32_t) hi3c->pCCCDesc[index / 2U].CCCBuf.Size
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	4413      	add	r3, r2
 8003d5e:	689a      	ldr	r2, [r3, #8]
									- nb_define_bytes)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad2      	subs	r2, r2, r3
									| hi3c->pCCCDesc[index / 2U].Direction
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a19      	ldr	r1, [r3, #32]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	440b      	add	r3, r1
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	431a      	orrs	r2, r3
									| ((uint32_t) hi3c->pCCCDesc[index / 2U].TargetAddr
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a19      	ldr	r1, [r3, #32]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	440b      	add	r3, r1
 8003d80:	781b      	ldrb	r3, [r3, #0]
											<< I3C_CR_ADD_Pos) |
 8003d82:	045b      	lsls	r3, r3, #17
									| ((uint32_t) hi3c->pCCCDesc[index / 2U].TargetAddr
 8003d84:	431a      	orrs	r2, r3
									LL_I3C_CONTROLLER_MTYPE_DIRECT
									| stop_condition);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	431a      	orrs	r2, r3
					hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
									| stop_condition);
 8003d98:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
					hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
 8003d9c:	601a      	str	r2, [r3, #0]
						index += 2U) {
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61fb      	str	r3, [r7, #28]
				for (index = 0U; index < (((uint32_t) counter * 2U) - 2U);
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003daa:	3b01      	subs	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d3bb      	bcc.n	8003d2c <I3C_ControlBuffer_PriorPreparation+0x13e>
				}

				/* Update control buffer value for the last CCC command */
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
						| ((uint32_t) hi3c->pCCCDesc[index / 2U].CCC
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	785b      	ldrb	r3, [r3, #1]
								<< I3C_CR_CCC_Pos) |
 8003dc2:	041a      	lsls	r2, r3, #16
						| ((uint32_t) hi3c->pCCCDesc[index / 2U].CCC
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	431a      	orrs	r2, r3
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
						LL_I3C_CONTROLLER_MTYPE_CCC | LL_I3C_GENERATE_RESTART);
 8003dd4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_define_bytes
 8003dd8:	601a      	str	r2, [r3, #0]

				/* At the last device we should generate a stop condition */
				hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
						(((uint32_t) hi3c->pCCCDesc[index / 2U].CCCBuf.Size
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4413      	add	r3, r2
 8003de6:	689a      	ldr	r2, [r3, #8]
								- nb_define_bytes)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad2      	subs	r2, r2, r3
								| hi3c->pCCCDesc[index / 2U].Direction
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a19      	ldr	r1, [r3, #32]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	440b      	add	r3, r1
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	431a      	orrs	r2, r3
								| ((uint32_t) hi3c->pCCCDesc[index / 2U].TargetAddr
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a19      	ldr	r1, [r3, #32]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	440b      	add	r3, r1
 8003e08:	781b      	ldrb	r3, [r3, #0]
										<< I3C_CR_ADD_Pos) |
 8003e0a:	045b      	lsls	r3, r3, #17
								| ((uint32_t) hi3c->pCCCDesc[index / 2U].TargetAddr
 8003e0c:	431a      	orrs	r2, r3
				hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
								LL_I3C_CONTROLLER_MTYPE_DIRECT
								| LL_I3C_GENERATE_STOP);
 8003e1c:	f042 4218 	orr.w	r2, r2, #2550136832	; 0x98000000
				hi3c->pXferData->CtrlBuf.pBuffer[index + 1U] =
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e0a8      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
			}
		} else {
			/*------------------------------------------ Private I3C/I2C ---------------------------------------------------*/
			/* Check on the control buffer size */
			if (hi3c->pXferData->CtrlBuf.Size < (uint32_t) counter) {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d207      	bcs.n	8003e40 <I3C_ControlBuffer_PriorPreparation+0x252>
				hi3c->ErrorCode = HAL_I3C_ERROR_INVALID_PARAM;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e36:	649a      	str	r2, [r3, #72]	; 0x48
				status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e3e:	e09a      	b.n	8003f76 <I3C_ControlBuffer_PriorPreparation+0x388>
			} else {
				/* Set remaining control buffer data counter */
				hi3c->ControlXferCount = (uint32_t) counter;
 8003e40:	7afa      	ldrb	r2, [r7, #11]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28

				/* For loop on the number of devices */
				for (index = 0U; index < ((uint32_t) counter - 1U); index++) {
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e049      	b.n	8003ee0 <I3C_ControlBuffer_PriorPreparation+0x2f2>
					/* Check on transfer direction */
					if (hi3c->pPrivateDesc[index].Direction
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d10a      	bne.n	8003e7a <I3C_ControlBuffer_PriorPreparation+0x28c>
							== HAL_I3C_DIRECTION_READ) {
						nb_data_bytes = hi3c->pPrivateDesc[index].RxBuf.Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	440b      	add	r3, r1
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	e009      	b.n	8003e8e <I3C_ControlBuffer_PriorPreparation+0x2a0>
					} else {
						nb_data_bytes = hi3c->pPrivateDesc[index].TxBuf.Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	623b      	str	r3, [r7, #32]
					}

					/* Update control buffer value */
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
							| hi3c->pPrivateDesc[index].Direction
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	ea42 0103 	orr.w	r1, r2, r3
							| ((uint32_t) hi3c->pPrivateDesc[index].TargetAddr
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4403      	add	r3, r0
 8003eb6:	781b      	ldrb	r3, [r3, #0]
									<< I3C_CR_ADD_Pos)
 8003eb8:	045b      	lsls	r3, r3, #17
							| ((uint32_t) hi3c->pPrivateDesc[index].TargetAddr
 8003eba:	ea41 0203 	orr.w	r2, r1, r3
							| (option & I3C_OPERATION_TYPE_MASK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
							| stop_condition);
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	430a      	orrs	r2, r1
					hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
 8003ed8:	601a      	str	r2, [r3, #0]
				for (index = 0U; index < ((uint32_t) counter - 1U); index++) {
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3b0      	bcc.n	8003e4c <I3C_ControlBuffer_PriorPreparation+0x25e>
				}

				/* Check on transfer direction */
				if (hi3c->pPrivateDesc[index].Direction
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d10a      	bne.n	8003f18 <I3C_ControlBuffer_PriorPreparation+0x32a>
						== HAL_I3C_DIRECTION_READ) {
					nb_data_bytes = hi3c->pPrivateDesc[index].RxBuf.Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	e009      	b.n	8003f2c <I3C_ControlBuffer_PriorPreparation+0x33e>
				} else {
					nb_data_bytes = hi3c->pPrivateDesc[index].TxBuf.Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	623b      	str	r3, [r7, #32]
				}

				/* At the last device we should generate a stop condition */
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
						| hi3c->pPrivateDesc[index].Direction
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
						| ((uint32_t) hi3c->pPrivateDesc[index].TargetAddr
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4403      	add	r3, r0
 8003f54:	781b      	ldrb	r3, [r3, #0]
								<< I3C_CR_ADD_Pos)
 8003f56:	045b      	lsls	r3, r3, #17
						| ((uint32_t) hi3c->pPrivateDesc[index].TargetAddr
 8003f58:	ea41 0203 	orr.w	r2, r1, r3
						| (option & I3C_OPERATION_TYPE_MASK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8003f62:	431a      	orrs	r2, r3
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
						| LL_I3C_GENERATE_STOP);
 8003f70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
				hi3c->pXferData->CtrlBuf.pBuffer[index] = (nb_data_bytes
 8003f74:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return status;
 8003f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I3C_Enable_IRQ>:
 * @param  hi3c             : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                                 information for the specified I3C.
 * @param  InterruptRequest : [IN] Value of the interrupt request
 * @retval None
 */
static void I3C_Enable_IRQ(I3C_HandleTypeDef *hi3c, uint32_t InterruptRequest) {
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
	uint32_t tmpisr = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]

	/* Check if requested interrupts are related to listening mode */
	if ((InterruptRequest & I3C_XFER_LISTEN_IT) != 0U) {
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <I3C_Enable_IRQ+0x2c>
		tmpisr |=
				((InterruptRequest & (~I3C_XFER_LISTEN_IT)) | HAL_I3C_IT_ERRIE);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
		tmpisr |=
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fac:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target transmit in IT mode */
	if ((InterruptRequest & I3C_XFER_TARGET_TX_IT) != 0U) {
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <I3C_Enable_IRQ+0x3e>
		/* Enable frame complete, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_TXFNFIE | HAL_I3C_IT_ERRIE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 8003fbe:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target receive in IT mode */
	if ((InterruptRequest & I3C_XFER_TARGET_RX_IT) != 0U) {
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <I3C_Enable_IRQ+0x50>
		/* Enable frame complete, receive FIFO not empty and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_RXFNEIE | HAL_I3C_IT_ERRIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f443 6322 	orr.w	r3, r3, #2592	; 0xa20
 8003fd0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to transmit/receive in DMA mode */
	if ((InterruptRequest & I3C_XFER_DMA) != 0U) {
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <I3C_Enable_IRQ+0x62>
		/* Enable frame complete and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_ERRIE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8003fe2:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target hot join */
	if ((InterruptRequest & I3C_XFER_TARGET_HOTJOIN) != 0U) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <I3C_Enable_IRQ+0x78>
		/* Enable dynamic address update and error interrupts */
		tmpisr |= (HAL_I3C_IT_DAUPDIE | HAL_I3C_IT_ERRIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target control role */
	if ((InterruptRequest & I3C_XFER_TARGET_CTRLROLE) != 0U) {
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <I3C_Enable_IRQ+0x8a>
		/* Enable control role update and error interrupts */
		tmpisr |= (HAL_I3C_IT_CRUPDIE | HAL_I3C_IT_ERRIE);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f443 2381 	orr.w	r3, r3, #264192	; 0x40800
 800400a:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target in band interrupt */
	if ((InterruptRequest & I3C_XFER_TARGET_IBI) != 0U) {
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <I3C_Enable_IRQ+0x9c>
		/* Enable IBI end and error interrupts */
		tmpisr |= (HAL_I3C_IT_IBIENDIE | HAL_I3C_IT_ERRIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f443 3384 	orr.w	r3, r3, #67584	; 0x10800
 800401c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to controller transmit in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_TX_IT) != 0U) {
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <I3C_Enable_IRQ+0xb2>
		/* Enable frame complete, control FIFO not full, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_CFNFIE | HAL_I3C_IT_TXFNFIE
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_ERRIE);
	}

	/* Check if requested interrupts are related to controller receive in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_RX_IT) != 0U) {
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <I3C_Enable_IRQ+0xc8>
		/* Enable frame complete, control FIFO not full, receive FIFO not empty and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_CFNFIE | HAL_I3C_IT_RXFNEIE
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f443 6322 	orr.w	r3, r3, #2592	; 0xa20
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_ERRIE);
	}

	/* Check if requested interrupts are related to controller transmit read or a broadcast CCC in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_RX_CCC_IT) != 0U) {
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <I3C_Enable_IRQ+0xde>
		/* Enable frame complete, transmit FIFO not full, control FIFO not full,
		 receive FIFO not empty and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_TXFNFIE | HAL_I3C_IT_CFNFIE
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f443 6323 	orr.w	r3, r3, #2608	; 0xa30
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_RXFNEIE | HAL_I3C_IT_ERRIE);
	}

	/* Check if requested interrupts are related to controller transmit broadcast ENTDAA CCC in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_DAA_IT) != 0U) {
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <I3C_Enable_IRQ+0xf4>
		/* Enable frame complete, control FIFO not full, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_CFNFIE | HAL_I3C_IT_TXFNFIE
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_ERRIE);
	}

	/* Enable requested interrupts */
	__HAL_I3C_ENABLE_IT(hi3c, tmpisr);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	430a      	orrs	r2, r1
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <I3C_Disable_IRQ>:
 * @param  hi3c             : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                                 information for the specified I3C.
 * @param  InterruptRequest : [IN] Value of the interrupt request
 * @retval None
 */
static void I3C_Disable_IRQ(I3C_HandleTypeDef *hi3c, uint32_t InterruptRequest) {
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
	uint32_t tmpisr = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

	/* Check if requested interrupts are related to listening mode */
	if ((InterruptRequest & I3C_XFER_LISTEN_IT) != 0U) {
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <I3C_Disable_IRQ+0x2c>
		tmpisr |=
				((InterruptRequest & (~I3C_XFER_LISTEN_IT)) | HAL_I3C_IT_ERRIE);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b0:	f023 0301 	bic.w	r3, r3, #1
		tmpisr |=
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040bc:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target transmit mode */
	if ((InterruptRequest & I3C_XFER_TARGET_TX_IT) != 0U) {
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <I3C_Disable_IRQ+0x3e>
		/* Disable frame complete, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_TXFNFIE | HAL_I3C_IT_ERRIE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 80040ce:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target receive mode */
	if ((InterruptRequest & I3C_XFER_TARGET_RX_IT) != 0U) {
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <I3C_Disable_IRQ+0x50>
		/* Disable frame complete, receive FIFO not empty and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_RXFNEIE | HAL_I3C_IT_ERRIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f443 6322 	orr.w	r3, r3, #2592	; 0xa20
 80040e0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to transmit/receive in DMA mode */
	if ((InterruptRequest & I3C_XFER_DMA) != 0U) {
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <I3C_Disable_IRQ+0x62>
		/* Disable frame complete and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_ERRIE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80040f2:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target hot join */
	if ((InterruptRequest & I3C_XFER_TARGET_HOTJOIN) != 0U) {
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <I3C_Disable_IRQ+0x78>
		/* Disable dynamic address update and error interrupts */
		tmpisr |= (HAL_I3C_IT_DAUPDIE | HAL_I3C_IT_ERRIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004108:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target control role */
	if ((InterruptRequest & I3C_XFER_TARGET_CTRLROLE) != 0U) {
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I3C_Disable_IRQ+0x8a>
		/* Disable control role update and error interrupts */
		tmpisr |= (HAL_I3C_IT_CRUPDIE | HAL_I3C_IT_ERRIE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f443 2381 	orr.w	r3, r3, #264192	; 0x40800
 800411a:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to target in band interrupt */
	if ((InterruptRequest & I3C_XFER_TARGET_IBI) != 0U) {
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <I3C_Disable_IRQ+0x9c>
		/* Disable IBI end and error interrupts */
		tmpisr |= (HAL_I3C_IT_IBIENDIE | HAL_I3C_IT_ERRIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f443 3384 	orr.w	r3, r3, #67584	; 0x10800
 800412c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if requested interrupts are related to controller transmit in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_TX_IT) != 0U) {
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <I3C_Disable_IRQ+0xb2>
		/* Disable frame complete, control FIFO not full, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_CFNFIE | HAL_I3C_IT_TXFNFIE
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_ERRIE);
	}

	/* Check if requested interrupts are related to controller transmit read or a broadcast CCC in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_RX_CCC_IT) != 0U) {
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <I3C_Disable_IRQ+0xc8>
		/* Disable frame complete, transmit FIFO not full, control FIFO not full,
		 receive FIFO not empty and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_TXFNFIE | HAL_I3C_IT_CFNFIE
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f443 6323 	orr.w	r3, r3, #2608	; 0xa30
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_RXFNEIE | HAL_I3C_IT_ERRIE);
	}

	/* Check if requested interrupts are related to controller transmit broadcast ENTDAA CCC in IT mode */
	if ((InterruptRequest & I3C_XFER_CONTROLLER_DAA_IT) != 0U) {
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <I3C_Disable_IRQ+0xde>
		/* Disable frame complete, control FIFO not full, transmit FIFO not full and error interrupts */
		tmpisr |= (HAL_I3C_IT_FCIE | HAL_I3C_IT_CFNFIE | HAL_I3C_IT_TXFNFIE
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 800416a:	f043 0304 	orr.w	r3, r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
				| HAL_I3C_IT_ERRIE);
	}

	/* Disable requested interrupts */
	__HAL_I3C_DISABLE_IT(hi3c, tmpisr);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43da      	mvns	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	400a      	ands	r2, r1
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <I3C_ErrorTreatment>:
 * @brief  I3C error treatment.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_ErrorTreatment(I3C_HandleTypeDef *hi3c) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	HAL_I3C_StateTypeDef tmpstate = hi3c->State;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419e:	72fb      	strb	r3, [r7, #11]
	uint32_t dmaabortongoing = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

	/* Check on the state */
	if (tmpstate == HAL_I3C_STATE_BUSY) {
 80041a4:	7afb      	ldrb	r3, [r7, #11]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d107      	bne.n	80041ba <I3C_ErrorTreatment+0x2a>
		/* Update handle state parameter */
		I3C_StateUpdate(hi3c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff faa6 	bl	80036fc <I3C_StateUpdate>

		/* Disable all interrupts related to busy state */
		I3C_Disable_IRQ(hi3c,
 80041b0:	2170      	movs	r1, #112	; 0x70
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff6d 	bl	8004092 <I3C_Disable_IRQ>
 80041b8:	e0a2      	b.n	8004300 <I3C_ErrorTreatment+0x170>
				(I3C_XFER_TARGET_IBI | I3C_XFER_TARGET_HOTJOIN
						| I3C_XFER_TARGET_CTRLROLE));
	} else {
		/* Disable all interrupts related to busy Tx and Rx state */
		I3C_Disable_IRQ(hi3c, I3C_XFER_CONTROLLER_RX_CCC_IT);
 80041ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff67 	bl	8004092 <I3C_Disable_IRQ>

		/* Reset Tx counter */
		hi3c->TxXferCount = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30

		/* Reset Rx counter */
		hi3c->RxXferCount = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Reset Control counter */
		hi3c->ControlXferCount = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28

		/* Reset Tx function pointer */
		hi3c->ptrTxFunc = NULL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	651a      	str	r2, [r3, #80]	; 0x50

		/* Reset Rx function pointer */
		hi3c->ptrRxFunc = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54

		/* Reset Context pointer */
		hi3c->pXferData = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	61da      	str	r2, [r3, #28]
		hi3c->pCCCDesc = NULL;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	621a      	str	r2, [r3, #32]
		hi3c->pPrivateDesc = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

		/* Flush all FIFOs */
		/* Flush the content of Tx Fifo */
		LL_I3C_RequestTxFIFOFlush(hi3c->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd fd27 	bl	8001c4c <LL_I3C_RequestTxFIFOFlush>

		/* Flush the content of Rx Fifo */
		LL_I3C_RequestRxFIFOFlush(hi3c->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fd12 	bl	8001c2c <LL_I3C_RequestRxFIFOFlush>

		/* Check on the I3C mode: Control and status FIFOs available only with controller mode */
		if (hi3c->Mode == HAL_I3C_MODE_CONTROLLER) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d109      	bne.n	8004224 <I3C_ErrorTreatment+0x94>
			/* Flush the content of Control Fifo */
			LL_I3C_RequestControlFIFOFlush(hi3c->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fd55 	bl	8001cc4 <LL_I3C_RequestControlFIFOFlush>

			/* Flush the content of Status Fifo */
			LL_I3C_RequestStatusFIFOFlush(hi3c->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fd24 	bl	8001c6c <LL_I3C_RequestStatusFIFOFlush>
		}

#if defined(HAL_DMA_MODULE_ENABLED)
		/* Abort control DMA transfer if any */
		if (hi3c->hdmacr != NULL) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01d      	beq.n	8004268 <I3C_ErrorTreatment+0xd8>
			/* Disable control DMA Request */
			LL_I3C_DisableDMAReq_Control(hi3c->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fc26 	bl	8001a82 <LL_I3C_DisableDMAReq_Control>

			/* Check DMA state */
			if (HAL_DMA_GetState(hi3c->hdmacr) != HAL_DMA_STATE_READY) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd f9a8 	bl	8001590 <HAL_DMA_GetState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d010      	beq.n	8004268 <I3C_ErrorTreatment+0xd8>
				/* Set the I3C DMA Abort callback : will lead to call HAL_I3C_AbortCpltCallback()
				 at end of DMA abort procedure */

				/* DMA abort on going */
				dmaabortongoing = 1U;
 8004246:	2301      	movs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]

				/* Abort control DMA */
				if (HAL_DMA_Abort_IT(hi3c->hdmacr) != HAL_OK) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd f975 	bl	800153e <HAL_DMA_Abort_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <I3C_ErrorTreatment+0xd8>
					/* Call Directly XferAbortCallback function in case of error */
					hi3c->hdmacr->XferAbortCallback(hi3c->hdmacr);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004264:	4610      	mov	r0, r2
 8004266:	4798      	blx	r3
				}
			}
		}

		/* Abort RX DMA transfer if any */
		if (hi3c->hdmarx != NULL) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d021      	beq.n	80042b4 <I3C_ErrorTreatment+0x124>
			/* Disable Rx DMA Request */
			LL_I3C_DisableDMAReq_RX(hi3c->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fbc8 	bl	8001a0a <LL_I3C_DisableDMAReq_RX>

			/* Check DMA state */
			if (HAL_DMA_GetState(hi3c->hdmarx) != HAL_DMA_STATE_READY) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd f986 	bl	8001590 <HAL_DMA_GetState>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d014      	beq.n	80042b4 <I3C_ErrorTreatment+0x124>
				/* Set the I3C DMA Abort callback : will lead to call HAL_I3C_AbortCpltCallback()
				 at end of DMA abort procedure */
				hi3c->hdmarx->XferAbortCallback = I3C_DMAAbort;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <I3C_ErrorTreatment+0x184>)
 8004290:	66da      	str	r2, [r3, #108]	; 0x6c

				/* DMA abort on going */
				dmaabortongoing = 1U;
 8004292:	2301      	movs	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]

				/* Abort DMA RX */
				if (HAL_DMA_Abort_IT(hi3c->hdmarx) != HAL_OK) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd f94f 	bl	800153e <HAL_DMA_Abort_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <I3C_ErrorTreatment+0x124>
					/* Call Directly XferAbortCallback function in case of error */
					hi3c->hdmarx->XferAbortCallback(hi3c->hdmarx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
				}
			}
		}

		/* Abort TX DMA transfer if any */
		if (hi3c->hdmatx != NULL) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d021      	beq.n	8004300 <I3C_ErrorTreatment+0x170>
			/* Disable Tx DMA Request */
			LL_I3C_DisableDMAReq_TX(hi3c->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fbc0 	bl	8001a46 <LL_I3C_DisableDMAReq_TX>

			/* Check DMA state */
			if (HAL_DMA_GetState(hi3c->hdmatx) != HAL_DMA_STATE_READY) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd f960 	bl	8001590 <HAL_DMA_GetState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d014      	beq.n	8004300 <I3C_ErrorTreatment+0x170>
				/* Set the I3C DMA Abort callback : will lead to call HAL_I3C_AbortCpltCallback()
				 at end of DMA abort procedure */
				hi3c->hdmatx->XferAbortCallback = I3C_DMAAbort;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <I3C_ErrorTreatment+0x184>)
 80042dc:	66da      	str	r2, [r3, #108]	; 0x6c

				/* DMA abort on going */
				dmaabortongoing = 1U;
 80042de:	2301      	movs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]

				/* Abort DMA TX */
				if (HAL_DMA_Abort_IT(hi3c->hdmatx) != HAL_OK) {
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fd f929 	bl	800153e <HAL_DMA_Abort_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <I3C_ErrorTreatment+0x170>
					/* Call Directly XferAbortCallback function in case of error */
					hi3c->hdmatx->XferAbortCallback(hi3c->hdmatx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042fc:	4610      	mov	r0, r2
 80042fe:	4798      	blx	r3
		}
#endif /* HAL_DMA_MODULE_ENABLED */
	}

	/* Call Error callback if there is no DMA abort on going */
	if (dmaabortongoing == 0U) {
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <I3C_ErrorTreatment+0x17c>
		I3C_TreatErrorCallback(hi3c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f806 	bl	8004318 <I3C_TreatErrorCallback>
	}
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	08003517 	.word	0x08003517

08004318 <I3C_TreatErrorCallback>:
 * @brief  I3C Error callback treatment.
 * @param  hi3c : [IN] Pointer to an I3C_HandleTypeDef structure that contains the configuration
 *                     information for the specified I3C.
 * @retval None
 */
static void I3C_TreatErrorCallback(I3C_HandleTypeDef *hi3c) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	if (hi3c->State == HAL_I3C_STATE_ABORT) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d106      	bne.n	800433a <I3C_TreatErrorCallback+0x22>
		/* Update handle state parameter */
		I3C_StateUpdate(hi3c);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff f9e5 	bl	80036fc <I3C_StateUpdate>

		/* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I3C_REGISTER_CALLBACKS == 1)
    hi3c->AbortCpltCallback(hi3c);
#else
		HAL_I3C_AbortCpltCallback(hi3c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fff4 	bl	8002320 <HAL_I3C_AbortCpltCallback>
    hi3c->ErrorCallback(hi3c);
#else
		HAL_I3C_ErrorCallback(hi3c);
#endif /* USE_HAL_I3C_REGISTER_CALLBACKS */
	}
}
 8004338:	e005      	b.n	8004346 <I3C_TreatErrorCallback+0x2e>
		I3C_StateUpdate(hi3c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff f9de 	bl	80036fc <I3C_StateUpdate>
		HAL_I3C_ErrorCallback(hi3c);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fd fff7 	bl	8002334 <HAL_I3C_ErrorCallback>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_ICACHE_Enable+0x1c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_ICACHE_Enable+0x1c>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40030400 	.word	0x40030400

08004370 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *pOscInitStruct) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	uint32_t temp_pllckselr;
	uint32_t temp1_pllckcfg;
	uint32_t temp2_pllckcfg;

	/* Check Null pointer */
	if (pOscInitStruct == NULL) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <HAL_RCC_OscConfig+0x14>
		return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f000 bc28 	b.w	8004bd4 <HAL_RCC_OscConfig+0x864>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
	temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0318 	and.w	r3, r3, #24
 800438c:	61fb      	str	r3, [r7, #28]
	temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800438e:	4b92      	ldr	r3, [pc, #584]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	61bb      	str	r3, [r7, #24]

	/*----------------------------- CSI Configuration --------------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05b      	beq.n	800445c <HAL_RCC_OscConfig+0xec>
		assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
		assert_param(
				IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

		/* When the CSI is used as system clock it will not be disabled */
		if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI)
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x46>
				|| ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b18      	cmp	r3, #24
 80043ae:	d114      	bne.n	80043da <HAL_RCC_OscConfig+0x6a>
						&& (temp_pllckselr == RCC_PLL1_SOURCE_CSI))) {
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d111      	bne.n	80043da <HAL_RCC_OscConfig+0x6a>
			if (pOscInitStruct->CSIState == RCC_CSI_OFF) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x54>
				return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f000 bc08 	b.w	8004bd4 <HAL_RCC_OscConfig+0x864>
			}

			/* Otherwise, just the calibration and CSI is allowed */
			else {
				/* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
				__HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(
 80043c4:	4b84      	ldr	r3, [pc, #528]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	4981      	ldr	r1, [pc, #516]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	618b      	str	r3, [r1, #24]
			if (pOscInitStruct->CSIState == RCC_CSI_OFF) {
 80043d8:	e040      	b.n	800445c <HAL_RCC_OscConfig+0xec>
						pOscInitStruct->CSICalibrationValue);
			}
		} else {
			/* Check the CSI State */
			if ((pOscInitStruct->CSIState) != RCC_CSI_OFF) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d023      	beq.n	800442a <HAL_RCC_OscConfig+0xba>
				/* Enable the Internal High Speed oscillator (CSI). */
				__HAL_RCC_CSI_ENABLE();
 80043e2:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7c      	ldr	r2, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80043ee:	f7fc ff67 	bl	80012c0 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

				/* Wait till CSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U) {
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x98>
					if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE) {
 80043f6:	f7fc ff63 	bl	80012c0 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x98>
						return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e3e5      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U) {
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x86>
					}
				}

				/* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
				__HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(
 8004414:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	496d      	ldr	r1, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004424:	4313      	orrs	r3, r2
 8004426:	618b      	str	r3, [r1, #24]
 8004428:	e018      	b.n	800445c <HAL_RCC_OscConfig+0xec>
						pOscInitStruct->CSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (CSI). */
				__HAL_RCC_CSI_DISABLE();
 800442a:	4b6b      	ldr	r3, [pc, #428]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004436:	f7fc ff43 	bl	80012c0 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

				/* Wait till CSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U) {
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0xe0>
					if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE) {
 800443e:	f7fc ff3f 	bl	80012c0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0xe0>
						return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e3c1      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U) {
 8004450:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0xce>
				}
			}
		}
	}
	/*------------------------------- HSE Configuration ------------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a0 	beq.w	80045aa <HAL_RCC_OscConfig+0x23a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b10      	cmp	r3, #16
 800446e:	d005      	beq.n	800447c <HAL_RCC_OscConfig+0x10c>
				|| ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b18      	cmp	r3, #24
 8004474:	d109      	bne.n	800448a <HAL_RCC_OscConfig+0x11a>
						&& (temp_pllckselr == RCC_PLL1_SOURCE_HSE))) {
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x11a>
			if (pOscInitStruct->HSEState == RCC_HSE_OFF) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8092 	bne.w	80045aa <HAL_RCC_OscConfig+0x23a>
				return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e3a4      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x132>
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4f      	ldr	r2, [pc, #316]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e058      	b.n	8004554 <HAL_RCC_OscConfig+0x1e4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x160>
 80044aa:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a44      	ldr	r2, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e041      	b.n	8004554 <HAL_RCC_OscConfig+0x1e4>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d8:	d112      	bne.n	8004500 <HAL_RCC_OscConfig+0x190>
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3e      	ldr	r2, [pc, #248]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e029      	b.n	8004554 <HAL_RCC_OscConfig+0x1e4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004508:	d112      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
 800450a:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a32      	ldr	r2, [pc, #200]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800451c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e011      	b.n	8004554 <HAL_RCC_OscConfig+0x1e4>
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 800454e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004552:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (pOscInitStruct->HSEState != RCC_HSE_OFF) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_RCC_OscConfig+0x214>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800455c:	f7fc feb0 	bl	80012c0 <HAL_GetTick>
 8004560:	6178      	str	r0, [r7, #20]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x206>
					if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE) {
 8004564:	f7fc feac 	bl	80012c0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x206>
						return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e32e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x1f4>
 8004582:	e012      	b.n	80045aa <HAL_RCC_OscConfig+0x23a>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004584:	f7fc fe9c 	bl	80012c0 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x22e>
					if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE) {
 800458c:	f7fc fe98 	bl	80012c0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x22e>
						return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e31a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <HAL_RCC_OscConfig+0x268>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x21c>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 809a 	beq.w	80046ec <HAL_RCC_OscConfig+0x37c>
		assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
		assert_param(
				IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_RCC_OscConfig+0x25a>
				|| ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b18      	cmp	r3, #24
 80045c2:	d149      	bne.n	8004658 <HAL_RCC_OscConfig+0x2e8>
						&& (temp_pllckselr == RCC_PLL1_SOURCE_HSI))) {
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d146      	bne.n	8004658 <HAL_RCC_OscConfig+0x2e8>
			/* When HSI is used as system clock it will not be disabled */
			if (pOscInitStruct->HSIState == RCC_HSI_OFF) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_RCC_OscConfig+0x26c>
				return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e2fe      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
 80045d6:	bf00      	nop
 80045d8:	44020c00 	.word	0x44020c00
			}
			/* Otherwise, HSI calibration and division may be allowed */
			else {

				/* HSI division is allowed if HSI is used as system clock */
				if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) {
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11c      	bne.n	800461c <HAL_RCC_OscConfig+0x2ac>
					if (__HAL_RCC_GET_HSI_DIVIDER()
 80045e2:	4b9a      	ldr	r3, [pc, #616]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0218 	and.w	r2, r3, #24
							!= (pOscInitStruct->HSIDiv)) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
					if (__HAL_RCC_GET_HSI_DIVIDER()
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d014      	beq.n	800461c <HAL_RCC_OscConfig+0x2ac>
						/* Adjust the HSI division factor */
						__HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80045f2:	4b96      	ldr	r3, [pc, #600]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 0218 	bic.w	r2, r3, #24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	4993      	ldr	r1, [pc, #588]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

						/* Update the SystemCoreClock global variable with new HSI value  */
						(void) HAL_RCC_GetHCLKFreq();
 8004604:	f000 fdd0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>

						/* Configure the source of time base considering new system clocks settings*/
						if (HAL_InitTick(uwTickPrio) != HAL_OK) {
 8004608:	4b91      	ldr	r3, [pc, #580]	; (8004850 <HAL_RCC_OscConfig+0x4e0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fc fe0d 	bl	800122c <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x2ac>
							return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e2db      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
						}
					}
				}

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800461c:	f7fc fe50 	bl	80012c0 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x2c6>
					if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE) {
 8004624:	f7fc fe4c 	bl	80012c0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x2c6>
						return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e2ce      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004636:	4b85      	ldr	r3, [pc, #532]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x2b4>
					}
				}
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	497e      	ldr	r1, [pc, #504]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	610b      	str	r3, [r1, #16]
			if (pOscInitStruct->HSIState == RCC_HSI_OFF) {
 8004656:	e049      	b.n	80046ec <HAL_RCC_OscConfig+0x37c>
						pOscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (pOscInitStruct->HSIState != RCC_HSI_OFF) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02c      	beq.n	80046ba <HAL_RCC_OscConfig+0x34a>
				/* Adjust the HSI division factor */
				__HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004660:	4b7a      	ldr	r3, [pc, #488]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 0218 	bic.w	r2, r3, #24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	4977      	ldr	r1, [pc, #476]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]

				/* Enable the HSI oscillator */
				__HAL_RCC_HSI_ENABLE();
 8004672:	4b76      	ldr	r3, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a75      	ldr	r2, [pc, #468]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800467e:	f7fc fe1f 	bl	80012c0 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x328>
					if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE) {
 8004686:	f7fc fe1b 	bl	80012c0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x328>
						return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e29d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004698:	4b6c      	ldr	r3, [pc, #432]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x316>
					}
				}

				/* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80046a4:	4b69      	ldr	r3, [pc, #420]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	4966      	ldr	r1, [pc, #408]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	610b      	str	r3, [r1, #16]
 80046b8:	e018      	b.n	80046ec <HAL_RCC_OscConfig+0x37c>
						pOscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80046ba:	4b64      	ldr	r3, [pc, #400]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a63      	ldr	r2, [pc, #396]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80046c6:	f7fc fdfb 	bl	80012c0 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x370>
					if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE) {
 80046ce:	f7fc fdf7 	bl	80012c0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x370>
						return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e279      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 80046e0:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x35e>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d03c      	beq.n	8004772 <HAL_RCC_OscConfig+0x402>
		assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

		/* Update LSI configuration in Backup Domain control register    */

		/* Check the LSI State */
		if (pOscInitStruct->LSIState != RCC_LSI_OFF) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <HAL_RCC_OscConfig+0x3ca>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004700:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004706:	4a51      	ldr	r2, [pc, #324]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800470c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004710:	f7fc fdd6 	bl	80012c0 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

			/* Wait till LSI is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U) {
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3ba>
				if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE) {
 8004718:	f7fc fdd2 	bl	80012c0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3ba>
					return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e254      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U) {
 800472a:	4b48      	ldr	r3, [pc, #288]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800472c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ef      	beq.n	8004718 <HAL_RCC_OscConfig+0x3a8>
 8004738:	e01b      	b.n	8004772 <HAL_RCC_OscConfig+0x402>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800473a:	4b44      	ldr	r3, [pc, #272]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800473c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004740:	4a42      	ldr	r2, [pc, #264]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004746:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800474a:	f7fc fdb9 	bl	80012c0 <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

			/* Wait till LSI is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U) {
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x3f4>
				if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE) {
 8004752:	f7fc fdb5 	bl	80012c0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x3f4>
					return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e237      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U) {
 8004764:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ef      	bne.n	8004752 <HAL_RCC_OscConfig+0x3e2>
			}
		}

	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80d2 	beq.w	8004924 <HAL_RCC_OscConfig+0x5b4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain */
		if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP)) {
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCC_OscConfig+0x4e4>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d118      	bne.n	80047be <HAL_RCC_OscConfig+0x44e>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_OscConfig+0x4e4>)
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	4a30      	ldr	r2, [pc, #192]	; (8004854 <HAL_RCC_OscConfig+0x4e4>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6253      	str	r3, [r2, #36]	; 0x24

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004798:	f7fc fd92 	bl	80012c0 <HAL_GetTick>
 800479c:	6178      	str	r0, [r7, #20]

			while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP)) {
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x442>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80047a0:	f7fc fd8e 	bl	80012c0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x442>
					return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e210      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP)) {
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_RCC_OscConfig+0x4e4>)
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x430>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <HAL_RCC_OscConfig+0x468>
 80047c6:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047cc:	4a1f      	ldr	r2, [pc, #124]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047d6:	e074      	b.n	80048c2 <HAL_RCC_OscConfig+0x552>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d118      	bne.n	8004812 <HAL_RCC_OscConfig+0x4a2>
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004810:	e057      	b.n	80048c2 <HAL_RCC_OscConfig+0x552>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d11e      	bne.n	8004858 <HAL_RCC_OscConfig+0x4e8>
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800481c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800482c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004830:	4a06      	ldr	r2, [pc, #24]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800483c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004840:	4a02      	ldr	r2, [pc, #8]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800484a:	e03a      	b.n	80048c2 <HAL_RCC_OscConfig+0x552>
 800484c:	44020c00 	.word	0x44020c00
 8004850:	2000004c 	.word	0x2000004c
 8004854:	44020800 	.word	0x44020800
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b85      	cmp	r3, #133	; 0x85
 800485e:	d118      	bne.n	8004892 <HAL_RCC_OscConfig+0x522>
 8004860:	4ba2      	ldr	r3, [pc, #648]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004866:	4aa1      	ldr	r2, [pc, #644]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004870:	4b9e      	ldr	r3, [pc, #632]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004876:	4a9d      	ldr	r2, [pc, #628]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004880:	4b9a      	ldr	r3, [pc, #616]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004886:	4a99      	ldr	r2, [pc, #612]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004890:	e017      	b.n	80048c2 <HAL_RCC_OscConfig+0x552>
 8004892:	4b96      	ldr	r3, [pc, #600]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004898:	4a94      	ldr	r2, [pc, #592]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048a2:	4b92      	ldr	r3, [pc, #584]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80048a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048a8:	4a90      	ldr	r2, [pc, #576]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048b2:	4b8e      	ldr	r3, [pc, #568]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80048b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048b8:	4a8c      	ldr	r2, [pc, #560]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80048ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

		/* Check the LSE State */
		if (pOscInitStruct->LSEState != RCC_LSE_OFF) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_RCC_OscConfig+0x588>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80048ca:	f7fc fcf9 	bl	80012c0 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]

			/* Wait till LSE is ready */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x578>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80048d2:	f7fc fcf5 	bl	80012c0 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x578>
					return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e175      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 80048e8:	4b80      	ldr	r3, [pc, #512]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80048ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ed      	beq.n	80048d2 <HAL_RCC_OscConfig+0x562>
 80048f6:	e015      	b.n	8004924 <HAL_RCC_OscConfig+0x5b4>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80048f8:	f7fc fce2 	bl	80012c0 <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]

			/* Wait till LSE is disabled */
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x5a6>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004900:	f7fc fcde 	bl	80012c0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x5a6>
					return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e15e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8004916:	4b75      	ldr	r3, [pc, #468]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ed      	bne.n	8004900 <HAL_RCC_OscConfig+0x590>
			}
		}

	}
	/*------------------------------ HSI48 Configuration -----------------------*/
	if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d036      	beq.n	800499e <HAL_RCC_OscConfig+0x62e>
			== RCC_OSCILLATORTYPE_HSI48) {
		/* Check the parameters */
		assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

		/* Check the HSI48 State */
		if (pOscInitStruct->HSI48State != RCC_HSI48_OFF) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <HAL_RCC_OscConfig+0x5fc>
			/* Enable the Internal High Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_ENABLE();
 8004938:	4b6c      	ldr	r3, [pc, #432]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 800493e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004942:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004944:	f7fc fcbc 	bl	80012c0 <HAL_GetTick>
 8004948:	6178      	str	r0, [r7, #20]

			/* Wait till HSI48 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U) {
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x5ee>
				if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE) {
 800494c:	f7fc fcb8 	bl	80012c0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x5ee>
					return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e13a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U) {
 800495e:	4b63      	ldr	r3, [pc, #396]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x5dc>
 800496a:	e018      	b.n	800499e <HAL_RCC_OscConfig+0x62e>
				}
			}
		} else {
			/* Disable the Internal High Speed oscillator (HSI48). */
			__HAL_RCC_HSI48_DISABLE();
 800496c:	4b5f      	ldr	r3, [pc, #380]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a5e      	ldr	r2, [pc, #376]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004976:	6013      	str	r3, [r2, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004978:	f7fc fca2 	bl	80012c0 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

			/* Wait till HSI48 is disabled */
			while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U) {
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x622>
				if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE) {
 8004980:	f7fc fc9e 	bl	80012c0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x622>
					return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e120      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U) {
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x610>

	/*-------------------------------- PLL1 Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

	if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8115 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x862>
		/* Check if the PLL1 is used as system clock or not */
		if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b18      	cmp	r3, #24
 80049ac:	f000 80af 	beq.w	8004b0e <HAL_RCC_OscConfig+0x79e>
			if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 8086 	bne.w	8004ac6 <HAL_RCC_OscConfig+0x756>
				assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
				assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

				/* Disable the PLL1. */
				__HAL_RCC_PLL1_DISABLE();
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80049c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c4:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80049c6:	f7fc fc7b 	bl	80012c0 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

				/* Wait till PLL1 is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U) {
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x670>
					if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE) {
 80049ce:	f7fc fc77 	bl	80012c0 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x670>
						return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0f9      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U) {
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x65e>
					}
				}

				/* Configure the PLL1 clock source, multiplication and division factors. */
				__HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a00:	0212      	lsls	r2, r2, #8
 8004a02:	430a      	orrs	r2, r1
 8004a04:	4939      	ldr	r1, [pc, #228]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	628b      	str	r3, [r1, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	025b      	lsls	r3, r3, #9
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	3b01      	subs	r3, #1
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a3a:	492c      	ldr	r1, [pc, #176]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	634b      	str	r3, [r1, #52]	; 0x34

				assert_param(
						IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

				/* Disable PLL1FRACN . */
				__HAL_RCC_PLL1_FRACN_DISABLE();
 8004a40:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a46:	f023 0310 	bic.w	r3, r3, #16
 8004a4a:	6293      	str	r3, [r2, #40]	; 0x28

				/* Configure PLL  PLL1FRACN */
				__HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	4a26      	ldr	r2, [pc, #152]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	6393      	str	r3, [r2, #56]	; 0x38

				/* Enable PLL1FRACN . */
				__HAL_RCC_PLL1_FRACN_ENABLE();
 8004a56:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	4a24      	ldr	r2, [pc, #144]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a5c:	f043 0310 	orr.w	r3, r3, #16
 8004a60:	6293      	str	r3, [r2, #40]	; 0x28

				assert_param(
						IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

				/* Select PLL1 input reference frequency range: VCI */
				__HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE);
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	f023 020c 	bic.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	491f      	ldr	r1, [pc, #124]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	628b      	str	r3, [r1, #40]	; 0x28

				assert_param(
						IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

				/* Select PLL1 output frequency range : VCO */
				__HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL);
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f023 0220 	bic.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	491a      	ldr	r1, [pc, #104]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	628b      	str	r3, [r1, #40]	; 0x28

				/* Enable PLL1 System Clock output. */
				__HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a86:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6293      	str	r3, [r2, #40]	; 0x28

				/* Enable the PLL1. */
				__HAL_RCC_PLL1_ENABLE();
 8004a92:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a15      	ldr	r2, [pc, #84]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004a98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9c:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004a9e:	f7fc fc0f 	bl	80012c0 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

				/* Wait till PLL1 is ready */
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U) {
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x748>
					if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE) {
 8004aa6:	f7fc fc0b 	bl	80012c0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x748>
						return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e08d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U) {
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x736>
 8004ac4:	e085      	b.n	8004bd2 <HAL_RCC_OscConfig+0x862>
					}
				}
			} else {
				/* Disable the PLL1. */
				__HAL_RCC_PLL1_DISABLE();
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a08      	ldr	r2, [pc, #32]	; (8004aec <HAL_RCC_OscConfig+0x77c>)
 8004acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004ad2:	f7fc fbf5 	bl	80012c0 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

				/* Wait till PLL1 is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U) {
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x780>
					if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE) {
 8004ada:	f7fc fbf1 	bl	80012c0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d903      	bls.n	8004af0 <HAL_RCC_OscConfig+0x780>
						return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e073      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
 8004aec:	44020c00 	.word	0x44020c00
				while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U) {
 8004af0:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_OscConfig+0x76a>
					}
				}

				/* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
				RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	4a36      	ldr	r2, [pc, #216]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004b02:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	6293      	str	r3, [r2, #40]	; 0x28
 8004b0c:	e061      	b.n	8004bd2 <HAL_RCC_OscConfig+0x862>
						| RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);

			}
		} else {
			/* Do not return HAL_ERROR if request repeats the current configuration */
			temp1_pllckcfg = RCC->PLL1CFGR;
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	613b      	str	r3, [r7, #16]
			temp2_pllckcfg = RCC->PLL1DIVR;
 8004b14:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	60fb      	str	r3, [r7, #12]
			if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d031      	beq.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f003 0203 	and.w	r2, r3, #3
							!= pOscInitStruct->PLL.PLLSource)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					|| (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d12a      	bne.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
					RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
					|| ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >>
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d122      	bne.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
							!= (pOscInitStruct->PLL.PLLN - 1U))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	3b01      	subs	r3, #1
					|| (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d11a      	bne.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	0a5b      	lsrs	r3, r3, #9
 8004b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	3b01      	subs	r3, #1
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >>
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d111      	bne.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	3b01      	subs	r3, #1
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >>
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d108      	bne.n	8004b86 <HAL_RCC_OscConfig+0x816>
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U))) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	3b01      	subs	r3, #1
					|| ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >>
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x81a>
				return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e024      	b.n	8004bd4 <HAL_RCC_OscConfig+0x864>
			}

			/* FRACN1 on-the-fly value update */
			if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >>
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f3c3 020c 	ubfx	r2, r3, #0, #13
			RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN)) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
			if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >>
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x862>
				assert_param(
						IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

				/* Disable PLL1FRACN . */
				__HAL_RCC_PLL1_FRACN_DISABLE();
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	6293      	str	r3, [r2, #40]	; 0x28

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004ba8:	f7fc fb8a 	bl	80012c0 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

				/* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
				 will be taken into account. */
				while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE) {
 8004bae:	bf00      	nop
 8004bb0:	f7fc fb86 	bl	80012c0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d0f9      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x840>
				}

				/* Configure PLL PLL1FRACN */
				__HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc0:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	6393      	str	r3, [r2, #56]	; 0x38

				/* Enable PLL1FRACN to latch the new value. */
				__HAL_RCC_PLL1_FRACN_ENABLE();
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_RCC_OscConfig+0x86c>)
 8004bcc:	f043 0310 	orr.w	r3, r3, #16
 8004bd0:	6293      	str	r3, [r2, #40]	; 0x28
			}

		}
	}
	return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	44020c00 	.word	0x44020c00

08004be0 <HAL_RCC_ClockConfig>:
 *         currently used as system clock source.
 *
 * @retval HAL Status.
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *pClkInitStruct,
		uint32_t FLatency) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef halstatus;
	uint32_t tickstart;

	/* Check Null pointer */
	if (pClkInitStruct == NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e19e      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004bf4:	4b83      	ldr	r3, [pc, #524]	; (8004e04 <HAL_RCC_ClockConfig+0x224>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d910      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b80      	ldr	r3, [pc, #512]	; (8004e04 <HAL_RCC_ClockConfig+0x224>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 020f 	bic.w	r2, r3, #15
 8004c0a:	497e      	ldr	r1, [pc, #504]	; (8004e04 <HAL_RCC_ClockConfig+0x224>)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004c12:	4b7c      	ldr	r3, [pc, #496]	; (8004e04 <HAL_RCC_ClockConfig+0x224>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e186      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
		}
	}

	/* Increasing the BUS frequency divider */
	/*-------------------------- PCLK3 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x76>
			== RCC_CLOCKTYPE_PCLK3) {
		if ((pClkInitStruct->APB3CLKDivider)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695a      	ldr	r2, [r3, #20]
				> ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8)) {
 8004c34:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
		if ((pClkInitStruct->APB3CLKDivider)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d909      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x76>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3,
 8004c42:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	496d      	ldr	r1, [pc, #436]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	620b      	str	r3, [r1, #32]
					((pClkInitStruct->APB3CLKDivider) << 8));
		}
	}
	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <HAL_RCC_ClockConfig+0xa8>
			== RCC_CLOCKTYPE_PCLK2) {
		if ((pClkInitStruct->APB2CLKDivider)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691a      	ldr	r2, [r3, #16]
				> ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4)) {
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
		if ((pClkInitStruct->APB2CLKDivider)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d909      	bls.n	8004c88 <HAL_RCC_ClockConfig+0xa8>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2,
 8004c74:	4b64      	ldr	r3, [pc, #400]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	4961      	ldr	r1, [pc, #388]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	620b      	str	r3, [r1, #32]
					((pClkInitStruct->APB2CLKDivider) << 4));
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xd6>
			== RCC_CLOCKTYPE_PCLK1) {
		if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1)) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d908      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0xd6>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1,
 8004ca4:	4b58      	ldr	r3, [pc, #352]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4955      	ldr	r1, [pc, #340]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	620b      	str	r3, [r1, #32]
					pClkInitStruct->APB1CLKDivider);
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x104>
		if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE)) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d908      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x104>
			assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE,
 8004cd2:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 020f 	bic.w	r2, r3, #15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	494a      	ldr	r1, [pc, #296]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	620b      	str	r3, [r1, #32]
					pClkInitStruct->AHBCLKDivider);
		}
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8093 	beq.w	8004e18 <HAL_RCC_ClockConfig+0x238>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

		/* PLL is selected as System Clock Source */
		if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x12a>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U) {
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d121      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x16a>
				return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e113      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
			}
		} else {
			/* HSE is selected as System Clock Source */
			if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x142>
				/* Check the HSE ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d115      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x16a>
					return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e107      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
				}
			}
			/* CSI is selected as System Clock Source */
			else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x15a>
				/* Check the CSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U) {
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x16a>
					return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0fb      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
				}
			}
			/* HSI is selected as System Clock Source */
			else {
				/* Check the HSI ready flag */
				if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x16a>
					return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0f3      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
				}
			}
		}

		MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004d4a:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	492c      	ldr	r1, [pc, #176]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61cb      	str	r3, [r1, #28]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8004d5c:	f7fc fab0 	bl	80012c0 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

		if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d112      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1b0>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1a2>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE) {
 8004d6c:	f7fc faa8 	bl	80012c0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x1a2>
					return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0d7      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0318 	and.w	r3, r3, #24
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8004d8a:	2b18      	cmp	r3, #24
 8004d8c:	d1ee      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x18c>
 8004d8e:	e043      	b.n	8004e18 <HAL_RCC_ClockConfig+0x238>
				}
			}
		} else {
			if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d112      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x1de>
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_ClockConfig+0x1d0>
						!= RCC_SYSCLKSOURCE_STATUS_HSE) {
					if ((HAL_GetTick() - tickstart)
 8004d9a:	f7fc fa91 	bl	80012c0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x1d0>
							> RCC_CLOCKSWITCH_TIMEOUT_VALUE) {
						return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0c0      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 0318 	and.w	r3, r3, #24
						!= RCC_SYSCLKSOURCE_STATUS_HSE) {
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d1ee      	bne.n	8004d9a <HAL_RCC_ClockConfig+0x1ba>
 8004dbc:	e02c      	b.n	8004e18 <HAL_RCC_ClockConfig+0x238>
					}
				}
			} else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d122      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x22c>
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x1fe>
						!= RCC_SYSCLKSOURCE_STATUS_CSI) {
					if ((HAL_GetTick() - tickstart)
 8004dc8:	f7fc fa7a 	bl	80012c0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x1fe>
							> RCC_CLOCKSWITCH_TIMEOUT_VALUE) {
						return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0a9      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x228>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0318 	and.w	r3, r3, #24
						!= RCC_SYSCLKSOURCE_STATUS_CSI) {
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d1ee      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1e8>
 8004dea:	e015      	b.n	8004e18 <HAL_RCC_ClockConfig+0x238>
					}
				}
			} else {
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
						!= RCC_SYSCLKSOURCE_STATUS_HSI) {
					if ((HAL_GetTick() - tickstart)
 8004dec:	f7fc fa68 	bl	80012c0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d906      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x22c>
							> RCC_CLOCKSWITCH_TIMEOUT_VALUE) {
						return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e097      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
 8004e02:	bf00      	nop
 8004e04:	40022000 	.word	0x40022000
 8004e08:	44020c00 	.word	0x44020c00
				while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004e0c:	4b4b      	ldr	r3, [pc, #300]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f003 0318 	and.w	r3, r3, #24
						!= RCC_SYSCLKSOURCE_STATUS_HSI) {
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e9      	bne.n	8004dec <HAL_RCC_ClockConfig+0x20c>
		}
	}

	/* Decreasing the BUS frequency divider */
	/*-------------------------- HCLK Configuration --------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d010      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x266>
		if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE)) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	4b44      	ldr	r3, [pc, #272]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d208      	bcs.n	8004e46 <HAL_RCC_ClockConfig+0x266>
			assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE,
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f023 020f 	bic.w	r2, r3, #15
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	493e      	ldr	r1, [pc, #248]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	620b      	str	r3, [r1, #32]
					pClkInitStruct->AHBCLKDivider);
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8004e46:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <HAL_RCC_ClockConfig+0x360>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d210      	bcs.n	8004e76 <HAL_RCC_ClockConfig+0x296>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004e54:	4b3a      	ldr	r3, [pc, #232]	; (8004f40 <HAL_RCC_ClockConfig+0x360>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 020f 	bic.w	r2, r3, #15
 8004e5c:	4938      	ldr	r1, [pc, #224]	; (8004f40 <HAL_RCC_ClockConfig+0x360>)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004e64:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <HAL_RCC_ClockConfig+0x360>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d001      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x296>
			return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e05d      	b.n	8004f32 <HAL_RCC_ClockConfig+0x352>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x2c4>
			== RCC_CLOCKTYPE_PCLK1) {
		if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1)) {
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d208      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x2c4>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1,
 8004e92:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	4927      	ldr	r1, [pc, #156]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	620b      	str	r3, [r1, #32]
					pClkInitStruct->APB1CLKDivider);
		}
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d012      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x2f6>
			== RCC_CLOCKTYPE_PCLK2) {
		if ((pClkInitStruct->APB2CLKDivider)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691a      	ldr	r2, [r3, #16]
				< ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4)) {
 8004eb4:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
		if ((pClkInitStruct->APB2CLKDivider)
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d209      	bcs.n	8004ed6 <HAL_RCC_ClockConfig+0x2f6>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2,
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	491a      	ldr	r1, [pc, #104]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	620b      	str	r3, [r1, #32]
					((pClkInitStruct->APB2CLKDivider) << 4));
		}
	}

	/*-------------------------- PCLK3 Configuration ---------------------------*/
	if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d012      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x328>
			== RCC_CLOCKTYPE_PCLK3) {
		if ((pClkInitStruct->APB3CLKDivider)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695a      	ldr	r2, [r3, #20]
				< ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8)) {
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
		if ((pClkInitStruct->APB3CLKDivider)
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d209      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x328>
			assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
			MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3,
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	620b      	str	r3, [r1, #32]
		}
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock =
			HAL_RCC_GetSysClockFreq()
 8004f08:	f000 f822 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f0c:	4602      	mov	r2, r0
					>> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_ClockConfig+0x35c>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
							>> RCC_CFGR2_HPRE_Pos];
 8004f12:	f003 030f 	and.w	r3, r3, #15
					>> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 8004f16:	490b      	ldr	r1, [pc, #44]	; (8004f44 <HAL_RCC_ClockConfig+0x364>)
 8004f18:	5ccb      	ldrb	r3, [r1, r3]
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock =
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x368>)
 8004f20:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	halstatus = HAL_InitTick(uwTickPrio);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x36c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fc f980 	bl	800122c <HAL_InitTick>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	72fb      	strb	r3, [r7, #11]

	return halstatus;
 8004f30:	7afb      	ldrb	r3, [r7, #11]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	44020c00 	.word	0x44020c00
 8004f40:	40022000 	.word	0x40022000
 8004f44:	08005fe4 	.word	0x08005fe4
 8004f48:	20000048 	.word	0x20000048
 8004f4c:	2000004c 	.word	0x2000004c

08004f50 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
	uint32_t sysclockfreq;
	uint32_t hsivalue;
	float_t fracn1;
	float_t pllvco;

	if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI) {
 8004f56:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0318 	and.w	r3, r3, #24
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x18>
		/* CSI used as system clock  source */
		sysclockfreq = CSI_VALUE;
 8004f62:	4b8a      	ldr	r3, [pc, #552]	; (800518c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	e107      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) {
 8004f68:	4b87      	ldr	r3, [pc, #540]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f003 0318 	and.w	r3, r3, #24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d112      	bne.n	8004f9a <HAL_RCC_GetSysClockFreq+0x4a>
		/* HSI used as system clock source */
		if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U) {
 8004f74:	4b84      	ldr	r3, [pc, #528]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x44>
			sysclockfreq = (uint32_t) (HSI_VALUE
					>> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f80:	4b81      	ldr	r3, [pc, #516]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
			sysclockfreq = (uint32_t) (HSI_VALUE
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	e0f1      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
		} else {
			sysclockfreq = (uint32_t) HSI_VALUE;
 8004f94:	4b7e      	ldr	r3, [pc, #504]	; (8005190 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e0ee      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
		}
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) {
 8004f9a:	4b7b      	ldr	r3, [pc, #492]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 0318 	and.w	r3, r3, #24
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d102      	bne.n	8004fac <HAL_RCC_GetSysClockFreq+0x5c>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 8004fa6:	4b7b      	ldr	r3, [pc, #492]	; (8005194 <HAL_RCC_GetSysClockFreq+0x244>)
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e0e5      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
	}

	else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8004fac:	4b76      	ldr	r3, [pc, #472]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f003 0318 	and.w	r3, r3, #24
 8004fb4:	2b18      	cmp	r3, #24
 8004fb6:	f040 80dd 	bne.w	8005174 <HAL_RCC_GetSysClockFreq+0x224>
		/* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004fba:	4b73      	ldr	r3, [pc, #460]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	617b      	str	r3, [r7, #20]
		pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fc4:	4b70      	ldr	r3, [pc, #448]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fce:	613b      	str	r3, [r7, #16]
		pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)
 8004fd0:	4b6d      	ldr	r3, [pc, #436]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				>> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fd4:	091b      	lsrs	r3, r3, #4
		pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
		fracn1 = (float_t) (uint32_t) (pllfracen * ((RCC->PLL1FRACR &
 8004fdc:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
		fracn1 = (float_t) (uint32_t) (pllfracen * ((RCC->PLL1FRACR &
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	edc7 7a02 	vstr	s15, [r7, #8]

		if (pllm != 0U) {
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80b7 	beq.w	800516e <HAL_RCC_GetSysClockFreq+0x21e>
			switch (pllsource) {
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0xbe>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d056      	beq.n	80050ba <HAL_RCC_GetSysClockFreq+0x16a>
 800500c:	e077      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x1ae>
			case RCC_PLL1_SOURCE_HSI: /* HSI used as PLL1 clock source */

				if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U) {
 800500e:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02d      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x126>
					hsivalue =
							(HSI_VALUE
									>> (__HAL_RCC_GET_HSI_DIVIDER()
 800501a:	4b5b      	ldr	r3, [pc, #364]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 800501c:	681b      	ldr	r3, [r3, #0]
											>> RCC_CR_HSIDIV_Pos));
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f003 0303 	and.w	r3, r3, #3
					hsivalue =
 8005024:	4a5a      	ldr	r2, [pc, #360]	; (8005190 <HAL_RCC_GetSysClockFreq+0x240>)
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	607b      	str	r3, [r7, #4]
					pllvco =
							((float_t) hsivalue / (float_t) pllm)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									* ((float_t) (uint32_t) (RCC->PLL1DIVR
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 6a67 	vcvt.f32.u32	s13, s15
											& RCC_PLL1DIVR_PLL1N)
											+ (fracn1 / (float_t) 0x2000)
 8005054:	ed97 6a02 	vldr	s12, [r7, #8]
 8005058:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005198 <HAL_RCC_GetSysClockFreq+0x248>
 800505c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005060:	ee76 7aa7 	vadd.f32	s15, s13, s15
											+ (float_t) 1);
 8005064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005068:	ee77 7aa6 	vadd.f32	s15, s15, s13
					pllvco =
 800506c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005070:	edc7 7a06 	vstr	s15, [r7, #24]
											& RCC_PLL1DIVR_PLL1N)
											+ (fracn1 / (float_t) 0x2000)
											+ (float_t) 1);
				}

				break;
 8005074:	e065      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x1f2>
							((float_t) HSI_VALUE / (float_t) pllm)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005080:	eddf 6a46 	vldr	s13, [pc, #280]	; 800519c <HAL_RCC_GetSysClockFreq+0x24c>
 8005084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									* ((float_t) (uint32_t) (RCC->PLL1DIVR
 8005088:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 6a67 	vcvt.f32.u32	s13, s15
											+ (fracn1 / (float_t) 0x2000)
 8005098:	ed97 6a02 	vldr	s12, [r7, #8]
 800509c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005198 <HAL_RCC_GetSysClockFreq+0x248>
 80050a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
											+ (float_t) 1);
 80050a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
					pllvco =
 80050b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b4:	edc7 7a06 	vstr	s15, [r7, #24]
				break;
 80050b8:	e043      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x1f2>

			case RCC_PLL1_SOURCE_HSE: /* HSE used as PLL1 clock source */
				pllvco = ((float_t) HSE_VALUE / (float_t) pllm)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80051a0 <HAL_RCC_GetSysClockFreq+0x250>
 80050c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						* ((float_t) (uint32_t) (RCC->PLL1DIVR
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
								& RCC_PLL1DIVR_PLL1N)
								+ (fracn1 / (float_t) 0x2000) + (float_t) 1);
 80050dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005198 <HAL_RCC_GetSysClockFreq+0x248>
 80050e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
				pllvco = ((float_t) HSE_VALUE / (float_t) pllm)
 80050f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f8:	edc7 7a06 	vstr	s15, [r7, #24]

				break;
 80050fc:	e021      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x1f2>

			case RCC_PLL1_SOURCE_CSI: /* CSI used as PLL1 clock source */
			default:
				pllvco = ((float_t) CSI_VALUE / (float_t) pllm)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005108:	eddf 6a26 	vldr	s13, [pc, #152]	; 80051a4 <HAL_RCC_GetSysClockFreq+0x254>
 800510c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						* ((float_t) (uint32_t) (RCC->PLL1DIVR
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eef8 6a67 	vcvt.f32.u32	s13, s15
								& RCC_PLL1DIVR_PLL1N)
								+ (fracn1 / (float_t) 0x2000) + (float_t) 1);
 8005120:	ed97 6a02 	vldr	s12, [r7, #8]
 8005124:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005198 <HAL_RCC_GetSysClockFreq+0x248>
 8005128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005134:	ee77 7aa6 	vadd.f32	s15, s15, s13
				pllvco = ((float_t) CSI_VALUE / (float_t) pllm)
 8005138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513c:	edc7 7a06 	vstr	s15, [r7, #24]
				break;
 8005140:	bf00      	nop
			}

			pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P)
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_RCC_GetSysClockFreq+0x238>)
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
					>> RCC_PLL1DIVR_PLL1P_Pos) + 1U);
 8005146:	0a5b      	lsrs	r3, r3, #9
 8005148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P)
 800514c:	3301      	adds	r3, #1
 800514e:	603b      	str	r3, [r7, #0]
			sysclockfreq = (uint32_t) (float_t) (pllvco / (float_t) pllp);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800515a:	edd7 6a06 	vldr	s13, [r7, #24]
 800515e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005166:	ee17 3a90 	vmov	r3, s15
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e004      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
		} else {
			sysclockfreq = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e001      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x228>
		}
	}

	else {
		/* HSI is the default system clock source */
		sysclockfreq = (uint32_t) HSI_VALUE;
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_GetSysClockFreq+0x240>)
 8005176:	61fb      	str	r3, [r7, #28]
	}

	return sysclockfreq;
 8005178:	69fb      	ldr	r3, [r7, #28]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	44020c00 	.word	0x44020c00
 800518c:	003d0900 	.word	0x003d0900
 8005190:	03d09000 	.word	0x03d09000
 8005194:	016e3600 	.word	0x016e3600
 8005198:	46000000 	.word	0x46000000
 800519c:	4c742400 	.word	0x4c742400
 80051a0:	4bb71b00 	.word	0x4bb71b00
 80051a4:	4a742400 	.word	0x4a742400

080051a8 <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0

	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80051ac:	f7ff fed0 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 80051b0:	4602      	mov	r2, r0
			>> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
					>> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80051b6:	f003 030f 	and.w	r3, r3, #15
			>> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 80051ba:	4907      	ldr	r1, [pc, #28]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80051bc:	5ccb      	ldrb	r3, [r1, r3]
					>> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80051be:	f003 031f 	and.w	r3, r3, #31
			>> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <HAL_RCC_GetHCLKFreq+0x34>)
 80051c8:	6013      	str	r3, [r2, #0]

	return SystemCoreClock;
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <HAL_RCC_GetHCLKFreq+0x34>)
 80051cc:	681b      	ldr	r3, [r3, #0]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	44020c00 	.word	0x44020c00
 80051d8:	08005fe4 	.word	0x08005fe4
 80051dc:	20000048 	.word	0x20000048

080051e0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80051e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e4:	b0aa      	sub	sp, #168	; 0xa8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8005204:	2500      	movs	r5, #0
 8005206:	ea54 0305 	orrs.w	r3, r4, r5
 800520a:	d00b      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800520c:	4bb8      	ldr	r3, [pc, #736]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800520e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005212:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8005216:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	4ab4      	ldr	r2, [pc, #720]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800521e:	430b      	orrs	r3, r1
 8005220:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f002 0801 	and.w	r8, r2, #1
 8005230:	f04f 0900 	mov.w	r9, #0
 8005234:	ea58 0309 	orrs.w	r3, r8, r9
 8005238:	d038      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800523a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	2b05      	cmp	r3, #5
 8005242:	d819      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005281 	.word	0x08005281
 8005250:	08005265 	.word	0x08005265
 8005254:	08005279 	.word	0x08005279
 8005258:	08005281 	.word	0x08005281
 800525c:	08005281 	.word	0x08005281
 8005260:	08005281 	.word	0x08005281
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005268:	3308      	adds	r3, #8
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fddc 	bl	8005e28 <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800528a:	4b99      	ldr	r3, [pc, #612]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800528c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005290:	f023 0107 	bic.w	r1, r3, #7
 8005294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	4a95      	ldr	r2, [pc, #596]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800529c:	430b      	orrs	r3, r1
 800529e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052a2:	e003      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80052a8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f002 0a02 	and.w	sl, r2, #2
 80052b8:	f04f 0b00 	mov.w	fp, #0
 80052bc:	ea5a 030b 	orrs.w	r3, sl, fp
 80052c0:	d03c      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80052c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	2b28      	cmp	r3, #40	; 0x28
 80052ca:	d01b      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80052cc:	2b28      	cmp	r3, #40	; 0x28
 80052ce:	d815      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d019      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d811      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80052d8:	2b18      	cmp	r3, #24
 80052da:	d017      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80052dc:	2b18      	cmp	r3, #24
 80052de:	d80d      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d109      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052ec:	3308      	adds	r3, #8
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd9a 	bl	8005e28 <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80052fa:	e00a      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005302:	e006      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005304:	bf00      	nop
 8005306:	e004      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005308:	bf00      	nop
 800530a:	e002      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800530c:	bf00      	nop
 800530e:	e000      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005312:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800531a:	4b75      	ldr	r3, [pc, #468]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800531c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005320:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4a71      	ldr	r2, [pc, #452]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800532c:	430b      	orrs	r3, r1
 800532e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005332:	e003      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005338:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800533c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f002 0304 	and.w	r3, r2, #4
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005352:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005356:	460b      	mov	r3, r1
 8005358:	4313      	orrs	r3, r2
 800535a:	d040      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800535c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005366:	d01e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005368:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800536c:	d817      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d01a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	d811      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800537a:	2bc0      	cmp	r3, #192	; 0xc0
 800537c:	d017      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d80d      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d015      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d109      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800538a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800538e:	3308      	adds	r3, #8
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fd49 	bl	8005e28 <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 800539c:	e00a      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80053a4:	e006      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80053a6:	bf00      	nop
 80053a8:	e004      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80053b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80053bc:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80053c2:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80053c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	4a48      	ldr	r2, [pc, #288]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80053da:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80053ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d043      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80053fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005408:	d021      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800540a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800540e:	d81a      	bhi.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005414:	d01d      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005416:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800541a:	d814      	bhi.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800541c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005420:	d019      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005422:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005426:	d80e      	bhi.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d016      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800542c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005430:	d109      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005436:	3308      	adds	r3, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fcf5 	bl	8005e28 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005444:	e00a      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800544c:	e006      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800544e:	bf00      	nop
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800545a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800546a:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800546e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005476:	430b      	orrs	r3, r1
 8005478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005482:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005492:	67bb      	str	r3, [r7, #120]	; 0x78
 8005494:	2300      	movs	r3, #0
 8005496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005498:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d03e      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80054a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ac:	d01b      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80054ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b2:	d814      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80054b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b8:	d017      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80054ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054be:	d80e      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c8:	d109      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ce:	3308      	adds	r3, #8
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fca9 	bl	8005e28 <RCCEx_PLL2_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80054dc:	e00b      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80054e4:	e007      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80054e6:	bf00      	nop
 80054e8:	e005      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80054ea:	bf00      	nop
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80054ee:	bf00      	nop
 80054f0:	44020c00 	.word	0x44020c00
        break;
 80054f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80054fe:	4ba5      	ldr	r3, [pc, #660]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005504:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	4aa1      	ldr	r2, [pc, #644]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005510:	430b      	orrs	r3, r1
 8005512:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005516:	e003      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800551c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800552c:	673b      	str	r3, [r7, #112]	; 0x70
 800552e:	2300      	movs	r3, #0
 8005530:	677b      	str	r3, [r7, #116]	; 0x74
 8005532:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005536:	460b      	mov	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	d03b      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800553c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005546:	d01b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005548:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800554c:	d814      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800554e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005552:	d017      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005558:	d80e      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800555e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005562:	d109      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005568:	3308      	adds	r3, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fc5c 	bl	8005e28 <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005576:	e008      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800557e:	e004      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005592:	4b80      	ldr	r3, [pc, #512]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005598:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800559c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	4a7c      	ldr	r2, [pc, #496]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80055aa:	e003      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80055b0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80055b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80055c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c2:	2300      	movs	r3, #0
 80055c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d033      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80055d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055da:	d015      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e0:	d80e      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d012      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80055e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ea:	d109      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055f0:	3308      	adds	r3, #8
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fc18 	bl	8005e28 <RCCEx_PLL2_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80055fe:	e006      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005606:	e002      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10c      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005616:	4b5f      	ldr	r3, [pc, #380]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800561c:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005620:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005626:	4a5b      	ldr	r2, [pc, #364]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005628:	430b      	orrs	r3, r1
 800562a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800562e:	e003      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005634:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	2100      	movs	r1, #0
 8005642:	6639      	str	r1, [r7, #96]	; 0x60
 8005644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005648:	667b      	str	r3, [r7, #100]	; 0x64
 800564a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d033      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005654:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d015      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005664:	d80e      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800566a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800566e:	d109      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005674:	3308      	adds	r3, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fbd6 	bl	8005e28 <RCCEx_PLL2_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005682:	e006      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800568a:	e002      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005692:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800569a:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800569c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056a0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80056a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	4a3a      	ldr	r2, [pc, #232]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80056b8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	2100      	movs	r1, #0
 80056c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80056c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80056d8:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e2:	61d3      	str	r3, [r2, #28]
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056e6:	69d9      	ldr	r1, [r3, #28]
 80056e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f0:	4a28      	ldr	r2, [pc, #160]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056f2:	430b      	orrs	r3, r1
 80056f4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005702:	653b      	str	r3, [r7, #80]	; 0x50
 8005704:	2300      	movs	r3, #0
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
 8005708:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d046      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800571c:	d021      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800571e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005722:	d81a      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d01d      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800572a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572e:	d814      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005734:	d019      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573a:	d80e      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005744:	d109      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800574a:	3308      	adds	r3, #8
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fb6b 	bl	8005e28 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005758:	e00a      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005762:	bf00      	nop
 8005764:	e004      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800576e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005770:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10f      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800577a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800577e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	4a02      	ldr	r2, [pc, #8]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005790:	e006      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005792:	bf00      	nop
 8005794:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800579c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80057ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ae:	2300      	movs	r3, #0
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d043      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80057bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80057c6:	d021      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80057c8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80057cc:	d81a      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80057ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d2:	d01d      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d814      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80057da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057de:	d019      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80057e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e4:	d80e      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d109      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057f4:	3308      	adds	r3, #8
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb16 	bl	8005e28 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005802:	e00a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800580c:	bf00      	nop
 800580e:	e004      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005810:	bf00      	nop
 8005812:	e002      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005822:	4bb6      	ldr	r3, [pc, #728]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005824:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005828:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800582c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	4ab2      	ldr	r2, [pc, #712]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005834:	430b      	orrs	r3, r1
 8005836:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800583a:	e003      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005840:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005850:	643b      	str	r3, [r7, #64]	; 0x40
 8005852:	2300      	movs	r3, #0
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d030      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005860:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005866:	2b05      	cmp	r3, #5
 8005868:	d80f      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800586a:	2b03      	cmp	r3, #3
 800586c:	d211      	bcs.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800586e:	2b01      	cmp	r3, #1
 8005870:	d911      	bls.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005872:	2b02      	cmp	r3, #2
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800587a:	3308      	adds	r3, #8
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fad3 	bl	8005e28 <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10c      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80058a0:	4b96      	ldr	r3, [pc, #600]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058a6:	f023 0107 	bic.w	r1, r3, #7
 80058aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b0:	4a92      	ldr	r2, [pc, #584]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058b8:	e003      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80058be:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80058c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	2100      	movs	r1, #0
 80058cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80058ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80058de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d005      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80058f2:	e002      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005902:	4b7e      	ldr	r3, [pc, #504]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005908:	f023 0108 	bic.w	r1, r3, #8
 800590c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005912:	4a7a      	ldr	r2, [pc, #488]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005914:	430b      	orrs	r3, r1
 8005916:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005920:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	f000 80b0 	beq.w	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005942:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594e:	f7fb fcb7 	bl	80012c0 <HAL_GetTick>
 8005952:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005956:	e00b      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fb fcb2 	bl	80012c0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d903      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800596e:	e005      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005970:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ed      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800597c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 808a 	bne.w	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005986:	4b5d      	ldr	r3, [pc, #372]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800598c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800599c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d01b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059aa:	4b54      	ldr	r3, [pc, #336]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059b8:	4b50      	ldr	r3, [pc, #320]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059be:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059c8:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ce:	4a4b      	ldr	r2, [pc, #300]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059d8:	4a48      	ldr	r2, [pc, #288]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d019      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fb fc67 	bl	80012c0 <HAL_GetTick>
 80059f2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f6:	e00d      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fb fc62 	bl	80012c0 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d903      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8005a12:	e006      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ea      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005a22:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d132      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d10f      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a52:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	61d3      	str	r3, [r2, #28]
 8005a58:	e005      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a64:	61d3      	str	r3, [r2, #28]
 8005a66:	4b25      	ldr	r3, [pc, #148]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a78:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a86:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a90:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005a94:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005a9e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d038      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d014      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d80e      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d012      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d80a      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d106      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005adc:	4b07      	ldr	r3, [pc, #28]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	4a06      	ldr	r2, [pc, #24]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae6:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ae8:	e00d      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005af0:	e009      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005af2:	bf00      	nop
 8005af4:	e007      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005af6:	bf00      	nop
 8005af8:	e005      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005afa:	bf00      	nop
 8005afc:	44020c00 	.word	0x44020c00
 8005b00:	44020800 	.word	0x44020800
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005b0e:	4bb5      	ldr	r3, [pc, #724]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	49b1      	ldr	r1, [pc, #708]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005b26:	e003      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005b2c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d81d      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b7f 	.word	0x08005b7f
 8005b64:	08005b93 	.word	0x08005b93
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b9c      	ldr	r3, [pc, #624]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	4a9b      	ldr	r2, [pc, #620]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e00e      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b82:	3308      	adds	r3, #8
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f94f 	bl	8005e28 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b90:	e004      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005ba4:	4b8f      	ldr	r3, [pc, #572]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005baa:	f023 0207 	bic.w	r2, r3, #7
 8005bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	498b      	ldr	r1, [pc, #556]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005bc2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d03c      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d01f      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d819      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005bf0:	2b18      	cmp	r3, #24
 8005bf2:	d01d      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005bf4:	2b18      	cmp	r3, #24
 8005bf6:	d815      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d007      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005c00:	e010      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c02:	4b78      	ldr	r3, [pc, #480]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	4a77      	ldr	r2, [pc, #476]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e010      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c14:	3308      	adds	r3, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f906 	bl	8005e28 <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c22:	e006      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005c2a:	e002      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c32:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c3a:	4b6a      	ldr	r3, [pc, #424]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c40:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	4966      	ldr	r1, [pc, #408]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005c58:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d03e      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005c78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c82:	d020      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c88:	d819      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c8c:	d01d      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c90:	d815      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d007      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005c9a:	e010      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b51      	ldr	r3, [pc, #324]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	4a50      	ldr	r2, [pc, #320]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e010      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cae:	3308      	adds	r3, #8
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f8b9 	bl	8005e28 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ccc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005cd4:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce4:	493f      	ldr	r1, [pc, #252]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005cf2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	2100      	movs	r1, #0
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d038      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d00e      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d815      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d017      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2c:	d110      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d3a:	e00e      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d40:	3308      	adds	r3, #8
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f870 	bl	8005e28 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d4e:	e004      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005d56:	e000      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	491c      	ldr	r1, [pc, #112]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005d80:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	6039      	str	r1, [r7, #0]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	d039      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d01e      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005daa:	2b30      	cmp	r3, #48	; 0x30
 8005dac:	d815      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d002      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d007      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005db6:	e010      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dc4:	e011      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dca:	3308      	adds	r3, #8
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f82b 	bl	8005e28 <RCCEx_PLL2_Config>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005dd8:	e007      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005de2:	bf00      	nop
 8005de4:	44020c00 	.word	0x44020c00
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005df4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005df8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e02:	4908      	ldr	r1, [pc, #32]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e0a:	e003      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005e10:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005e14:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	37a8      	adds	r7, #168	; 0xa8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e22:	bf00      	nop
 8005e24:	44020c00 	.word	0x44020c00

08005e28 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005e30:	4b48      	ldr	r3, [pc, #288]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a47      	ldr	r2, [pc, #284]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e3c:	f7fb fa40 	bl	80012c0 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e42:	e008      	b.n	8005e56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e44:	f7fb fa3c 	bl	80012c0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e07a      	b.n	8005f4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e56:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005e62:	4b3c      	ldr	r3, [pc, #240]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6852      	ldr	r2, [r2, #4]
 8005e76:	0212      	lsls	r2, r2, #8
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	4936      	ldr	r1, [pc, #216]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	025b      	lsls	r3, r3, #9
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eb0:	4928      	ldr	r1, [pc, #160]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005eb6:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f023 020c 	bic.w	r2, r3, #12
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	4924      	ldr	r1, [pc, #144]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f023 0220 	bic.w	r2, r3, #32
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	491f      	ldr	r1, [pc, #124]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005eda:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	491c      	ldr	r1, [pc, #112]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005eee:	f023 0310 	bic.w	r3, r3, #16
 8005ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005ef4:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005efc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6a12      	ldr	r2, [r2, #32]
 8005f04:	00d2      	lsls	r2, r2, #3
 8005f06:	4913      	ldr	r1, [pc, #76]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f12:	f043 0310 	orr.w	r3, r3, #16
 8005f16:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f24:	f7fb f9cc 	bl	80012c0 <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f2a:	e008      	b.n	8005f3e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f2c:	f7fb f9c8 	bl	80012c0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e006      	b.n	8005f4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <RCCEx_PLL2_Config+0x12c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0

}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	44020c00 	.word	0x44020c00

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4d0d      	ldr	r5, [pc, #52]	; (8005fa0 <__libc_init_array+0x38>)
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	4c0d      	ldr	r4, [pc, #52]	; (8005fa4 <__libc_init_array+0x3c>)
 8005f70:	1b64      	subs	r4, r4, r5
 8005f72:	10a4      	asrs	r4, r4, #2
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	4d0b      	ldr	r5, [pc, #44]	; (8005fa8 <__libc_init_array+0x40>)
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	4c0b      	ldr	r4, [pc, #44]	; (8005fac <__libc_init_array+0x44>)
 8005f7e:	f000 f817 	bl	8005fb0 <_init>
 8005f82:	1b64      	subs	r4, r4, r5
 8005f84:	10a4      	asrs	r4, r4, #2
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	3601      	adds	r6, #1
 8005f92:	4798      	blx	r3
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	4798      	blx	r3
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	08005ff4 	.word	0x08005ff4
 8005fa4:	08005ff4 	.word	0x08005ff4
 8005fa8:	08005ff4 	.word	0x08005ff4
 8005fac:	08005ff8 	.word	0x08005ff8

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
